[
  {
    "id": "1c41686b.5bfd08",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var avgtemp=0;\nvar avghumidity=0;\nvar numthermos=0;\nvar numhumidities=0;\nmsg.payload={\n    \"thermostats\":context.global.Ecobee.Thermostats,\n    \"sensor_pods\":context.global.Ecobee.Sensors\n};\nif (typeof context.global.winkState.thermostats=='undefined'){ context.global.winkState.thermostats = new Object(); }\nfor (var name in msg.payload.thermostats)\n{\n//    node.warn(\"Importing: \"+name+\" thermostat\");\n    context.global.winkState.thermostats[name]={\n        \"name\":name,\n        \"object_type\": msg.payload.thermostats[name].object_type,\n        \"object_id\": msg.payload.thermostats[name].object_id,\n        \"freeboard\": 0,\n        \"connection\": msg.payload.thermostats[name].connection,\n        \"min_set_point\": (msg.payload.thermostats[name].min_set_point-32)*(5/9),\n        \"max_set_point\": (msg.payload.thermostats[name].max_set_point-32)*(5/9),\n        \"mode\": msg.payload.thermostats[name].mode,\n        \"temperature\": (msg.payload.thermostats[name].temperature-32)*(5/9),\n        \"humidity\": msg.payload.thermostats[name].humidity,\n        \"users_away\":false\n    };\n    if (msg.payload.thermostats[name].temperature){ avgtemp+=(msg.payload.thermostats[name].temperature-32)*(5/9); numthermos++; }\n    if (msg.payload.thermostats[name].humidity){ avghumidity+=(msg.payload.thermostats[name].humidity); numhumidities++; }\n}\n\navgtemp=avgtemp/numthermos;\navghumidity=avghumidity/numhumidities;\n\nif (typeof context.global.winkState.groups[\".sensors\"].temperature=='undefined'){ context.global.winkState.groups[\".sensors\"].temperature = new Object(); }\nif (typeof context.global.winkState.groups[\".sensors\"].humidity=='undefined'){ context.global.winkState.groups[\".sensors\"].humidity = new Object(); }\ncontext.global.winkState.groups[\".sensors\"].temperature={\n    average:avgtemp\n};\ncontext.global.winkState.groups[\".sensors\"].humidity={\n    average:avghumidity\n};\n\n//node.warn(\"Ecobee Thermostat import finished\");\n\nfor (var name in msg.payload.sensor_pods)\n{\n//    node.warn(\"Importing: \"+name+\" sensor pod\");\n    context.global.winkState.sensor_pods[name]={\n        \"name\":name,\n        \"object_type\":msg.payload.sensor_pods[name].object_type,\n        \"object_id\":msg.payload.sensor_pods[name].object_id,\n        \"freeboard\":0,\n    }\n    if (msg.payload.sensor_pods[name].motion==\"true\"){context.global.winkState.sensor_pods[name].motion=true}\n    else if (msg.payload.sensor_pods[name].motion==\"false\"){context.global.winkState.sensor_pods[name].motion=false}\n    context.global.winkDevCap[name]={\n        \"sensor_types\":[{}]\n    }\n    context.global.winkDevCap[name].sensor_types=[{\n            \"field\":\"motion\",\n            \"type\":\"boolean\"\n        }]\n}\n\n//node.warn(\"Ecobee Remote Sensor import finished\");\nvar newMsg={\n    \"payload\":\"Ecobee Thermostat and Remote Sensor Data imported successfully\"\n};\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 275.5,
    "y": 868.5,
    "wires": [
      [
        "7e943f2b.f87b4"
      ]
    ]
  },
  {
    "id": "63a478ba.152528",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if ('wnr' in context.global){\nvar WinkCMDmsg={};\nvar web_req=(context.global.getCookie('exchange_token',msg.req.headers.cookie)=='0' ? false:true);\n\nif (msg.payload.iftttkey==context.global.IFTTT_TOKEN || msg.payload.iftttkey==context.global.FREEBOARD_TOKEN) web_req=true;\nif (web_req)\n{\n    if ('ifttt' in  msg.payload)\n    {\n      context.global.ifttt=(msg.payload.ifttt.toLowerCase()==\"on\" ? true:false)\n      msg.res.StatusCode=200;\n      return [msg];\n    }\n    if ('winkName' in msg.payload)\n    {\n    //    node.warn('Name '+msg.payload.winkName)\n        if ('cmd' in msg.payload)\n        {\n            cmd=msg.payload.cmd\n        } else cmd='on' \n        if ('level' in msg.payload)\n        {\n            level=msg.payload.level\n        }  else level= (cmd.toLowerCase() =='on' ? 100 : 0)\n    //    node.warn(level)\n        WinkCMDmsg = context.global.executeWinkCMD(msg.payload.winkName,msg.payload.type,msg.payload.cmd,level);\n        msg.statusCode=200;\n    //    node.warn('Message '+ JSON.stringify(WinkCMDmsg))\n    }\n    if ('nodeRedVar' in msg.payload) {\n        if ('value' in msg.payload) value=msg.payload.value \n        else value = true;\n    context.global[msg.payload.nodeRedVar]=value;\n    WinkCMDmsg=context.global.send_ui_note('information',30000,'Variable '+msg.payload.nodeRedVar+' set to: '+context.global[msg.payload.nodeRedVar],null);\n    WinkCMDmsg.topic=msg.payload.nodeRedVar;\n    WinkCMDmsg.var_val=value;  \n    msg.statusCode=200;    \n    }\n    if ('nodeRedFunction' in msg.payload){\n        if (context.global[msg.payload.nodeRedFunction] instanceof Function) {\n            WinkCMDmsg=context.global.send_ui_note('information',30000,'Function '+msg.payload.nodeRedFunction+' executed',null);\n            WinkCMDmsg.topic=msg.payload.nodeRedFunction; \n            msg.statusCode=200;             \n            context.global[msg.payload.nodeRedFunction]();\n        }\n    }\n}\nelse {\n    node.warn(\"ifttt messages bad request\")\n     msg.statusCode=403;\n     return [msg,null];\n}\nif (WinkCMDmsg!==\"\")\n{\n    return [msg,WinkCMDmsg];\n}\nelse\n{\nreturn [msg,null];\n}\n} else return [msg,null];",
    "outputs": "2",
    "noerr": 0,
    "x": 630,
    "y": 240,
    "wires": [
      [
        "76cc9990.5ec7b8"
      ],
      [
        "8ca3563.fe626a8"
      ]
    ]
  },
  {
    "id": "9d9124d5.f4f4a8",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/ifttt",
    "method": "post",
    "swaggerDoc": "",
    "x": 105.5,
    "y": 238.5,
    "wires": [
      [
        "88b76a7.0c81298",
        "34f8e227.fa61de"
      ]
    ]
  },
  {
    "id": "76cc9990.5ec7b8",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 787.5,
    "y": 208.49993896484375,
    "wires": []
  },
  {
    "id": "20cba590.ec233a",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "IFTTT Integration-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 440,
    "y": 160,
    "wires": []
  },
  {
    "id": "915081be.e989a",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "tls": "",
    "x": 1148.5,
    "y": 245.49993896484375,
    "wires": [
      [
        "3a39d3dc.1f5f5c",
        "ce467e03.22ea5"
      ]
    ]
  },
  {
    "id": "6ed97e01.ca27a",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Wink API Apdex-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 442.5,
    "y": 426.49993896484375,
    "wires": []
  },
  {
    "id": "cf3f1fde.23a91",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "600",
    "crontab": "",
    "once": true,
    "x": 140.5,
    "y": 466.4998779296875,
    "wires": [
      [
        "68051fef.f371d"
      ]
    ]
  },
  {
    "id": "68051fef.f371d",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "context.global.new_version=\"Y\";\nvar newMsg ={\n    \"url\":\"http://status.winkapp.com/metrics-display/drtvg3y4p2ff/day.json\",\n    \"method\":\"GET\",\n    headers: {\n        \"Content-Type\":\"application/json\"\n    }\n};\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 301.5,
    "y": 468.49993896484375,
    "wires": [
      [
        "fe799f8c.79ff6"
      ]
    ]
  },
  {
    "id": "fe799f8c.79ff6",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 492.5,
    "y": 479.49993896484375,
    "wires": [
      [
        "5a3cf30.df0600c"
      ]
    ]
  },
  {
    "id": "5a3cf30.df0600c",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if ('metrics' in msg.payload && msg.payload.metrics.length>0){\ncontext.global.winkState.winkAPI = \"\";\nwinkAPI=\"\";\n        for(j = 0; j<msg.payload.metrics[0].data.length; j++)\n        {\n            winkAPI = msg.payload.metrics[0].data[j].value;\n        }\ncontext.global.winkState.winkAPI=winkAPI;\nvar newMsg={\n    payload:\"Wink Apdex is currently: \"+context.global.winkState.winkAPI\n};\nreturn newMsg;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 708.5,
    "y": 467.49993896484375,
    "wires": [
      [
        "aac7814c.0e565"
      ]
    ]
  },
  {
    "id": "23d263b8.93695c",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "DromCam/NestCam Integration-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 492.5,
    "y": 526.9998779296875,
    "wires": []
  },
  {
    "id": "aa727ee1.c2efa",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Presence  via IFTTT/Tasker/etc. -------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 492,
    "y": 627.9998779296875,
    "wires": []
  },
  {
    "id": "53356b83.61b134",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/presence",
    "method": "post",
    "swaggerDoc": "",
    "x": 106,
    "y": 668.9998779296875,
    "wires": [
      [
        "bf9a6323.14c46",
        "ce9a9854.326c18"
      ]
    ]
  },
  {
    "id": "bf9a6323.14c46",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Update Presence entry",
    "func": "pr_msg={};\n//if (typeof context.global.PresenceHistory === 'undefined') context.global.PresenceHistory=[]\npr_msg.payload={old_value:context.global.checkPresence()}\nif ((msg.payload.iftttkey==context.global.IFTTT_TOKEN) || (msg.payload.iftttkey==context.global.FREEBOARD_TOKEN))\n{\n    if (context.global.GEO_DEBUG) node.warn(msg.payload.name+' '+msg.payload.home)\n    if (typeof(context.global.Presence) === 'undefined'){\n    context.global.Presence = {}\n    } else pr_msg.payload.old_presence=context.global.Presence;\n    if (msg.payload.name !=='undefined'){\n        if (!context.global.Presence[msg.payload.name]) context.global.Presence[msg.payload.name]={}\n            context.global.Presence[msg.payload.name].home=msg.payload.home\n        }\n    msg.StatusCode=200;\n    pr_msg.payload.new_value=context.global.checkPresence();\n    node.send([msg,msg,pr_msg]);\n}\nelse {\n    node.warn(\"presense, bad request\")\n     msg.StatusCode=403;\n     pr_msg.payload.new_value='ERROR';\n     node.send(msg);\n}\n//return [msg,pr_msg];",
    "outputs": "3",
    "noerr": 0,
    "x": 363,
    "y": 679.9998779296875,
    "wires": [
      [
        "2cf3cacd.40fe96"
      ],
      [
        "76dc2c20.32d124",
        "c96631c.9ac14d",
        "9dde2e1a.a7725",
        "b31e56a6.e753b8"
      ],
      [
        "225b2207.0e451e",
        "18627609.e6704a"
      ]
    ]
  },
  {
    "id": "2cf3cacd.40fe96",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 977,
    "y": 663.9998779296875,
    "wires": []
  },
  {
    "id": "b150abb.822cf58",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var currDate= new Date();\ncurr_presence=context.global.checkPresence()\nif (msg.payload.new_value!=='ERROR' && msg.payload.new_value!==msg.payload.old_value){\n    if('old_presence' in  msg.payload){\n        var HistP={}\n        HistP.timestamp=new Date();\n        HistP.offset=context.global.Weather.Offset\n        HistP.details=msg.payload.old_presence\n//        node.warn(HistP)\n        context.global.PresenceHistory.unshift(HistP)\n    }\n    if (context.global.PresenceHistory.length > 15) context.global.PresenceHistory.pop();\n\n    var currDate= new Date();\n    var currHours=currDate.getHours();\n    var currMins=currDate.getMinutes();\n    currHours=currHours+context.global.Weather.Offset;\n    if ((currHours > context.global.Weather.SunriseHour && currHours < context.global.Weather.SunsetHour) || (currHours==context.global.Weather.SunsetHour && currMins <context.global.Weather.SunsetMin))\n    {\n        var timeFrame=\"DAY\";\n    }\n    else {\n        var timeFrame=\"NIGHT\";\n    } \n    if (!('PresenceShortcuts' in context.global)) context.global.PresenceShortcuts = true;\n    if(context.global.PresenceShortcuts) \n    {\n        var scene_name=(msg.payload.new_value ? 'PRESENCE' : 'NO PRESENCE')+' '+timeFrame;\n        for (var key in context.global.winkState.scenes){\n            if ( context.global.winkState.scenes[key].name.toUpperCase()==scene_name)\n            {\n                var newMsg ={\n                \"url\":\"https://winkapi.quirky.com/scenes/\"+context.global.winkState.scenes[key].object_id+\"/activate\",\n                \"method\": \"POST\",\n                headers: {\n                    \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                    \"Content-Type\":\"application/json\"\n                    }\n                }\n            if (context.global.DEBUG) node.warn(\"sending:\" + newMsg);            \n            node.send(newMsg);\n            break;\n            }\n        }\n    }    \n    if ('VacationMode' in context.global && context.global.VacationMode && msg.payload.new_value){\n            var newMsg1 ={\n                url:context.global.BlueMixUrlBase+'/red/ifttt',\n                \"method\": \"POST\",\n                headers: {\n                    \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n                },\n                payload:{\n                    \"nodeRedVar\":\"VacationMode\",\n                    \"value\":\"off\",\n                    \"iftttkey\":context.global.FREEBOARD_TOKEN\n                    }\n            };\n        node.send(newMsg1)\n    }\n    return;\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 989.895751953125,
    "y": 748.22216796875,
    "wires": [
      [
        "f39bfb48.e4b4a8"
      ]
    ]
  },
  {
    "id": "f39bfb48.e4b4a8",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1154.895751953125,
    "y": 748.333251953125,
    "wires": [
      [
        "bcef62a6.56824"
      ]
    ]
  },
  {
    "id": "3672e35e.ecc9fc",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Integration with Ecobee Node Red ----------------------------------------------------------------------------------------------",
    "info": "",
    "x": 385,
    "y": 828.5,
    "wires": []
  },
  {
    "id": "990c6833.e08448",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/freeboard/camera",
    "method": "get",
    "swaggerDoc": "",
    "x": 197.49998474121094,
    "y": 572.4999694824219,
    "wires": [
      [
        "344301b3.e5baae"
      ]
    ]
  },
  {
    "id": "344301b3.e5baae",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if (msg.payload.token==context.global.FREEBOARD_TOKEN)\n{\n   if(msg.payload.model.indexOf(\"dropcam\")!=-1){\n   if (typeof msg.payload.cuepoint ==='undefined'){\n   msg.url=\"https://api.wink.com/cameras/\"+msg.payload.id+\"/image\"\n   msg.method=\"GET\"\n    msg.headers= {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.6.0\"\n    }\n} else\n{\n    msg.url=\"https://api.wink.com/cameras/\"+msg.payload.id+\"/cuepoints/\"+msg.payload.cuepoint+\"/image\"\n   msg.method=\"GET\"\n    msg.headers= {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.6.0\"\n}\n}\nreturn msg;\n}\n}\nif (typeof msg.payload.model!=='undefined' && msg.payload.model=='foscam'){\nfor (var k in context.global.FosCam){\n    if (context.global.FosCam[k].Parameters.id.value==msg.payload.id){\n     msg.method=\"GET\"\n     msg.url=\"http://\"+context.global.FosCam[k].hostname+\"/videostream.cgi?user=\"+context.global.FosCam[k].uid+\"&pwd=\"+context.global.FosCam[k].pwd\n     node.warn(msg.url);\n    return msg;\n    }\n}\n}\nelse {\n    msg.statusCode=\"403\";\n    node.send(msg);\n//    msg.res.send(400,\"Bad Request darling\");\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 452.5,
    "y": 571.4999694824219,
    "wires": [
      [
        "32ce76ae.fb630a"
      ]
    ]
  },
  {
    "id": "32ce76ae.fb630a",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "bin",
    "url": "",
    "x": 621.4999847412109,
    "y": 573.4999694824219,
    "wires": [
      [
        "98ceccae.7dbed"
      ]
    ]
  },
  {
    "id": "98ceccae.7dbed",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 786.4999847412109,
    "y": 574.4999694824219,
    "wires": []
  },
  {
    "id": "31246be7.9aade4",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": " var PresenceBkup={\n    Presence: context.global.Presence,\n    PresenceDetail: context.global.PresenceDetail,\n    PresenceHistory: context.global.PresenceHistory\n }\n    var DBMsg={\n        url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp\",\n        method:\"POST\",\n        headers: \n            {\n                \"Content-Type\":\"application/json\"\n            },\n        payload: {\n            \"_id\":\"winkPresence\",\n            \"item\":\"Presence\",\n            \"Presence\":PresenceBkup\n        }\n    } \n \n \n //if (msg.payload.total_rows > 0  && msg.payload.rows.map(function(e) { return e.id; }).indexOf('winkPresence')!=-1){\n  if ('_rev' in msg.payload){   \n if (context.global.DEBUG) node.warn('record exists... updating');\n DBMsg.method=\"PUT\";\n DBMsg.url=DBMsg.url+\"/winkPresence\"\n DBMsg.payload._rev=msg.payload._rev;\n //msg.payload.rows.map(function(e) {if(e.id==\"winkPresence\") return e.value._rev; })[0];\n }\nreturn DBMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 1264.604248046875,
    "y": 703.611083984375,
    "wires": [
      [
        "1c0bd811.15f798"
      ]
    ]
  },
  {
    "id": "c96631c.9ac14d",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if (context.global.CloudantBkUP) {\n    var msg={\n        url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/winkPresence\",\n        method:\"GET\"\n    }\n    node.send(msg); \n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 978.604248046875,
    "y": 701.611083984375,
    "wires": [
      [
        "227b6cbf.7eeea4"
      ]
    ]
  },
  {
    "id": "227b6cbf.7eeea4",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1131.604248046875,
    "y": 702.611083984375,
    "wires": [
      [
        "31246be7.9aade4"
      ]
    ]
  },
  {
    "id": "1c0bd811.15f798",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1390.6041870117188,
    "y": 701.611083984375,
    "wires": [
      []
    ]
  },
  {
    "id": "e3a2be1b.bf923",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "82800",
    "crontab": "",
    "once": true,
    "x": 98.50003051757812,
    "y": 1113.8333129882812,
    "wires": [
      [
        "2da3f113.94172e"
      ]
    ]
  },
  {
    "id": "2da3f113.94172e",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Try to create DB",
    "func": "if (typeof context.global.VCAP_SERVICES!=='undefined' && 'cloudantNoSQLDB' in context.global.VCAP_SERVICES){\n    var DBmsg={\n        url: context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp\",\n        method:\"PUT\"\n    };\n    node.send(DBmsg);\n} else{\n    node.warn('Cloudant credentials are not present. DB backup will be disabled');\n    context.global.CloudantBkUP=false;\n    if (context.global.LocalBkup) node.warn('local installation will be used');\n    }\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 308.5000305175781,
    "y": 1114.8332824707031,
    "wires": [
      [
        "4b414dfe.eb5e24"
      ]
    ]
  },
  {
    "id": "4b414dfe.eb5e24",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "db req",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 471.5000305175781,
    "y": 1114.8332824707031,
    "wires": [
      [
        "46d93f63.9e23c"
      ]
    ]
  },
  {
    "id": "46d93f63.9e23c",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Check response",
    "func": "if (msg.statusCode=='201' || msg.statusCode=='412')\n{\n    node.warn('Database created or already exists, turning on backup');\n    context.global.CloudantBkUP=true;\n    context.global.CloudantCamera=[];\n    msg.url=context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/winkPresence\"\n    msg.method=\"GET\"\n    node.send(msg)\n} else {\n    node.warn('issue with cloudant sercvice. backup disabled until next re-try');\n    context.global.CloudantBkUP=false;\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 646.5000305175781,
    "y": 1114.8332824707031,
    "wires": [
      [
        "f14d8fee.81961"
      ]
    ]
  },
  {
    "id": "f14d8fee.81961",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 823.3958129882812,
    "y": 1115.72216796875,
    "wires": [
      [
        "5678d882.951cf8"
      ]
    ]
  },
  {
    "id": "5678d882.951cf8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "restore from db",
    "func": "if (\"Presence\" in msg.payload){\n    node.warn('restoring presence from db backup')\n    context.global.Presence=msg.payload.Presence.Presence\n    context.global.PresenceHistory=msg.payload.Presence.PresenceHistory\n    for(var pr in context.global.Presence){\n        p=context.global.Presence[pr];\n        var PresenceSensorMsg={\n            url:context.global.BlueMixUrlBase+'/red/wink/subscribtions',\n            method:\"POST\",\n                headers: {\n                \"Content-Type\":\"application/json\"\n            },\n            payload:{\n              capabilities: { fields: [ { field: 'presence', type: 'boolean' } ] },\n              device_manufacturer: 'node_red_virtual_sensor',\n              hidden_at: null,\n              last_event: \n               { brightness_occurred_at: null,\n                 loudness_occurred_at: null,\n                 vibration_occurred_at: null },\n              last_reading: \n               { \n                   agent_session_id: 'FALSE',\n                   connection: true,\n                   presence:(p.home=='yes' ? true : false),\n               },\n              manufacturer_device_model: 'foscam_virtual_motion_sensor',\n              model_name: 'Presense Sensor',\n              \"eco_system\" : \"NODERED\",\n              name: pr,\n              object_id: 'Presense_'+pr,\n              object_type: 'sensor_pod',\n              radio_type: 'wifi',\n              sensor_pod_id: 'Presense_'+pr,\n              triggers: [],\n              units: {},\n              upc_code: 'presence_sensor',\n              upc_id: 'Presense_'+pr\n          }\n        }\n    node.send(PresenceSensorMsg);\n    }\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 999.3958129882812,
    "y": 1113.72216796875,
    "wires": [
      [
        "8ce6d048.a3af7"
      ]
    ]
  },
  {
    "id": "1b61ab65.36d615",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Cloundant DB -------------------------------------------------------------------------------------------------------------------------------",
    "info": "modfy bluemix-settings.json and add following line:\n\ncontext.global.InitialStateKey=\"<your initial state api key>\"",
    "x": 404.5,
    "y": 908.8333129882812,
    "wires": []
  },
  {
    "id": "2870cd89.711f92",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Save Snapshots to db",
    "func": "if ((msg.req.body.uid==context.global.WinkUser.uid && msg.req.body.pwd==context.global.WinkUser.pwd)||context.global.getCookie('exchange_token',msg.req.headers.cookie)==context.global.FREEBOARD_TOKEN || msg.payload.token==context.global.FREEBOARD_TOKEN || (msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN)){\nvar msg1=msg;\nvar trigger=msg.payload.object_name;\nvar cam_list=msg.payload.cam_list.split(',');\nmsg1.res.statusCode=\"200\";\nnode.send([msg1,null]);\nvar date=new Date();\nvar delay=0;\nfor (var i=0;i<cam_list.length;i++){\n//for (var cam in context.global.winkState.cameras){\n var camera=context.global.winkState.cameras[cam_list[i]];\n var cam=cam_list[i];\nif ('snap_url' in camera && camera.snap_url!=='undefined'){\n    //var msg={}\n    msg.url=camera.snap_url;\n    msg.method=\"GET\";\n    msg.date=date;\n    msg.topic=cam;\n    msg.trigger=trigger;\n    context.global.sendWithTimeout(node,[null,msg],delay);\n    delay+=500;\n}\n\n}\n\n} else {\n    msg.statusCode=\"401\";\n    node.send(msg);\n//    msg.res.send(401,\"Bad request\");\n}\nreturn;",
    "outputs": "2",
    "noerr": 0,
    "x": 404.10418701171875,
    "y": 1214.833251953125,
    "wires": [
      [
        "ea2e6dff.9028e"
      ],
      [
        "e06df095.5f03c"
      ]
    ]
  },
  {
    "id": "e06df095.5f03c",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "getPic",
    "method": "use",
    "ret": "bin",
    "url": "",
    "x": 607.1041870117188,
    "y": 1220.8332824707031,
    "wires": [
      [
        "f3c20685.e6c5a8"
      ]
    ]
  },
  {
    "id": "f3c20685.e6c5a8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "save picture",
    "func": "//if (typeof (context.global.ImageArchive)=== 'undefined') {\n//    context.global.ImageArchive = {}\n//}\n//     for (var n in context.global.winkState.cameras){\n//        if (!(n in context.global.ImageArchive)) context.global.ImageArchive[n]=[]\n//    }\n\n//node.warn('Saving image from '+msg.topic)\n//node.warn(bitmap);\nvar DBmsg={\n         url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp\",\n        topic:msg.trigger,\n        method:\"POST\",\n        headers: \n            {\n                \"Content-Type\":\"application/json\"\n            },\n        payload: {\n            \"_id\":msg.topic+'|'+msg.date.getTime()+'|'+msg.trigger,\n            \"key\":\"Snapshot\",\n            \"cameraName\":msg.topic,\n            \"timestamp\":msg.date.getTime(),\n            \"trigger\":msg.trigger,\n            \"fileName\":\"CameraImage.jpg\",\n           \"_attachments\":\n                {\n                    \"CameraImage.jpg\":\n                    {\n                        \"content_type\":\"image/jpeg\",\n                        \"data\":msg.payload.toString('base64')\n                    }\n                }        \n        } \n}\n\n//context.global.ImageArchive[msg.topic].splice(0,0,camObj);\n//if (context.global.ImageArchive[msg.topic].length>10) context.global.ImageArchive[msg.topic].pop()\nreturn DBmsg;",
    "outputs": "1",
    "noerr": 0,
    "x": 798.1041259765625,
    "y": 1220.8332824707031,
    "wires": [
      [
        "81be8565.808dd8"
      ]
    ]
  },
  {
    "id": "81be8565.808dd8",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 960,
    "y": 1221.72216796875,
    "wires": [
      [
        "b9df718.7acc19"
      ]
    ]
  },
  {
    "id": "6b32804f.533a8",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/save_images",
    "method": "get",
    "swaggerDoc": "",
    "x": 131.6042022705078,
    "y": 1214.72216796875,
    "wires": [
      [
        "2870cd89.711f92"
      ]
    ]
  },
  {
    "id": "ea2e6dff.9028e",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 610.9999694824219,
    "y": 1177.72216796875,
    "wires": []
  },
  {
    "id": "b9df718.7acc19",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "cache results",
    "func": "if ('ok' in msg.payload && msg.payload.ok){\n    var cameraname=msg.payload.id.split('|')[0];\n    var tstamp=msg.payload.id.split('|')[1];\n    //node.warn('Camera - ' + cameraname)\n    if (typeof(context.global.winkState.cameras[cameraname].activities)==='undefined') context.global.winkState.cameras[cameraname].activities=[]\n    var cam_act={\n        id:msg.payload.rev,\n        cloudant_id:msg.payload.id,\n        category:\"cuepoint\",\n        cuepoint_id:Math.round(tstamp/1000),\n        trigger:msg.topic,\n        snapshot_url:context.global.BlueMixUrlBase+\"/red/camera_history?img_id=\"+msg.payload.id\n    }\n   context.global.winkState.cameras[cameraname].activities.splice(0,0,cam_act);\n   if (context.global.winkState.cameras[cameraname].activities.length>15){\n    for (var i=15; i<context.global.winkState.cameras[cameraname].activities.length;i++){\n    var doc_id=context.global.winkState.cameras[cameraname].activities[i].cloudant_id\n    var rev=context.global.winkState.cameras[cameraname].activities[i].id\n    if(typeof(doc_id)!=='undefined'){\n    var DBmsg={\n         topic:cameraname,\n         position:i,\n         url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/\"+doc_id+\"?rev=\"+rev,\n        method:\"DELETE\"\n    }\n    node.send(DBmsg);\n    }\n   }\n   }\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1140,
    "y": 1217.72216796875,
    "wires": [
      [
        "751d868.a393178"
      ]
    ]
  },
  {
    "id": "751d868.a393178",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1316.0001220703125,
    "y": 1218.72216796875,
    "wires": [
      [
        "c9231a9a.c93668"
      ]
    ]
  },
  {
    "id": "c9231a9a.c93668",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "delete old pics",
    "func": "if (('ok' in msg.payload && msg.payload.ok) ||('error' in msg.payload && msg.payload.error=='not_found') ){\n    //node.warn('deleting '+msg.topic+' position '+ msg.position)\n    context.global.winkState.cameras[msg.topic].activities.splice(msg.position,1)\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1481.0001220703125,
    "y": 1217.72216796875,
    "wires": [
      []
    ]
  },
  {
    "id": "7d5d077c.b07748",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/camera_history",
    "method": "get",
    "swaggerDoc": "",
    "x": 170.00003051757812,
    "y": 1272.72216796875,
    "wires": [
      [
        "9673f03e.0fe9d"
      ]
    ]
  },
  {
    "id": "9673f03e.0fe9d",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "gen CLD url",
    "func": "if ('img_id' in msg.payload){\n    msg.url=context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/\"+msg.payload.img_id+\"/CameraImage.jpg\"\n    msg.method=\"GET\"\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 382,
    "y": 1272.72216796875,
    "wires": [
      [
        "8cee64f1.495a58"
      ]
    ]
  },
  {
    "id": "8cee64f1.495a58",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "bin",
    "url": "",
    "x": 543,
    "y": 1274.72216796875,
    "wires": [
      [
        "efa777cd.6426a8"
      ]
    ]
  },
  {
    "id": "efa777cd.6426a8",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 711,
    "y": 1274.72216796875,
    "wires": []
  },
  {
    "id": "88e57db2.4afd",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/retrieve_activities",
    "method": "get",
    "swaggerDoc": "",
    "x": 159.6042022705078,
    "y": 1365.72216796875,
    "wires": [
      [
        "e2daff5d.d91f9"
      ]
    ]
  },
  {
    "id": "e2daff5d.d91f9",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "get activities from db",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nvar msg1=msg;\nmsg1.statusCode=\"200\";\nmsg.url=context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/_all_docs?descending=true\"\nmsg.method=\"GET\"\nmsg.topic=msg.payload.camera_name\nnode.send([msg1,msg])\n} else\n{\n    msg.statusCode=400\n    node.send([msg,null])\n}\nreturn;",
    "outputs": "2",
    "noerr": 0,
    "x": 399.99993896484375,
    "y": 1365.72216796875,
    "wires": [
      [
        "cbc22c33.baf8"
      ],
      [
        "42096bc9.88b2a4"
      ]
    ]
  },
  {
    "id": "42096bc9.88b2a4",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 625,
    "y": 1398.72216796875,
    "wires": [
      [
        "f66452e9.5fce1"
      ]
    ]
  },
  {
    "id": "f66452e9.5fce1",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "cache cam history",
    "func": "if('total_rows' in msg.payload && msg.payload.total_rows>0){\n var db_rows=msg.payload.rows;\n context.global.winkState.cameras[msg.topic].activities=[]\n //db_rows.foreach(function(row){\n for(var i=0;i<db_rows.length;i++){\n     var row=db_rows[i];\n     if(row.id.indexOf(msg.topic)!=-1){\n      var tstamp=row.id.split('|')[1]\n      var cam_act={\n        id:row.value.rev,\n        cloudant_id:row.id,\n        category:\"cuepoint\",\n        cuepoint_id:Math.round(tstamp/1000),\n        trigger:row.id.split('|')[2],\n        snapshot_url:context.global.BlueMixUrlBase+\"/red/camera_history?img_id=\"+row.id\n      } \n      context.global.winkState.cameras[msg.topic].activities.push(cam_act)         \n     }\n }\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 803.0000152587891,
    "y": 1398.7221374511719,
    "wires": [
      []
    ]
  },
  {
    "id": "cbc22c33.baf8",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 621.9999694824219,
    "y": 1350.72216796875,
    "wires": []
  },
  {
    "id": "cdb08831.b88858",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 134,
    "y": 865.7499389648438,
    "wires": [
      [
        "1c41686b.5bfd08"
      ]
    ]
  },
  {
    "id": "7e943f2b.f87b4",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 427.25,
    "y": 868.5,
    "wires": []
  },
  {
    "id": "3940af0d.54eb3",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Integration with LIFX Bulbs ---------------------------------------------------------------------------------------",
    "info": "",
    "x": 361,
    "y": 1509.5,
    "wires": []
  },
  {
    "id": "9101c8d.6d6da38",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Throw Config Data",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\n// text fields array\n/*\ntxt_fields=[]\ntxt_fields.push({forecastIoApiKey : context.global.forecastIoApiKey || \"\" });\ntxt_fields.push({FREEBOARD_TOKEN : context.global.FREEBOARD_TOKEN || \"\" });\ntxt_fields.push({IFTTT_TOKEN : context.global.IFTTT_TOKEN || \"\" });\ntxt_fields.push({LIFX_TOKEN : context.global.LIFX_TOKEN || \"\" });\ntxt_fields.push({motionAdjustTstat : context.global.motionAdjustTstat || false });\ntxt_fields.push({InitialStateKey : context.global.InitialStateKey ||\"\"});\nmsg.payload.txt_fields=txt_fields;\ntxt_area_fields=[]\n\ntxt_area_fields.push({FosCam : JSON.stringify(context.global.foscam || \"\")});\ntxt_area_fields.push({SamsungCam : JSON.stringify(context.global.SamsungCam || \"\")});\ntxt_area_fields.push({DlinkCam : JSON.stringify(context.global.DlinkCam || \"\")});\ntxt_area_fields.push({camera_motion : JSON.stringify(context.global.camera_motion || \"\")});\ntxt_area_fields.push({tab_ui_shortcuts : JSON.stringify(context.global.tab_ui_shortcuts || \"\")});\nmsg.payload.txt_area_fields=txt_area_fields\n*/\nmsg.payload=context.global\nmsg.statusCode=\"200\";\nreturn msg;\n}\nelse\n{\n    //msg.payload=\"Not Authorized\";\n   msg.statusCode=\"403\";\n   return msg;\n//   msg.res.send(\"403\",\"Forbidden\");\n//  return;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 406.4999694824219,
    "y": 62.5,
    "wires": [
      [
        "86ea2aa2.9569e8"
      ]
    ]
  },
  {
    "id": "86ea2aa2.9569e8",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 631.5,
    "y": 63.5,
    "wires": []
  },
  {
    "id": "ddd7ad41.dc547",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Section for web services---------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 467,
    "y": 20,
    "wires": []
  },
  {
    "id": "2aa01ee1.a5fb22",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/getCameras",
    "method": "get",
    "swaggerDoc": "",
    "x": 130,
    "y": 112.5,
    "wires": [
      [
        "c5ce98f1.35efc8"
      ]
    ]
  },
  {
    "id": "c5ce98f1.35efc8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Throw Cameras Data",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\n// text fields array\ncameras=[]\nfor (var cam in context.global.winkState.cameras){\n    var camera=context.global.winkState.cameras[cam];\n    cameras.push({\n        name:camera.name,\n        id:camera.object_id,\n        connection:camera.connection,\n        url:camera.snap_url\n    });\n}\nmsg.payload.cameras=cameras;\nmsg.statusCode=\"200\";\nreturn msg;\n}\nelse\n{\n    //msg.payload=\"Not Authorized\";\n    msg.statusCode=\"403\";\n    return msg;\n//   msg.res.send(\"403\",\"Forbidden\");\n//  return;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 407.4999694824219,
    "y": 115.5,
    "wires": [
      [
        "859efbcf.1cd2b8"
      ]
    ]
  },
  {
    "id": "859efbcf.1cd2b8",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 632.5,
    "y": 116.5,
    "wires": []
  },
  {
    "id": "804fd877.097b48",
    "type": "catch",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 128.5,
    "y": 2088,
    "wires": [
      [
        "b23b2283.e958"
      ]
    ]
  },
  {
    "id": "b23b2283.e958",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "error",
    "x": 328.5,
    "y": 2088,
    "wires": []
  },
  {
    "id": "8df82acf.373ab8",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "5",
    "crontab": "",
    "once": true,
    "x": 129.5,
    "y": 1552,
    "wires": [
      [
        "377fa9ac.e7da36"
      ]
    ]
  },
  {
    "id": "377fa9ac.e7da36",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if ('LIFX_TOKEN' in context.global && context.global.LIFX_TOKEN !== 'undefined'){\nvar newMsg1 ={\n    \"url\":\"https://api.lifx.com/v1/lights/all\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.LIFX_TOKEN\n    }\n}\nnode.send(newMsg1);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 297.5,
    "y": 1552,
    "wires": [
      [
        "3aabad1b.1d0442"
      ]
    ]
  },
  {
    "id": "3aabad1b.1d0442",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 472.5,
    "y": 1551,
    "wires": [
      [
        "3436b6ce.d4dfda"
      ]
    ]
  },
  {
    "id": "7bef94f7.6f895c",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var lifxLights=msg.payload;\nvar useLiveUpd=('CRYPTO' in context.global ? true:false);\nvar CurreTag=\"\";\nvar eTag;\nif (Object.prototype.toString.call(lifxLights)==='[object Array]'){\n    lifxLights.forEach(function (bulb) {\n      //  node.warn(bulb.label)\n     //if (!(' winkState' in context.global)) context.global.winkState={}\n//     if (!('light_bulbs' in context.global.winkState)) context.global.winkState.light_bulbs={}\nbulb.capabilities={\n    fields:[\n            {\n                field:'powered',\n                type:'boolean'\n            }\n        ]\n}\n     if ('light_bulbs' in context.global.winkState && bulb.label in context.global.winkState.light_bulbs && useLiveUpd) {\n          var WinkBulb={\n            \"connection\": context.global.winkState.light_bulbs[bulb.label].connection,\n            \"powered\": context.global.winkState.light_bulbs[bulb.label].powered,\n            \"brightness\": context.global.winkState.light_bulbs[bulb.label].brightness,\n            \"hue\" : context.global.winkState.light_bulbs[bulb.label].hue,\n            \"saturation\":context.global.winkState.light_bulbs[bulb.label].saturation,\n            \"temperature\":context.global.winkState.light_bulbs[bulb.label].temperature\n          }\n          CurreTag=context.global.CRYPTO.createHash(\"md5\").update(JSON.stringify(WinkBulb),\"utf8\").digest(\"hex\");\n     }\n     \n     var OrigObject={\n        \"connection\": bulb.connected,\n        \"powered\": (bulb.connected && bulb.power==\"on\" ? true : false),\n        \"brightness\": bulb.brightness,\n        \"hue\" : bulb.color.hue,\n        \"saturation\":bulb.color.saturation,\n        \"temperature\":bulb.color.kelvin\n     };\n     if (useLiveUpd){\n     var LifBulb={\n        \"name\": bulb.label,\n        \"eco_system\": \"LIFX\",\n        \"manufacturer_id\": \"lifx\",\n        \"device_manufacturer\":\"lifx\",\n        \"object_type\": \"light_bulb\",\n        \"object_id\": bulb.id,\n        \"freeboard\": 0,\n        desired_state:{},\n        last_reading:{\n        \"connection\": bulb.connected,\n        \"powered\": (bulb.connected && bulb.power==\"on\" ? true : false),\n        \"brightness\": bulb.brightness,\n        \"hue\" : bulb.color.hue,\n        \"saturation\":bulb.color.saturation,\n        \"temperature\":bulb.color.kelvin\n        }\n     };\n      eTag=context.global.CRYPTO.createHash(\"md5\").update(JSON.stringify(OrigObject),\"utf8\").digest(\"hex\");\n     } else {\n      if ('light_bulbs' in context.global.winkState){\n        context.global.winkState.light_bulbs[bulb.label]=OrigObject;\n      }\n     }\n     //LifBulb\n     \n     if (!('winkDevCap' in context.global)) context.global.winkDevCap={};\n     context.global.winkDevCap[bulb.label]=bulb.capabilities\n     //node.warn(bulb.label)\n      if (!('groups' in context.global.winkState)) context.global.winkState.groups={}\n     if (!(bulb.group.name in context.global.winkState.groups)){\n     context.global.winkState.groups[bulb.group.name]={\n         \"name\":bulb.group.name,\n         \"obejct_type\":\"groups\",\n         \"object_id\":bulb.group.id,\n          \"freeboard\": 0,\n          members:{}\n        }\n    }\n      context.global.winkState.groups[bulb.group.name].members[bulb.label]={\n        \"name\": bulb.label,\n        \"object_id\": bulb.id,\n        \"object_type\": \"light_bulbs\"\n      }\n     if (useLiveUpd && CurreTag!==eTag){\n        var postMsg={\n            url:context.global.BlueMixUrlBase+'/red/wink/subscribtions',\n            method:\"POST\",\n                headers: {\n                \"Content-Type\":\"application/json\"\n            },\n            payload:LifBulb \n        }\n     node.send(postMsg);\n     }\n    });\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 918.2143020629883,
    "y": 1550.1428833007812,
    "wires": [
      [
        "792df3a3.f23b2c"
      ]
    ]
  },
  {
    "id": "792df3a3.f23b2c",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1077.9286346435547,
    "y": 1549.5714020729065,
    "wires": [
      [
        "5cfb9ea3.e9d86"
      ]
    ]
  },
  {
    "id": "b31e56a6.e753b8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "function send_ui_note(n_type,n_timeout,n_message){\n    var newMsg={\n        url:context.global.BlueMixUrlBase+'/red/notifications',\n        \"method\": \"POST\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        },\n        payload:{\n            \"type\":n_type,\n            \"message\":n_message,\n            \"timeout\":n_timeout\n            }\n        };\n        node.send(newMsg);\n}\nvar note_msg=msg.payload.name+(msg.payload.home=='yes' ? ' is home' : ' has left');\nsend_ui_note('information',30000,note_msg)\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 576.5,
    "y": 789,
    "wires": [
      [
        "5eaa1764.a26c28"
      ]
    ]
  },
  {
    "id": "5eaa1764.a26c28",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 716.5,
    "y": 788,
    "wires": [
      []
    ]
  },
  {
    "id": "503d2f41.06865",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "82800",
    "crontab": "",
    "once": true,
    "x": 95.5,
    "y": 956,
    "wires": [
      [
        "2202b.a24d9fd56"
      ]
    ]
  },
  {
    "id": "2202b.a24d9fd56",
    "type": "delay",
    "z": "17b3daf5.e84c25",
    "name": "",
    "pauseType": "delay",
    "timeout": "1",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 243.5,
    "y": 955,
    "wires": [
      [
        "6f837a8d.a497c4"
      ]
    ]
  },
  {
    "id": "6f837a8d.a497c4",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "try to refresh app_config data",
    "func": "if (context.global.CloudantBkUP) {\n    msg.url=context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp/app_data\";\n    msg.method=\"GET\";\n    node.send(msg); \n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 653.5,
    "y": 949,
    "wires": [
      [
        "8b911a13.fe4708",
        "c96631c.9ac14d"
      ]
    ]
  },
  {
    "id": "8b911a13.fe4708",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 880.5,
    "y": 953,
    "wires": [
      [
        "319f0dae.d19162"
      ]
    ]
  },
  {
    "id": "319f0dae.d19162",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "create or update config ",
    "func": "if ((\"error\" in msg.payload && msg.payload.error=='not_found') || msg.db_mode=='update'){\n    if (context.global.DEBUG ) node.warn((\"error\" in msg.payload && msg.payload.error=='not_found' ? 'Save Data: no app_data exists in cloudant DB creating and saving globals to database' : ' Save Data: updating globals in database'))\n    var DBMsg={\n        url:context.global.VCAP_SERVICES.cloudantNoSQLDB[0].credentials.url+\"/winkapp\",\n        method:(msg.db_mode=='update' ? \"PUT\":\"POST\"),\n        headers: \n            {\n                \"Content-Type\":\"application/json\"\n            },\n        payload: {\n            \"_id\":\"app_data\",\n            \"item\":\"app_data\",\n            \"app_cfg\":{\n            FREEBOARD_TOKEN:context.global.FREEBOARD_TOKEN || context.global.generate_token('FREEBOARD_TOKEN'),\n            vaca_delay:context.global.vaca_delay || 15, \n            ifttt:context.global.ifttt || false,\n            useRobots:context.global.useRobots || false,\n            vaca_wnr_schedules_off: context.global.vaca_wnr_schedules_off|| false,\n            vaca_usePresence: context.global.vaca_usePresence || false,\n            vaca_light_bulbs : context.global.vaca_light_bulbs || [],\n            vaca_binary_switches : context.global.vaca_binary_switches || [],\n            vaca_locks_vac:context.global.vaca_locks_vac || false,\n            motionAdjustTstat: context.global.motionAdjustTstat||false,\n            BlueMixUrlBase:context.global.BlueMixUrlBase,\n            HomeLocation:context.global.HomeLocation,\n            HoursFormat24:context.global.HoursFormat24 || false,\n            LightsNotification:context.global.LightsNotification || false,\n            LightsNotificationM:context.global.LightsNotificationM || false,\n            SensorsNotificationM:context.global.SensorsNotificationM || false,    \n            Schedules:context.global.Schedules || false,\n            VacationMode:context.global.VacationMode || false,            \n            CustomTabUrl:context.global.CustomTabUrl || '',\n            CustomTabName:context.global.CustomTabName|| '',\n            BlueIrisHost:context.global.BlueIrisHost,\n            BlueIrisUid:context.global.BlueIrisUid,\n            BlueIrisPwd:context.global.BlueIrisPwd,\n            SmartThingsSecret:context.global.SmartThingsSecret,\n            SmartThingsApiToken: context.global.SmartThingsApiToken,\n            SmartThingsApiEndPoint: context.global.SmartThingsApiEndPoint,\n            wink_id:context.global.wink_id,\n            wink_secret:context.global.wink_secret,\n            BloomskyKey:context.global.BloomskyKey || '',\n            OwnTracksPwd:context.global.OwnTracksPwd,\n            OwnTracksGeoRadius:context.global.OwnTracksGeoRadius||50,\n            OwnTracksMaxAcc:context.global.OwnTracksMaxAcc || 100,\n            OwnTracksIgnorePing:context.global.OwnTracksIgnorePing | false,\n            PresenceShortcuts:context.global.PresenceShortcuts || false,\n            PushBulletChannel:context.global.PushBulletChannel || '',\n            \n            holiday_light_mode:context.global.holiday_light_mode || '',\n            holiday_keep_color:context.global.holiday_keep_color || 30,\n            holiday_light_bulbs:context.global.holiday_light_bulbs || [],\n            holiday_mode_group: context.global.holiday_mode_group || false,\n\n            holiday_light_mode2:context.global.holiday_light_mode2 || '',\n            holiday_keep_color2:context.global.holiday_keep_color2 || 30,\n            holiday_light_bulbs2:context.global.holiday_light_bulbs2 || [],\n            holiday_mode_group2: context.global.holiday_mode_group2 || false,\n            \n            holiday_light_mode3:context.global.holiday_light_mode3 || '',\n            holiday_keep_color3:context.global.holiday_keep_color3 || 30,\n            holiday_light_bulbs3:context.global.holiday_light_bulbs3 || [],\n            holiday_mode_group3: context.global.holiday_mode_group3 || false,            \n            \n            holiday_mode_on:context.global.holiday_mode_on || false            \n            }\n        }\n    };\n    if(msg.db_mode=='update' && !(\"error\" in msg.payload && msg.payload.error=='not_found')){\n    DBMsg.url=DBMsg.url+\"/app_data\";    \n    DBMsg.payload._rev=msg.payload._rev;\n    }\n    \n    if ('HomeLocation' in context.global) DBMsg.payload.app_cfg.HomeLocation=context.global.HomeLocation;\n//\tif ('FosCam' in context.global) DBMsg.payload.app_cfg.FosCam=context.global.FosCam;\n//\tif ('SamsungCam' in context.global) DBMsg.payload.app_cfg.SamsungCam=context.global.SamsungCam;\n//\tif ('DlinkCam' in context.global) DBMsg.payload.app_cfg.DlinkCam=context.global.DlinkCam;\n    if ('camera_motion' in context.global) DBMsg.payload.app_cfg.camera_motion=context.global.camera_motion;\n    if ('tab_ui_shortcuts' in context.global) DBMsg.payload.app_cfg.tab_ui_shortcuts=context.global.tab_ui_shortcuts;\n//    if ('netatmo' in context.global) DBMsg.payload.app_cfg.netatmo=context.global.netatmo;\n    if ('winkState' in context.global) DBMsg.payload.app_cfg.winkState=context.global.winkState;\n    if ('LIFX_TOKEN' in context.global) DBMsg.payload.app_cfg.LIFX_TOKEN=context.global.LIFX_TOKEN;\n    if ('IFTTT_TOKEN' in context.global)DBMsg.payload.app_cfg.IFTTT_TOKEN=context.global.IFTTT_TOKEN;\n    if ('forecastIoApiKey' in context.global)DBMsg.payload.app_cfg.forecastIoApiKey=context.global.forecastIoApiKey;\n    if ('InitialStateKey' in context.global)DBMsg.payload.app_cfg.InitialStateKey=context.global.InitialStateKey;\n    if ('PushBulletKey' in context.global)DBMsg.payload.app_cfg.PushBulletKey=context.global.PushBulletKey;\nnode.send(DBMsg);    \n}\nelse {\n        if (context.global.DEBUG ) node.warn('config data exists, restoring');\n    for (var key in msg.payload.app_cfg){\n            if (context.global.DEBUG ) node.warn('Restoring '+key+' settings')\n        if (key!=='winkState' && key!=='DlinkCam' && key!=='FosCam' && key!=='SamsungCam'){\n            context.global[key]=msg.payload.app_cfg[key];\n        } else if(key=='winkState' &&'restore_wink' in msg && msg.restore_wink) {\n            context.global[key]=msg.payload.app_cfg[key];\n        }\n    }\n}    \nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1095.5,
    "y": 952,
    "wires": [
      [
        "aa5019f5.a1e648"
      ]
    ]
  },
  {
    "id": "aa5019f5.a1e648",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1345.5,
    "y": 951,
    "wires": [
      [
        "b9fef18.d877e1"
      ]
    ]
  },
  {
    "id": "904e6659.7a5668",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/update_app_cfg",
    "method": "post",
    "swaggerDoc": "",
    "x": 132,
    "y": 1063,
    "wires": [
      [
        "84709d6c.dd7c1"
      ]
    ]
  },
  {
    "id": "84709d6c.dd7c1",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nmsg.statusCode=\"200\";\nvar msg1={}\nmsg1.db_mode=msg.payload.db_mode||\"read\";\nif ('restore_wink' in msg) msg1.restore_wink=msg.restore_wink;\nnode.send([msg1,msg])\n} else\n{\n    msg.statusCode=\"400\";\n    node.send([null,msg])\n}\nreturn;",
    "outputs": "2",
    "noerr": 0,
    "x": 404.5,
    "y": 1064,
    "wires": [
      [
        "6f837a8d.a497c4"
      ],
      [
        "e915621d.1c7a"
      ]
    ]
  },
  {
    "id": "e915621d.1c7a",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 540.5,
    "y": 1070,
    "wires": []
  },
  {
    "id": "b9fef18.d877e1",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var msg1={\n    payload:{\n        config:{\n        HoursFormat24:context.global.HoursFormat24\n        }\n    }\n}\nmsg1.method=\"POST\";\nmsg1.url=context.global.BlueMixUrlBase+'/red/wscomms';\nmsg1.headers= {\n    \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n};\n\nreturn msg1;",
    "outputs": 1,
    "noerr": 0,
    "x": 1078.5,
    "y": 1046,
    "wires": [
      [
        "99daab77.6c5fd8"
      ]
    ]
  },
  {
    "id": "ab3882ed.099c1",
    "type": "json",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 430,
    "y": 210,
    "wires": [
      [
        "63a478ba.152528"
      ]
    ]
  },
  {
    "id": "88b76a7.0c81298",
    "type": "switch",
    "z": "17b3daf5.e84c25",
    "name": "",
    "property": "req.headers.content-type",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "text/plain",
        "vt": "str"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "outputs": 2,
    "x": 285,
    "y": 236,
    "wires": [
      [
        "ab3882ed.099c1"
      ],
      [
        "63a478ba.152528"
      ]
    ]
  },
  {
    "id": "99daab77.6c5fd8",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1266,
    "y": 1046,
    "wires": [
      []
    ]
  },
  {
    "id": "9dde2e1a.a7725",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var msg1=context.global.render_home_components('Presence');\nmsg1.method=\"POST\";\nmsg1.url=context.global.BlueMixUrlBase+'/red/wscomms';\nmsg1.headers= {\n    \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n};\nreturn msg1;",
    "outputs": 1,
    "noerr": 0,
    "x": 581,
    "y": 741,
    "wires": [
      [
        "dade7f2.96ede8"
      ]
    ]
  },
  {
    "id": "dade7f2.96ede8",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 722.5,
    "y": 742,
    "wires": [
      []
    ]
  },
  {
    "id": "2975e91.240e416",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/global_context",
    "method": "get",
    "swaggerDoc": "",
    "x": 140,
    "y": 63,
    "wires": [
      [
        "9101c8d.6d6da38"
      ]
    ]
  },
  {
    "id": "da69be05.6a66",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/ifttt/effects/*",
    "method": "post",
    "swaggerDoc": "",
    "x": 124,
    "y": 296,
    "wires": [
      [
        "7b01b94b.41fce8"
      ]
    ]
  },
  {
    "id": "9ff0bd6a.aac6c",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 751,
    "y": 283,
    "wires": []
  },
  {
    "id": "4207f305.6f74cc",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var effectMsg={};\nvar web_req=(context.global.getCookie('exchange_token',msg.req.headers.cookie)=='0' ? false:true);\nif (msg.payload.iftttkey==context.global.IFTTT_TOKEN || msg.payload.iftttkey==context.global.FREEBOARD_TOKEN || (msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN)) web_req=true;\nif (web_req)\n{\nvar effect=msg.req.originalUrl.split('/').pop();\nnode.warn(effect);\nmsg.statusCode=200;\neffectMsg.payload=msg.payload;\neffectMsg.topic=effect;\nreturn [msg,effectMsg];\n}\nelse {\n    node.warn(\"ifttt messages bad request\")\n     msg.statusCode=403;\n     return [msg,null];\n}\n",
    "outputs": "2",
    "noerr": 0,
    "x": 570,
    "y": 320,
    "wires": [
      [
        "9ff0bd6a.aac6c"
      ],
      [
        "ca9bd553.423c58"
      ]
    ]
  },
  {
    "id": "7b01b94b.41fce8",
    "type": "switch",
    "z": "17b3daf5.e84c25",
    "name": "",
    "property": "req.headers.content-type",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "text/plain",
        "vt": "str"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "outputs": 2,
    "x": 314,
    "y": 302,
    "wires": [
      [
        "ef79c0ae.66458"
      ],
      [
        "4207f305.6f74cc"
      ]
    ]
  },
  {
    "id": "ef79c0ae.66458",
    "type": "json",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 442,
    "y": 273,
    "wires": [
      [
        "4207f305.6f74cc"
      ]
    ]
  },
  {
    "id": "ca9bd553.423c58",
    "type": "switch",
    "z": "17b3daf5.e84c25",
    "name": "",
    "property": "topic",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "fadein",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "fadeout",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "pulse",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "outputs": 3,
    "x": 732,
    "y": 334,
    "wires": [
      [
        "e5781a2b.7ac358"
      ],
      [
        "beb49ccc.5c5d8"
      ],
      [
        "a1e45c72.0f27e"
      ]
    ]
  },
  {
    "id": "e5781a2b.7ac358",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "fadein",
    "func": "var max=parseInt(msg.payload.max) || 0; //0-100\nvar min=parseInt(msg.payload.min) || 0;  //0-100\nvar period=parseInt(msg.payload.period) ||0; //in secondsdd\nvar delay=parseInt(msg.payload.step_time) || (period >120 ? 20:10); //in seconds\nvar timeout_adjust=0;\ngen_msg=function(winkName,type,level,tstmp){\n    var WinkCMDmsg = context.global.executeWinkCMD(winkName,type,(level > 0 ? 'on' : 'off'),level);\n    node.send(WinkCMDmsg);\n    delete context.global.timedOutCmd[tstmp];\n};\nfunction doWithTimeout(i,delay){\n    var ind=Date.now();\n    if (!('timedOutCmd' in context.global)) context.global.timedOutCmd={};\n    var timeoutId=setTimeout(function(){gen_msg(msg.payload.winkName,msg.payload.type,i,ind);},delay);\n    if (context.global.DEBUG) node.warn(timeoutId);\n    context.global.timedOutCmd[ind]={\n        \"object\":msg.payload.winkName,\n        \"type\":msg.payload.type,\n        \"timeOutId\":timeoutId\n    };\n}\nif (max>min && ((msg.payload.type=='light' && msg.payload.winkName in context.global.winkState.light_bulbs) || msg.payload.type=='group')){\n    var step=Math.round((max-min)/period*delay)-1;\n    if (step<1) step=1;\n    var i=1;\n    var curr_br=min;\n    var effect_delay=Math.round(period/((max-min)/step)*1000);\n    if (context.global.DEBUG) node.warn('step:'+step+' effect_delay:'+effect_delay);\n    if (curr_br>0)  doWithTimeout(curr_br,0);\n    do {\n    \ttimeout_adjust++;\n    \tcurr_br=min+i;\n        doWithTimeout(curr_br,timeout_adjust*effect_delay);\n        i+=step;\n    } while(min+i<max);\n    timeout_adjust++;\n    if (curr_br<max) doWithTimeout(max,timeout_adjust*effect_delay);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 888,
    "y": 296,
    "wires": [
      [
        "3d1e6bb.c522294"
      ]
    ]
  },
  {
    "id": "beb49ccc.5c5d8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "fadeout",
    "func": "var max=parseInt(msg.payload.max) || 0 //0-100\nvar min=parseInt(msg.payload.min) || 0  //0-100\nvar period=parseInt(msg.payload.period) ||0 //in secondsdd\nvar delay=parseInt(msg.payload.step_time) || (period >120 ? 20:10); //in seconds\nvar timeout_adjust=0;\nnode.warn(msg.payload);\ngen_msg=function(winkName,type,level,tstmp){\n    var WinkCMDmsg = context.global.executeWinkCMD(winkName,type,(level > 0 ? 'on' : 'off'),level);\n    node.send(WinkCMDmsg);\n    delete context.global.timedOutCmd[tstmp];\n};\nfunction doWithTimeout(i,delay){\n    var ind=Date.now();\n    if (!('timedOutCmd' in context.global)) context.global.timedOutCmd={};\n    var timeoutId=setTimeout(function(){gen_msg(msg.payload.winkName,msg.payload.type,i,ind);},delay);\n    if (context.global.DEBUG) node.warn(timeoutId);\n    context.global.timedOutCmd[ind]={\n        \"object\":msg.payload.winkName,\n        \"type\":msg.payload.type,\n        \"timeOutId\":timeoutId\n    };\n}\nif (max>min && ((msg.payload.type=='light' && msg.payload.winkName in context.global.winkState.light_bulbs) || msg.payload.type=='group')){\n    var step=Math.round((max-min)/period*delay)-1;\n    if (step<1) step=1;\n    var i=0;\n    var curr_br=max;\n    var effect_delay=Math.round(period/((max-min)/step)*1000);\n    if (context.global.DEBUG) node.warn('step:'+step+' effect_delay:'+effect_delay);\n    if (curr_br>0)  doWithTimeout(curr_br,0);    \n    do {\n    \ttimeout_adjust++;\n    \tcurr_br=max-i;\n        doWithTimeout(curr_br,timeout_adjust*effect_delay);\n        i+=step;\n    } while(max-i>=min);\n    timeout_adjust++;\n    if (curr_br>min) doWithTimeout(min,timeout_adjust*effect_delay);\n}\nreturn;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 889,
    "y": 336,
    "wires": [
      [
        "3d1e6bb.c522294"
      ]
    ]
  },
  {
    "id": "a1e45c72.0f27e",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "pulse",
    "func": "var max=parseInt(msg.payload.max) || 0 //0-100\nvar min=parseInt(msg.payload.min) || 0  //0-100\nvar repeat=parseInt(msg.payload.repeat) ||0 //in secondsdd\nvar delay=parseInt(msg.payload.step_time) || 5; //in seconds\nvar timeout_adjust=0;\nif (context.global.DEBUG) node.warn(msg.payload);\ngen_msg=function(winkName,type,level,tstmp){\n    var WinkCMDmsg = context.global.executeWinkCMD(winkName,type,(level > 0 ? 'on' : 'off'),level);\n    node.send(WinkCMDmsg);\n    delete context.global.timedOutCmd[tstmp];\n};\nfunction doWithTimeout(i,delay){\n    var ind=Date.now();\n    if (!('timedOutCmd' in context.global)) context.global.timedOutCmd={};\n    var timeoutId=setTimeout(function(){gen_msg(msg.payload.winkName,msg.payload.type,i,ind);},delay);\n    if (context.global.DEBUG) node.warn(timeoutId);\n    context.global.timedOutCmd[ind]={\n        \"object\":msg.payload.winkName,\n        \"type\":msg.payload.type,\n        \"timeOutId\":timeoutId\n    };\n        node.warn(context.global.timedOutCmd);\n}\nif (msg.payload.winkName in context.global.winkState.binary_switches){\n    min=0;\n    max=100;\n}\n    var i=0;\n    var curr_br;\n    do {\n    \ttimeout_adjust++;\n    \tcurr_br=min;\n        doWithTimeout(curr_br,timeout_adjust*delay*1000);\n        timeout_adjust++;\n    \tcurr_br=max;\n        doWithTimeout(curr_br,timeout_adjust*delay*1000);\n        i++;\n    } while(i<repeat);\nreturn;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 882,
    "y": 375,
    "wires": [
      [
        "3d1e6bb.c522294"
      ]
    ]
  },
  {
    "id": "c57c0bb.14d7df8",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1266,
    "y": 329,
    "wires": [
      [
        "3a39d3dc.1f5f5c"
      ]
    ]
  },
  {
    "id": "76dc2c20.32d124",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "PresenceSensorMsg={\n    url:context.global.BlueMixUrlBase+'/red/wink/subscribtions',\n    method:\"POST\",\n        headers: {\n        \"Content-Type\":\"application/json\"\n    },\n    payload:{\n      capabilities: { fields: [ { field: 'presence', type: 'boolean' } ] },\n      device_manufacturer: 'node_red_virtual_sensor',\n      hidden_at: null,\n      last_event: \n       { brightness_occurred_at: null,\n         loudness_occurred_at: null,\n         vibration_occurred_at: null },\n      last_reading: \n       { \n           agent_session_id: 'FALSE',\n           connection: true,\n           presence:(msg.payload.home=='yes' ? true : false),\n       },\n      manufacturer_device_model: 'node_red_presence_sensor',\n      model_name: 'Presense Sensor',\n      \"eco_system\" : \"NODERED\",\n      name: msg.payload.name,\n      object_id: 'Presense_'+msg.payload.name,\n      object_type: 'sensor_pod',\n      radio_type: 'wifi',\n      sensor_pod_id: 'Presense_'+msg.payload.name,\n      triggers: [],\n      units: {},\n      upc_code: 'presence_sensor',\n      upc_id: 'Presense_'+msg.payload.name\n  }\n}\n\nreturn PresenceSensorMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 991,
    "y": 806,
    "wires": [
      [
        "364a6a48.db3206"
      ]
    ]
  },
  {
    "id": "364a6a48.db3206",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1144,
    "y": 806,
    "wires": [
      []
    ]
  },
  {
    "id": "8ce6d048.a3af7",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1038,
    "y": 1170,
    "wires": [
      []
    ]
  },
  {
    "id": "e467331f.01104",
    "type": "delay",
    "z": "17b3daf5.e84c25",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 960,
    "y": 246,
    "wires": [
      [
        "915081be.e989a",
        "d4db5bed.6a7188"
      ]
    ]
  },
  {
    "id": "3d1e6bb.c522294",
    "type": "delay",
    "z": "17b3daf5.e84c25",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 1087,
    "y": 329,
    "wires": [
      [
        "c57c0bb.14d7df8"
      ]
    ]
  },
  {
    "id": "3a39d3dc.1f5f5c",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "payload",
    "x": 1439,
    "y": 246,
    "wires": []
  },
  {
    "id": "8ca3563.fe626a8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var t=msg.topic;\nnode.send(msg);\nif ('topic' in msg){\n    var wsMsg={};\n    wsMsg.payload={\n        varName:t,\n        varVal:context.global[t]\n    }\n    wsMsg.method=\"POST\";\n    wsMsg.url=context.global.BlueMixUrlBase+'/red/wscomms';\n    wsMsg.headers= {\n        \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n    };    \n    node.send(wsMsg);\n    \n    if (t=='VacationMode' && context.global.VacationMode=='on'){\n        var Msg1={}\n        Msg1.method=\"POST\";\n        Msg1.url=context.global.BlueMixUrlBase+'/red/vacation_init';\n        Msg1.headers= {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        };\n        context.global.sendWithTimeout(node,Msg1,4000);\n    }\n    if (t=='VacationMode' && context.global.VacationMode=='off') context.global.clearAllIntervals();\n\n} \nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 786,
    "y": 248,
    "wires": [
      [
        "e467331f.01104"
      ]
    ]
  },
  {
    "id": "aab47a2e.f165a8",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "activate VacMode",
    "url": "/red/vacation_init",
    "method": "post",
    "swaggerDoc": "",
    "x": 128,
    "y": 1630,
    "wires": [
      [
        "962131ec.7312",
        "38ced73b.76b0a8"
      ]
    ]
  },
  {
    "id": "962131ec.7312",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "true",
    "x": 318,
    "y": 1609,
    "wires": []
  },
  {
    "id": "667442e6.7bf81c",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 644,
    "y": 1656,
    "wires": []
  },
  {
    "id": "ce467e03.22ea5",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if ('topic' in msg){\nvar msg1={}\nmsg1.url=context.global.BlueMixUrlBase+'/red/update_app_cfg';\nmsg1.method=\"POST\";\nmsg1.headers= {\n    \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n};\nmsg1.payload={\n   db_mode:\"update\"\n}\nreturn msg1;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 1320,
    "y": 195,
    "wires": [
      [
        "e4c2bd09.3840c"
      ]
    ]
  },
  {
    "id": "e4c2bd09.3840c",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1468,
    "y": 195,
    "wires": [
      []
    ]
  },
  {
    "id": "38ced73b.76b0a8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "checkDevCap=function(dev_fields,cap){\n    var result=false\n    dev_fields.forEach(function(dev_field){\n     if(dev_field.field==cap){\n        result=true;\n     }\n    });\n    return result;\n};\n\n\nsetLockMode=function(lock,mode){\nif (lock in context.global.winkState.locks && checkDevCap(context.global.winkDevCap[lock].fields , mode))\n{\n   WinkCMDmsg ={\n    \"url\":\"https://winkapi.quirky.com/locks/\"+context.global.winkState.locks[lock].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"locked\": true\n        }\n    }\n};\nWinkCMDmsg.payload.desired_state[mode]=true;\nif (checkDevCap(context.global.winkDevCap[lock].fields , 'alarm_mode')) {\n    WinkCMDmsg.payload.desired_state.alarm_mode='tamper';\n}\nif (checkDevCap(context.global.winkDevCap[lock].fields , 'alarm_enabled')) {\n    WinkCMDmsg.payload.desired_state.alarm_enabled=true;\n}\nreturn WinkCMDmsg;\n} else return false;    \n}\n\nif(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nmsg.statusCode=\"200\";\nnode.send(msg);\nsetTimeout(function(){\n    if('vaca_locks_vac' in context.global && context.global.vaca_locks_vac){\n        var i=0;\n        for (var lock in context.global.winkState.locks){\n            LMsg=setLockMode(lock,'vacation_mode_enabled');\n            if (LMsg) {\n                if (conext.global.DEBUG) node.warn(LMsg);\n                context.global.sendWithTimeout(node,LMsg,i);\n                i+=1000;\n            }\n        }\n    }\n},(context.global.vaca_delay || 15)*60*1000);\n\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 317,
    "y": 1661,
    "wires": [
      [
        "7a665a46.f5fe44"
      ]
    ]
  },
  {
    "id": "7a665a46.f5fe44",
    "type": "switch",
    "z": "17b3daf5.e84c25",
    "name": "",
    "property": "method",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "PUT",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "POST",
        "vt": "str"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "outputs": 3,
    "x": 474,
    "y": 1642,
    "wires": [
      [
        "5474a41d.c600ac"
      ],
      [
        "5474a41d.c600ac"
      ],
      [
        "667442e6.7bf81c"
      ]
    ]
  },
  {
    "id": "5474a41d.c600ac",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 626,
    "y": 1615,
    "wires": [
      [
        "b78eb646.fdf828"
      ]
    ]
  },
  {
    "id": "b78eb646.fdf828",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 790,
    "y": 1616,
    "wires": []
  },
  {
    "id": "c2c50140.b047b",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "3600",
    "crontab": "",
    "once": true,
    "x": 99,
    "y": 1724,
    "wires": [
      [
        "4ff7977f.310488"
      ]
    ]
  },
  {
    "id": "4ff7977f.310488",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if (context.global.VacationMode=='on'){\n    var currDate= new Date();\n    var currHours=currDate.getHours();\n    var currMins=currDate.getMinutes();\n    currHours=currHours+context.global.Weather.Offset;\n    if (currHours<0) currHours=24+currHours;\n    if ('vaca_light_bulbs' in context.global && (currHours >= context.global.Weather.SunsetHour || currHours<1)) {\n        context.global.vaca_light_bulbs.forEach(function(b){\n        var r,effect,min,max;\n        r=context.global.getRandomNumber(0,2);\n        effect=(r===0 ?'on' : r===1 ? 'off' : 'dim');\n        min=context.global.getRandomNumber(5,20);\n        max=context.global.getRandomNumber(50,100);\n        if (context.global.DEBUG) node.warn('bulb '+ b+' effect '+ effect + ' min ' + min + ' max '+ max);\n        var WinkCMDmsg = context.global.executeWinkCMD(b,'light',(effect=='off' ? 'off' : 'on'),(effect=='dim' ? min : max));\n        node.send(WinkCMDmsg);        \n        });\n    }\n    if ('vaca_light_bulbs' in context.global && currHours==1){\n        context.global.vaca_light_bulbs.forEach(function(b){\n            if(context.global.winkState.light_bulbs[b].powered){\n            var WinkCMDmsg = context.global.executeWinkCMD(b,'light','off',trunc(b.brightness*100));\n            node.send(WinkCMDmsg);\n            }\n        });\n    }\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 254,
    "y": 1726,
    "wires": [
      [
        "f9bef1b7.4ec8b"
      ]
    ]
  },
  {
    "id": "7e8c041b.2f646c",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 142,
    "y": 366,
    "wires": [
      [
        "caaab0cc.255f8"
      ]
    ]
  },
  {
    "id": "caaab0cc.255f8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "context.global.clearAllIntervals();\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 287,
    "y": 361,
    "wires": [
      []
    ]
  },
  {
    "id": "f9bef1b7.4ec8b",
    "type": "delay",
    "z": "17b3daf5.e84c25",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 416,
    "y": 1725,
    "wires": [
      [
        "e10bd671.180008"
      ]
    ]
  },
  {
    "id": "e10bd671.180008",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 586,
    "y": 1723,
    "wires": [
      []
    ]
  },
  {
    "id": "4b5276af.4a2fc8",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "300",
    "crontab": "",
    "once": true,
    "x": 97,
    "y": 1875,
    "wires": [
      [
        "98790c8b.89154"
      ]
    ]
  },
  {
    "id": "c850e395.0fa63",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 670,
    "y": 1860,
    "wires": [
      [
        "4e175c5e.9a8bc4",
        "5c5c678a.5f4bc8"
      ]
    ]
  },
  {
    "id": "48935862.d816c8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if ('BloomskyKey' in context.global && context.global.BloomskyKey!=='' ){\nvar msg1={}\nmsg1.url='https://api.bloomsky.com/api/skydata/?unit=intl';\nmsg1.method=\"GET\";\nmsg1.headers= {\n    \"Authorization\":context.global.BloomskyKey\n};\nreturn msg1;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 417,
    "y": 1874,
    "wires": [
      [
        "c850e395.0fa63"
      ]
    ]
  },
  {
    "id": "4e175c5e.9a8bc4",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "payload",
    "x": 890,
    "y": 1860,
    "wires": []
  },
  {
    "id": "5c5c678a.5f4bc8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "\nif (msg.statusCode=='200') {\n    data_set=msg.payload;\n    i=0;\n    distanceFromHome=-1;\n    data_set.forEach(function(dev){\n       var weatherData=dev.Data;\n       var stationDistanceFromHome = null;\n        if ('HomeLocation' in context.global){ \n            stationDistanceFromHome=Math.round(context.global.calcCrow(dev.LAT,dev.LON,context.global.HomeLocation.lat,context.global.HomeLocation.lon)*1000);\n        }       \n       if (context.global.DEBUG){\n           node.warn('device '+ dev.DeviceName);           \n           node.warn('temperature: '+ weatherData.Temperature);\n           node.warn('humidity: '+ weatherData.Humidity);\n           node.warn('night: '+ weatherData.Night);\n           node.warn('rain: '+ weatherData.Rain);\n           node.warn('pressure: '+ weatherData.Pressure);       \n           node.warn('luminance: '+ weatherData.Luminance);   \n           node.warn('uvindex: ' + weatherData.UVIndex);\n           node.warn('ImageURL: ' + weatherData.ImageURL);\n           node.warn('devide id: '+ dev.DeviceID);\n           node.warn('url: '+context.global.Weather.Bloomsky.URL);\n       }\n       if (stationDistanceFromHome !== null &&( distanceFromHome < 0 ||(distanceFromHome >=0 && distanceFromHome > stationDistanceFromHome))) {\n           /*if(!('Bloomsky' in context.global.Weather))*/ \n           context.global.Weather.Bloomsky={};\n           context.global.Weather.Bloomsky.Rain=weatherData.Rain;\n           context.global.Weather.Bloomsky.Night=weatherData.Night;\n           context.global.Weather.Bloomsky.TemperatureC=weatherData.Temperature;\n           context.global.Weather.Bloomsky.TemperatureF=Math.round(weatherData.Temperature*1.8+32);       \n           context.global.Weather.Bloomsky.Humidity=weatherData.Humidity; \n           context.global.Weather.Bloomsky.Pressure=weatherData.Pressure;          \n            if (weatherData.DeviceType == 'SKY1') {           \n                context.global.Weather.Bloomsky.Luminance=weatherData.Luminance;  \n               if (Object.keys(dev.Storm).length === 0) {\n                    context.global.Weather.Bloomsky.UVIndex=weatherData.UVIndex;\n               }\n            }\n            if (Object.keys(dev.Storm).length !== 0) { \n                context.global.Weather.Bloomsky.UVIndex=dev.Storm.UVIndex;\n            }\n           distanceFromHome = stationDistanceFromHome;\n       }\n        var postMsg={\n            url:context.global.BlueMixUrlBase+'/red/wink/subscribtions',\n            method:\"POST\",\n                headers: {\n                \"Content-Type\":\"application/json\"\n            },\n            payload:{\n          capabilities: { fields: [ \n              { field: 'temperature', type: 'float' },\n              { field: 'humidity', type: 'percentage' },\n              { field: 'timeframe', type: 'boolean' },\n              { field: 'rain', type: 'boolean' },\n              { field: 'pressure', type: 'float' }\n              ] },\n          device_manufacturer: 'BloomSky',\n          \"eco_system\" : \"BLOOMSKY\",\n          last_event: \n           { brightness_occurred_at: null,\n             loudness_occurred_at: null,\n             vibration_occurred_at: null },\n          last_reading: \n           { \n                agent_session_id: 'FALSE',\n                connection: true,\n                'temperature': weatherData.Temperature,\n                'humidity': weatherData.Humidity,\n                'timeframe': weatherData.Night,\n                'rain': weatherData.Rain,\n                'pressure': weatherData.Pressure\n           },\n          manufacturer_device_model: 'bloomsky_weather_sensor',\n          model_name: 'Weather Sensor',\n          external:true,\n          name:dev.DeviceName,\n          object_id:  dev.DeviceID+'_BloomSky',\n          object_type: 'sensor_pod',\n          radio_type: 'wifi',\n          sensor_pod_id: dev.DeviceID+'_BloomSky',\n          triggers: [],\n          units: {},\n          upc_code: dev.DeviceName+'_weather_sensor',\n          upc_id: 'BloomSky_'+i\n          }\n        };\n        if (weatherData.DeviceType == 'SKY1')\n        {\n            postMsg.payload.last_reading.luminance = weatherData.Luminance;\n            postMsg.payload.capabilities.fields.push({ field: 'luminance', type: 'float' });            \n            if (Object.keys(dev.Storm).length === 0) {\n                postMsg.payload.last_reading.uvindex = weatherData.UVIndex;\n                postMsg.payload.capabilities.fields.push({ field: 'uvindex', type: 'float' });\n            }\n        }\n        if(Object.keys(dev.Storm).length !== 0){\n            stormData= dev.Storm;\n            postMsg.payload.last_reading.uvindex = stormData.UVIndex;\n            postMsg.payload.last_reading.windDirection = stormData.WindDirection;\n            postMsg.payload.last_reading.rainDaily = stormData.RainDaily;            \n            postMsg.payload.last_reading.windGust = stormData.WindGust; \n            postMsg.payload.last_reading.sustainedWindSpeed = stormData.SustainedWindSpeed;\n            postMsg.payload.last_reading.rainRate = stormData.RainRate;\n            postMsg.payload.capabilities.fields.push({ field: 'uvindex', type: 'float' });            \n            postMsg.payload.capabilities.fields.push({ field: 'windDirection', type: 'string' });\n            postMsg.payload.capabilities.fields.push({ field: 'rainDaily', type: 'float' });\n            postMsg.payload.capabilities.fields.push({ field: 'windGust', type: 'float' });\n            postMsg.payload.capabilities.fields.push({ field: 'sustainedWindSpeed', type: 'float' });\n            postMsg.payload.capabilities.fields.push({ field: 'rainRate', type: 'float' });                        \n        }\n    context.global.sendWithTimeout(node,postMsg,i*2000);\n    i++;\n    var proto=context.global.BlueMixUrlBase.split(':')[0]+':';\n        var camMsg={\n            topic:dev.DeviceName,\n            url:context.global.BlueMixUrlBase+'/red/wink/subscribtions',\n            method:\"POST\",\n                headers: {\n                \"Content-Type\":\"application/json\"\n            },\n            payload:{    \n            \"name\": dev.DeviceName,\n            \"object_type\": \"camera\",\n            \"eco_system\" : \"BloomSky\",\n            \"object_id\": dev.DeviceID+'_BloomSky',\n            \"freeboard\": 0,\n            \"manufacturer_device_model\":\"BloomSky camera\",\n            \"connection\": true,\n            \"capturing_audio\": true,\n            \"capturing_video\": true,\n            \"imageURL\": weatherData.ImageURL,\n            \"url\":context.global.BlueMixUrlBase+'/red/bloomsky'+\"?camera_name=\"+dev.DeviceName,\n            \"snap_url\": context.global.BlueMixUrlBase+'/red/bloomsky?token='+context.global.FREEBOARD_TOKEN+\"&camera_name=\"+dev.DeviceName,\n            \"history_url\":context.global.BlueMixUrlBase+\"/freeboard/cameraSnapshots?token=\"+context.global.FREEBOARD_TOKEN+\"&camera_name=\"+dev.DeviceName,\n            \"refresh_time\":300,\n            \"motion\": \"N/A\",\n            \"activities\":[],\n            last_reading:{\n                \"motion\":false\n            }\n            }\n        };\n        context.global.sendWithTimeout(node,camMsg,i*2000);\n        i++;\n        context.global.Weather.Bloomsky.URL=proto+weatherData.ImageURL.split(':')[1];\n    });\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 708,
    "y": 1925,
    "wires": [
      [
        "168dafe8.90a4b",
        "ca0d528d.5ba5"
      ]
    ]
  },
  {
    "id": "168dafe8.90a4b",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 888,
    "y": 1920,
    "wires": [
      [
        "98bd863.c495b78"
      ]
    ]
  },
  {
    "id": "1a1eaf43.2ca9e1",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Integration with BloomSky ---------------------------------------------------------------------------------------",
    "info": "",
    "x": 350,
    "y": 1760,
    "wires": []
  },
  {
    "id": "ca0d528d.5ba5",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 890,
    "y": 1980,
    "wires": []
  },
  {
    "id": "98bd863.c495b78",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "if ('topic' in msg){\n       var newmsg ={\n        \"url\":context.global.BlueMixUrlBase+'/red/retrieve_activities?camera_name='+msg.topic,\n        \"method\": \"GET\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        }\n    };\n    node.send(newmsg);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 1037,
    "y": 1919,
    "wires": [
      []
    ]
  },
  {
    "id": "34f8e227.fa61de",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 270,
    "y": 200,
    "wires": []
  },
  {
    "id": "ba09bbf.6168a48",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "bin",
    "url": "",
    "x": 437,
    "y": 1968,
    "wires": [
      [
        "26e2e9b7.b37946",
        "d4796342.97723"
      ]
    ]
  },
  {
    "id": "e657ea25.f7bc98",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/bloomsky",
    "method": "get",
    "swaggerDoc": "",
    "x": 95,
    "y": 1965,
    "wires": [
      [
        "12022a72.13fd66"
      ]
    ]
  },
  {
    "id": "12022a72.13fd66",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "var web_req=(context.global.getCookie('exchange_token',msg.req.headers.cookie)=='0' ? false:true);\nif (msg.payload.token==context.global.FREEBOARD_TOKEN || (msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN)) web_req=true;\nif (web_req && 'camera_name' in msg.payload)\n{\n    var cam=msg.payload.camera_name || null;\n    msg.statusCode=200;\n    msg.url=context.global.winkState.cameras[cam].imageURL;\n    msg.method=\"GET\";\n    return [msg,null];\n\n    \n}\nelse {\n    node.warn(\"ifttt messages bad request\");\n    msg.payload=\"403: Bad request\";\n    msg.statusCode=403;\n    return [null,msg];\n}\nreturn msg;",
    "outputs": "2",
    "noerr": 0,
    "x": 270,
    "y": 1960,
    "wires": [
      [
        "ba09bbf.6168a48",
        "f29480aa.9d0db"
      ],
      []
    ]
  },
  {
    "id": "f29480aa.9d0db",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "true",
    "x": 437,
    "y": 1925,
    "wires": []
  },
  {
    "id": "26e2e9b7.b37946",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "true",
    "x": 612,
    "y": 2028,
    "wires": []
  },
  {
    "id": "d4796342.97723",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 613,
    "y": 1987,
    "wires": []
  },
  {
    "id": "3436b6ce.d4dfda",
    "type": "switch",
    "z": "17b3daf5.e84c25",
    "name": "",
    "property": "statusCode",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "503",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "200",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "outputs": 2,
    "x": 634.2856788635254,
    "y": 1551.4284934997559,
    "wires": [
      [
        "d5d30f9c.1b2d9"
      ],
      [
        "5fbe9600.62292c"
      ]
    ]
  },
  {
    "id": "5fbe9600.62292c",
    "type": "json",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 771.4285545349121,
    "y": 1549.9999389648438,
    "wires": [
      [
        "7bef94f7.6f895c"
      ]
    ]
  },
  {
    "id": "d5d30f9c.1b2d9",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 790,
    "y": 1508.5714285714284,
    "wires": []
  },
  {
    "id": "235f6162.a3c79e",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/loc/:user/:key",
    "method": "post",
    "swaggerDoc": "",
    "x": 115,
    "y": 2208,
    "wires": [
      [
        "ee0c50b9.263a6",
        "594cf125.4675d",
        "6f879335.ba1b8c"
      ]
    ]
  },
  {
    "id": "ee0c50b9.263a6",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "msg.statusCode=200;\nmsg.payload=[]\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 530,
    "y": 2197,
    "wires": [
      [
        "7ae1403.30f00c"
      ]
    ]
  },
  {
    "id": "7ae1403.30f00c",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 690,
    "y": 2197,
    "wires": []
  },
  {
    "id": "6f879335.ba1b8c",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "function roundUsing(func, number, prec) {\n    var tempnumber = number * Math.pow(10, prec);\n    tempnumber = func(tempnumber);\n    return tempnumber / Math.pow(10, prec);\n}\n\n\n\n\n// Converts numeric degrees to radians\nfunction toRad(Value) {\n    return Value * Math.PI / 180;\n}\n\n\nfunction calcCrow(lat1, lon1, lat2, lon2) {\n  var R = 6371; // km\n  var dLat = toRad(lat2 - lat1);\n  var dLon = toRad(lon2 - lon1);\n  Rlat1 = toRad(lat1);\n  Rlat2 = toRad(lat2);\n\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(Rlat1) * Math.cos(Rlat2); \n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n  var d = R * c;\n  return d;\n}\n\nif (context.global.OwnTracksPwd == msg.req.params.key) {\n    context.global.OwnTracksMaxAcc = context.global.OwnTracksMaxAcc || 100;\n    context.global.OwnTracksGeoRadius = context.global.OwnTracksGeoRadius || 100;    \n    if('_type' in msg.payload) {\n        if (msg.payload._type === 'encrypted') {\n            var secret = context.global.OwnTracksPwd;\n            var cypherText = new Buffer(msg.payload.data, 'base64');\n            var nonce = cypherText.slice(0,24);\n            var key = new Buffer(32);\n            key.fill(0);\n            key.write(secret);\n            try {\n                var clearText = context.global.wnr.crypto_open_easy(cypherText.slice(24),nonce,key,\"text\");\n            } catch (e) {\n                node.warn(\"error decrypting payload\");\n                return;\n            }\n            try{\n                var clearObj = JSON.parse(clearText);\n            } catch (e) {\n                node.warn(\"decrypted message not JSON\");\n                return;\n            }\n            msg.payload = clearObj; \n        }\n        var waypoint,user,pos;\n        var dst_from_home=-1;    \n        var do_send=false;\n        if (msg.payload._type == 'transition') {\n            waypoint = true;\n            do_send = true;\n            user = msg.req.params.user;\n            pos = msg.payload;\n        }\n        if (msg.payload._type == 'location') {\n        waypoint = false;\n        do_send = true;\n        user = msg.req.params.user;\n        pos = msg.payload;\n        if (context.global.OwnTracksIgnorePing && 't' in pos && pos.t==='p') do_send = false;\n        }\n        if (do_send && pos.acc <= context.global.OwnTracksMaxAcc) {\n            pos.lat = roundUsing(Math.ceil, pos.lat, 6);\n            pos.lon = roundUsing(Math.ceil, pos.lon, 6);\n            if ('batt' in pos ) { \n                pos.batt = (pos.batt !== null ? pos.batt / 100 : 1);\n            } else { \n                pos.batt=1;\n            }\n            if (!('Presence' in context.global)) context.global.Presence={};\n            if (!(user in context.global.Presence)) context.global.Presence[user]={\"home\":\"no\"};\n            var event_trigger='none';\n            if ('t' in pos) event_trigger=pos.t;\n            if ('trigger' in pos) event_trigger=pos.trigger;\n                if ('HomeLocation' in context.global){ \n                    dst_from_home=Math.round(calcCrow(pos.lat,pos.lon,context.global.HomeLocation.lat,context.global.HomeLocation.lon)*1000);\n                }        \n            loc_msg={\n                url:context.global.BlueMixUrlBase+'/red/wink/subscribtions',\n                method:\"POST\",\n                payload: {\n                     capabilities: { fields: [ \n                      { field: 'lat', type: 'float' },\n                      { field: 'lon', type: 'float' },\n                      { field: 'battery', type: 'percentage' },\n                      { field: 'lastWaypoint', type: 'string' },\n                      { field: 'lastEvent', type: 'string' },\n                      { field: 'accuracy', type: 'float' },\n                      { field: 'distanceFromHome', type: 'float' },\n                      { field: 'coordinates', type: 'string' },                      \n                      { field: 'trigger', type: 'string' },\n                      { field: 'lastUpdated', type: 'timestamp'}\n                      ] },\n                  device_manufacturer: 'OwnTracks',\n                  \"eco_system\" : \"NODE-RED\",\n                  last_event: \n                   { brightness_occurred_at: null,\n                     loudness_occurred_at: null,\n                     vibration_occurred_at: null },\n                  last_reading: \n                   { \n                        agent_session_id: 'FALSE',\n                        connection: true,\n                        'lat': pos.lat,\n                        'lon': pos.lon,\n                        'coordinates':  pos.lat+','+pos.lon,\n                        'accuracy' : pos.acc,\n                        'trigger'  : event_trigger,\n                        'lastUpdated' : pos.tst\n                   },\n                  manufacturer_device_model: 'owntracks_geolocation_sensor',\n                  model_name: 'Geolocation Sensor',\n                  name:user+'_Geo',\n                  object_id:  user+'_Geo',\n                  object_type: 'sensor_pod',\n                  radio_type: 'wifi',\n                  sensor_pod_id: user+'_Geo',\n                  triggers: [],\n                  units: {},\n                  upc_code: user+'_Geo',\n                  upc_id: user+'_Geo'\n                  }\n            };\n            if (pos.batt !== null) loc_msg.payload.last_reading.battery = pos.batt;\n            pos.acc=parseInt(pos.acc);\n            context.global.OwnTracksGeoRadius = parseInt(context.global.OwnTracksGeoRadius);\n            if(dst_from_home!=-1) dst_from_home=loc_msg.payload.last_reading.distanceFromHome=(dst_from_home < pos.acc ? 0 : dst_from_home - pos.acc);   \n            \n            if (context.global.GEO_DEBUG) node.warn(\"user: \" + user);\n            if (context.global.GEO_DEBUG) node.warn(\"distance from home:\" + dst_from_home);\n            if (context.global.GEO_DEBUG) node.warn(\"message type:\" + (waypoint ? 'waypoint' : 'location'));\n            if (context.global.GEO_DEBUG) node.warn(\"WNR home geo radius:\"+ context.global.OwnTracksGeoRadius || 100);\n            if (context.global.GEO_DEBUG) node.warn(\"current user state: \"+context.global.Presence[user].home);\n\n            if (waypoint /*|| dst_from_home<=50 || (dst_from_home < pos.acc && pos.acc <100)*/) { \n                if (context.global.GEO_DEBUG) node.warn(\"waypoint branch\");\n        //            pos.desc=(dst_from_home < pos.acc  ? 'home' : pos.desc);\n        //            pos.event=(dst_from_home < pos.acc  ? 'enter' : pos.event);\n        //            loc_msg.payload.last_reading.lastWaypoint=(dst_from_home < pos.acc  ? 'home' : pos.desc);\n        //            loc_msg.payload.last_reading.lastEvent=(dst_from_home < pos.acc  ? 'enter' : pos.event);\n                if (pos.desc.toLowerCase().indexOf('home')!=-1 && context.global.Presence[user].home==\"yes\") {\n                    waypoint=false\n                }\n                else \n                {\n                    loc_msg.payload.last_reading.lastWaypoint=(pos.desc);\n                    loc_msg.payload.last_reading.lastEvent=(pos.event);            \n                }\n            } else\n            {\n                if (context.global.GEO_DEBUG) node.warn(\"location branch\");\n                if(dst_from_home > context.global.OwnTracksGeoRadius && context.global.Presence[user].home==\"yes\"){\n                    if (context.global.GEO_DEBUG) node.warn(user+ \" left\");\n                    waypoint=true;\n                    pos.desc='home';\n                    pos.event='leave';\n                loc_msg.payload.last_reading.lastWaypoint=(pos.desc);                    \n                    loc_msg.payload.last_reading.lastEvent='leave';\n                } else if (dst_from_home < context.global.OwnTracksGeoRadius && context.global.Presence[user].home==='no') {\n                    if (context.global.GEO_DEBUG) node.warn(user+\" arrived\");                    \n                    waypoint=true;\n                    pos.desc='home';\n                    pos.event='enter';\n                    loc_msg.payload.last_reading.lastWaypoint=(pos.desc);\n                    loc_msg.payload.last_reading.lastEvent='enter';    \n                }\n            }\n            node.send(loc_msg); \n            if ((waypoint  && pos.desc.toLowerCase().indexOf('home')!=-1) /*|| dst_from_home < pos.acc*/){\n                loc_msg1={\n                    url:context.global.BlueMixUrlBase+'/red/presence',\n                method:\"POST\",\n                payload: {\n                \"iftttkey\":context.global.FREEBOARD_TOKEN,\"name\":user,\"home\":(pos.event=='enter' ? \"yes\" : \"no\")\n                }\n                };\n                node.send(loc_msg1);\n            }\n        }\n    }\n} else {\n    node.warn(\"bad owntracks message\");\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 525,
    "y": 2272,
    "wires": [
      [
        "5713bf70.0918d",
        "70f06fab.3b1f2"
      ]
    ]
  },
  {
    "id": "1eac72a.7dd828d",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 893,
    "y": 2258,
    "wires": [
      [
        "59f3a88e.2d3a28"
      ]
    ]
  },
  {
    "id": "5713bf70.0918d",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "payload",
    "x": 742,
    "y": 2308,
    "wires": []
  },
  {
    "id": "3d0e58f4.7d5b78",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "Integration with OwnTracks ---------------------------------------------------------------------------------------",
    "info": "",
    "x": 346,
    "y": 2138,
    "wires": []
  },
  {
    "id": "594cf125.4675d",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "payload",
    "x": 199,
    "y": 2340,
    "wires": []
  },
  {
    "id": "225b2207.0e451e",
    "type": "rbe",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "rbe",
    "gap": "",
    "start": "",
    "x": 847,
    "y": 696,
    "wires": [
      [
        "b150abb.822cf58"
      ]
    ]
  },
  {
    "id": "bcef62a6.56824",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "true",
    "x": 1318,
    "y": 755,
    "wires": []
  },
  {
    "id": "59f3a88e.2d3a28",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 1053,
    "y": 2259,
    "wires": []
  },
  {
    "id": "70f06fab.3b1f2",
    "type": "delay",
    "z": "17b3daf5.e84c25",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 720,
    "y": 2260,
    "wires": [
      [
        "1eac72a.7dd828d"
      ]
    ]
  },
  {
    "id": "18627609.e6704a",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 378,
    "y": 756,
    "wires": []
  },
  {
    "id": "ce9a9854.326c18",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 161,
    "y": 768,
    "wires": []
  },
  {
    "id": "5a344246.23a95c",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "context.global.GEO_DEBUG=true;\nnode.warn('GEO Debug mode on');\n",
    "outputs": 1,
    "noerr": 0,
    "x": 312,
    "y": 2418,
    "wires": [
      []
    ]
  },
  {
    "id": "e90ec6c6.9c48d8",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "Turn Geo Debug On",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 138,
    "y": 2415,
    "wires": [
      [
        "5a344246.23a95c"
      ]
    ]
  },
  {
    "id": "8373082e.9940d8",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "context.global.GEO_DEBUG=false;\nnode.warn('GEO Debug mode off');\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 309,
    "y": 2461,
    "wires": [
      []
    ]
  },
  {
    "id": "e6443788.820418",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "Turn Geo Debug Off",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 135,
    "y": 2458,
    "wires": [
      [
        "8373082e.9940d8"
      ]
    ]
  },
  {
    "id": "69c62e0f.8114f",
    "type": "inject",
    "z": "17b3daf5.e84c25",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "3600",
    "crontab": "",
    "once": true,
    "x": 105,
    "y": 1011,
    "wires": [
      [
        "c04940da.c8645"
      ]
    ]
  },
  {
    "id": "7a139a34.8aec74",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "msg.db_mode=\"update\";\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 408,
    "y": 1010,
    "wires": [
      [
        "6f837a8d.a497c4"
      ]
    ]
  },
  {
    "id": "c04940da.c8645",
    "type": "delay",
    "z": "17b3daf5.e84c25",
    "name": "",
    "pauseType": "delay",
    "timeout": "10",
    "timeoutUnits": "minutes",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 264,
    "y": 1011,
    "wires": [
      [
        "7a139a34.8aec74"
      ]
    ]
  },
  {
    "id": "98790c8b.89154",
    "type": "delay",
    "z": "17b3daf5.e84c25",
    "name": "",
    "pauseType": "delay",
    "timeout": "45",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 274,
    "y": 1876,
    "wires": [
      [
        "48935862.d816c8"
      ]
    ]
  },
  {
    "id": "aac7814c.0e565",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 898,
    "y": 479,
    "wires": []
  },
  {
    "id": "e8a03466.df6da8",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/smartthings",
    "method": "post",
    "swaggerDoc": "",
    "x": 167,
    "y": 2998,
    "wires": [
      [
        "84f275a4.1dd288",
        "17b36d2d.e24b93",
        "78afc706.2b33f8"
      ]
    ]
  },
  {
    "id": "84f275a4.1dd288",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "payload",
    "x": 430,
    "y": 2998,
    "wires": []
  },
  {
    "id": "1ab73700.09ce49",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "SmartThings ---------------------------------------------------------------------------------------",
    "info": "",
    "x": 295,
    "y": 2922,
    "wires": []
  },
  {
    "id": "17b36d2d.e24b93",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "msg.statusCode=200;\nmsg.payload=[]\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 412,
    "y": 2960,
    "wires": [
      [
        "570e14f1.82f18c"
      ]
    ]
  },
  {
    "id": "570e14f1.82f18c",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 537,
    "y": 2960,
    "wires": []
  },
  {
    "id": "45c3aa0a.809ba4",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "function roundUsing(func, number, prec) {\n    var tempnumber = number * Math.pow(10, prec);\n    tempnumber = func(tempnumber);\n    return tempnumber / Math.pow(10, prec);\n}\n\nfunction setDeviceCapabilities(device,capabilities){\n    var capbExists=false;\n    var newCapb={};\n    newCapb.fields=[];\n    if (device in context.global.winkDevCap &&  'fields' in context.global.winkDevCap[device]) {\n        for (var i=0;i<context.global.winkDevCap[device].fields.length;i++ ) {\n                r=context.global.winkDevCap[device].fields[i];\n                newCapb.fields.push(r);\n        }\n    }\n    for (var j=0;j<capabilities.length; j++) {\n        c = capabilities[j];\n        capbExists=false;\n            for (var k=0;k<newCapb.fields.length;k++ ) {\n                r=newCapb.fields[k];\n                if (r.field == c.capb){\n                    capbExists=true;\n                    break;\n                }\n            }\n        if (!capbExists) newCapb.fields.push({\n              field:c.capb, type: c.type  \n        });\n    }\n    return newCapb;\n}\n\n\nfunction setSensorStMsg(Sdevice) {\nreturn {\n            url:context.global.BlueMixUrlBase+'/red/wink/subscribtions',\n            method:\"POST\",\n            payload: {\n               capabilities: setDeviceCapabilities(Sdevice.component.replace('+',' '),[{capb: Sdevice.stream, type: Sdevice.type}]),\n              device_manufacturer: 'SmartThings',\n              \"eco_system\" : \"SmartThings\",\n              last_event: \n               { brightness_occurred_at: null,\n                 loudness_occurred_at: null,\n                 vibration_occurred_at: null },\n              last_reading: \n               { \n                    agent_session_id: 'FALSE',\n                    connection: true,\n                    'lastUpdated' : new Date().getTime()\n               },\n              manufacturer_device_model: 'smartthings_'+Sdevice.stream+'_sensor',\n              model_name:'Smartthings Sensor', \n              name:Sdevice.component.replace('+',' '),\n              object_id:Sdevice.devid,\n              object_type: 'sensor_pod',\n              radio_type: 'wifi',\n              sensor_pod_id:Sdevice.devid,\n              triggers: [],\n              units: {},\n              upc_code:Sdevice.component.replace('+',' '),\n              upc_id: Sdevice.devid\n              }\n        };\n}\n\nfunction setSwitchStMsg(Sdevice) {\n    var devCapb=[];\n    if (\"attributes\" in Sdevice && 'level' in Sdevice.attributes) {\n        devType='light_bulb';\n        devCapb = setDeviceCapabilities(Sdevice.component.replace('+',' '),[{capb:'powered', type:'boolean'},{capb:'brightness', \"type\": 'percentage'}]);\n    } else {\n        devType='binary_switch';\n        devCapb = setDeviceCapabilities(Sdevice.component.replace('+',' '),[{capb:'powered', type:'boolean'}]);        \n    }\n        \n wDevice = {\n            url:context.global.BlueMixUrlBase+'/red/wink/subscribtions',\n            method:\"POST\",\n            payload: {\n              capabilities: devCapb,\n              device_manufacturer: 'SmartThings',\n              \"eco_system\" : \"SmartThings\",\n              desired_state:{},\n              last_reading: \n               { \n                    connection: true,\n                    'powered': Sdevice.attributes.switch=='on' ? true : false,\n                    'lastUpdated' : new Date().getTime()\n               },\n              manufacturer_device_model: 'smartthings_'+Sdevice.stream+'_switch',\n              model_name:'Smartthings '+devType, \n              name:Sdevice.component.replace('+',' '),\n              object_id:Sdevice.devid,\n              object_type: devType,\n              radio_type: 'wifi',\n              sensor_pod_id:Sdevice.devid,\n              triggers: [],\n              units: {},\n              upc_code:Sdevice.component.replace('+',' '),\n              upc_id: Sdevice.devid\n              }\n        };\n    if (devType=='light_bulb') wDevice.payload.last_reading.brightness=Sdevice.attributes.level/100;        \n    return wDevice;\n}\n\n\n//if (true){\nif(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.SmartThingsSecret){    \n//if (context.global.SmartThingsKey === msg.req.params.key) {\n\n    if('component' in msg.payload) {\n        var Sdevice = msg.payload;\n        Sdevice.component=Sdevice.component.replace('+',' ');\n        Sdevice.stream=Sdevice.stream.replace('acceleration','tamper_detected');\n        Sdevice.stream=Sdevice.stream.replace('water','liquid_detected');\n        if ('temperature_scale' in Sdevice && Sdevice.stream=='temperature' && Sdevice.temperature_scale!='C') {\n            Sdevice.value=parseFloat(((Sdevice.value-32)/1.8).toFixed(1));\n        }\n        if (Sdevice.stream=='switch' || Sdevice.stream=='level') \n            {\n                st_msg=setSwitchStMsg(Sdevice);\n            }\n        else \n            {\n                st_msg=setSensorStMsg(Sdevice);\n                st_msg.payload.last_reading[Sdevice.stream] = Sdevice.value;\n            }\n        node.send(st_msg); \n    }\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 579,
    "y": 3044,
    "wires": [
      [
        "eae72774.66d858",
        "1e9a65cb.92639a"
      ]
    ]
  },
  {
    "id": "78afc706.2b33f8",
    "type": "delay",
    "z": "17b3daf5.e84c25",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 426,
    "y": 3042,
    "wires": [
      [
        "45c3aa0a.809ba4"
      ]
    ]
  },
  {
    "id": "1e9a65cb.92639a",
    "type": "http request",
    "z": "17b3daf5.e84c25",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 734,
    "y": 3043,
    "wires": [
      [
        "f95f45af.003608"
      ]
    ]
  },
  {
    "id": "f95f45af.003608",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 894,
    "y": 3044,
    "wires": []
  },
  {
    "id": "33a44d5a.63ad12",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "",
    "func": "//if ('uid' in msg.req.body && 'pwd' in msg.req.body && msg.req.body.uid==context.global.WinkUser.uid && msg.req.body.pwd==context.global.WinkUser.pwd){\nvar cred=context.global.genJwtToken(msg.req.body);\nif (cred.isSet){\n    msg.statusCode=\"200\";\n    msg.payload={\"status\":\"OK\"};    \n    msg.headers={\n//        \"Set-Cookie\":\"exchange_token=\"+context.global.FREEBOARD_TOKEN+'; Path=/'\n        \"Set-Cookie\":\"exchange_token=\"+cred.token+'; Path=/'\n        }\n} else \n    {\n        msg.statusCode=\"401\";\n        msg.payload={\"status\":\"Unathorized\"};  \n    }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 252,
    "y": 2567,
    "wires": [
      [
        "6152228f.f7c4ec"
      ]
    ]
  },
  {
    "id": "c12b809e.a3d9b",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/auth",
    "method": "post",
    "swaggerDoc": "",
    "x": 99,
    "y": 2566,
    "wires": [
      [
        "33a44d5a.63ad12"
      ]
    ]
  },
  {
    "id": "64596b55.26a5b4",
    "type": "comment",
    "z": "17b3daf5.e84c25",
    "name": "WNR 2.0 ---------------------------------------------------------------------------------------",
    "info": "",
    "x": 287,
    "y": 2519,
    "wires": []
  },
  {
    "id": "6152228f.f7c4ec",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 424,
    "y": 2567,
    "wires": []
  },
  {
    "id": "f2b34622.e54d68",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/getApplDataJSon",
    "method": "get",
    "swaggerDoc": "",
    "x": 128,
    "y": 2652,
    "wires": [
      [
        "dd0a696e.6f7598"
      ]
    ]
  },
  {
    "id": "dd0a696e.6f7598",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "Throw Wink Data",
    "func": "//if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nif ((msg.req.body.uid==context.global.WinkUser.uid && msg.req.body.pwd==context.global.WinkUser.pwd)||context.global.getCookie('exchange_token',msg.req.headers.cookie)==context.global.FREEBOARD_TOKEN || msg.payload.token==context.global.FREEBOARD_TOKEN){\nmsg.payload.WinkData=context.global.winkState;\nmsg.payload.WinkCapbs=context.global.winkDevCap;\n//msg.payload.WeatherData=context.global.Weather;\n//msg.payload.Weather=context.global.Weather;\n//msg.payload.WinkSubscriptions=context.global.WinkSubscriptions;\nmsg.payload.Presence=context.global.checkPresence();\nmsg.payload.PresenceDetail=context.global.Presence;\nmsg.payload.PresenceHistory=context.global.PresenceHistory;\n\n//msg.payload.foscamP=context.global.FosCam;\n//msg.payload.SamsungP=context.global.SamsungCam;\n//msg.payload.DlinkCam=context.global.DlinkCam;\n//msg.payload.VCAP_SERVICES=context.global.VCAP_SERVICES\n//msg.payload.ImageArchive=context.global.ImageArchive\n//msg.payload.camera_motion=context.global.camera_motion\n//msg.payload.netatmo=context.global.netatmo\nmsg.statusCode=\"200\";\nvar Etag=\"\";\nif ('CRYPTO' in context.global){\n    Etag=context.global.CRYPTO.createHash(\"md5\").update(JSON.stringify(msg.payload),\"utf8\").digest(\"hex\");\n    msg.headers={\n       'ETag': Etag,\n       'Content-Type': 'application/json'\n    };\n//    msg.res.set({\n//       'ETag': Etag,\n//       'Content-Type': 'application/json'\n//    });\n}\nreturn msg;\n}\nelse\n{\n    //msg.payload=\"Not Authorized\";\n   msg.statusCode=\"403\";\n   node.send(msg);\n   //res.send(\"403\",\"Forbidden\");\n  return;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 472.4999694824219,
    "y": 2648,
    "wires": [
      [
        "cdf2c1c1.20338"
      ]
    ]
  },
  {
    "id": "cdf2c1c1.20338",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 697.5,
    "y": 2649,
    "wires": []
  },
  {
    "id": "27023e0.34fbbc2",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/components/:component",
    "method": "get",
    "swaggerDoc": "",
    "x": 148,
    "y": 2730,
    "wires": [
      [
        "ffb1546c.d4aa38"
      ]
    ]
  },
  {
    "id": "ffb1546c.d4aa38",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "component_details",
    "func": "if(context.global.getCookie('exchange_token',msg.req.headers.cookie)==context.global.FREEBOARD_TOKEN ){\n//if (context.global.getCookie('exchange_token',msg.req.headers.cookie)==context.global.FREEBOARD_TOKEN){\n    if (msg.req.params.component in context.global.winkState) {\n        msg.payload=context.global.winkState[msg.req.params.component];\n        msg.statusCode=\"200\";\n    } else if (msg.req.params.component=='weather'){\n        msg.payload=context.global.Weather;\n        msg.statusCode=\"200\";\n    } else\n    {\n        msg.payload={\n            \"error\":\"unknown component\"\n        };\n        msg.statusCode=\"404\";        \n    }\n    var Etag=\"\";\n    if ('CRYPTO' in context.global){\n        Etag=context.global.CRYPTO.createHash(\"md5\").update(JSON.stringify(msg.payload),\"utf8\").digest(\"hex\");\n        msg.headers={\n           'ETag': Etag,\n           'Content-Type': 'application/json'\n        };\n    }\n    return msg;\n} else\n{\n   msg.statusCode=\"403\";\n   return (msg);\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 459.4999694824219,
    "y": 2728,
    "wires": [
      [
        "5ce86150.1143e"
      ]
    ]
  },
  {
    "id": "5ce86150.1143e",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 666.5,
    "y": 2727,
    "wires": []
  },
  {
    "id": "a42eca12.86afd8",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/group_members/:group/:type",
    "method": "get",
    "swaggerDoc": "",
    "x": 157,
    "y": 2788,
    "wires": [
      [
        "eabd6043.6d422"
      ]
    ]
  },
  {
    "id": "eabd6043.6d422",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "group_members",
    "func": "if(context.global.getCookie('exchange_token',msg.req.headers.cookie)==context.global.FREEBOARD_TOKEN ){\n//if (context.global.getCookie('exchange_token',msg.req.headers.cookie)==context.global.FREEBOARD_TOKEN){\n//    node.warn(msg.req.params.group);\n    if (msg.req.params.group in context.global.winkState.groups && context.global.winkState.groups[msg.req.params.group][msg.req.params.type] ) {\n        if (msg.req.params.type=='members')  {\n            for (var m in context.global.winkState.groups[msg.req.params.group][msg.req.params.type]) {\n                obj = context.global.winkState.groups[msg.req.params.group][msg.req.params.type][m];\n                msg.payload[m]=context.global.winkState[obj.object_type][obj.name];\n            }\n        } else {\n            msg.payload=context.global.winkState.groups[msg.req.params.group][msg.req.params.type].members;\n        }\n        msg.statusCode=\"200\";\n    } else\n    {\n        msg.payload={\n            \"error\":\"Not Found\"\n        };\n        msg.statusCode=\"404\";        \n    }\n    var Etag=\"\";\n    if ('CRYPTO' in context.global){\n        Etag=context.global.CRYPTO.createHash(\"md5\").update(JSON.stringify(msg.payload),\"utf8\").digest(\"hex\");\n        msg.headers={\n           'ETag': Etag,\n           'Content-Type': 'application/json'\n        };\n    }\n    return msg;\n} else\n{\n   msg.statusCode=\"403\";\n   return (msg);\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 444.4999694824219,
    "y": 2785,
    "wires": [
      [
        "2c9c6246.8e058e"
      ]
    ]
  },
  {
    "id": "2c9c6246.8e058e",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 637.5,
    "y": 2786,
    "wires": []
  },
  {
    "id": "dec404c3.2a4698",
    "type": "http in",
    "z": "17b3daf5.e84c25",
    "name": "",
    "url": "/red/sensors/:type",
    "method": "get",
    "swaggerDoc": "",
    "x": 107,
    "y": 2848,
    "wires": [
      [
        "28ff511a.4e472e"
      ]
    ]
  },
  {
    "id": "28ff511a.4e472e",
    "type": "function",
    "z": "17b3daf5.e84c25",
    "name": "component_details",
    "func": "if(context.global.getCookie('exchange_token',msg.req.headers.cookie)==context.global.FREEBOARD_TOKEN ){\n//if (context.global.getCookie('exchange_token',msg.req.headers.cookie)==context.global.FREEBOARD_TOKEN){\n    if ('@wnrSensors' in context.global.winkState.groups && context.global.winkState.groups['@wnrSensors'][msg.req.params.type]) {\n        msg.payload=context.global.winkState.groups['@wnrSensors'][msg.req.params.type].members;\n        msg.statusCode=\"200\";\n    } else if (msg.req.params.component=='weather'){\n        msg.payload=context.global.Weather;\n        msg.statusCode=\"200\";\n    } else\n    {\n        msg.payload={\n            \"error\":\"unknown component\"\n        };\n        msg.statusCode=\"404\";        \n    }\n    var Etag=\"\";\n    if ('CRYPTO' in context.global){\n        Etag=context.global.CRYPTO.createHash(\"md5\").update(JSON.stringify(msg.payload),\"utf8\").digest(\"hex\");\n        msg.headers={\n           'ETag': Etag,\n           'Content-Type': 'application/json'\n        };\n    }\n    return msg;\n} else\n{\n   msg.statusCode=\"403\";\n   return (msg);\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 458.4999694824219,
    "y": 2846,
    "wires": [
      [
        "1559e6be.e7dd39"
      ]
    ]
  },
  {
    "id": "1559e6be.e7dd39",
    "type": "http response",
    "z": "17b3daf5.e84c25",
    "name": "",
    "x": 665.5,
    "y": 2845,
    "wires": []
  },
  {
    "id": "5cfb9ea3.e9d86",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 1252,
    "y": 1560,
    "wires": []
  },
  {
    "id": "d4db5bed.6a7188",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "true",
    "x": 1151,
    "y": 170,
    "wires": []
  },
  {
    "id": "eae72774.66d858",
    "type": "debug",
    "z": "17b3daf5.e84c25",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 733,
    "y": 3097,
    "wires": []
  }
]
