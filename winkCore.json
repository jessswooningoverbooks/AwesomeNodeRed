[
  {
    "id": "bb176546.102898",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "context.global.cleanWinkState();\n delete context.global.winkState.groups['@wnrSensors'];\n delete context.global.winkState.groups['@wnrLights'];\n delete context.global.winkState.groups['@valves'];\n//delete context.global.winkState;\n//delete context.global.winkState.cameras;\n//delete context.global.winkState.sensor_pods.kevin_Geo;\n//delete context.global.winkDevCap['Aeon Multisensor'];\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 282.00001525878906,
    "y": 1280,
    "wires": [
      []
    ]
  },
  {
    "id": "dc0011f7.67788",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "Reset winkState object",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 107.00001525878906,
    "y": 1277.0000305175781,
    "wires": [
      [
        "bb176546.102898"
      ]
    ]
  },
  {
    "id": "5a87d57e.41312c",
    "type": "http in",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "url": "/red/getGlobalDataJSon",
    "method": "get",
    "x": 117,
    "y": 457,
    "wires": [
      [
        "618d642e.9e62cc"
      ]
    ]
  },
  {
    "id": "618d642e.9e62cc",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Throw Wink Data",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nmsg.payload.WinkData=context.global.winkState;\nmsg.payload.WinkCapbs=context.global.winkDevCap;\nmsg.payload.WeatherData=context.global.Weather;\nmsg.payload.Weather=context.global.Weather;\n//msg.payload.WinkSubscriptions=context.global.WinkSubscriptions;\nmsg.payload.Presence=context.global.checkPresence();\nmsg.payload.PresenceDetail=context.global.Presence;\nmsg.payload.PresenceHistory=context.global.PresenceHistory;\n\n//msg.payload.foscamP=context.global.FosCam;\n//msg.payload.SamsungP=context.global.SamsungCam;\nmsg.payload.DlinkCam=context.global.DlinkCam;\n//msg.payload.VCAP_SERVICES=context.global.VCAP_SERVICES\n//msg.payload.ImageArchive=context.global.ImageArchive\n//msg.payload.camera_motion=context.global.camera_motion\n//msg.payload.netatmo=context.global.netatmo\nmsg.statusCode=\"200\";\nvar Etag=\"\";\nif ('CRYPTO' in context.global){\n    Etag=context.global.CRYPTO.createHash(\"md5\").update(JSON.stringify(msg.payload),\"utf8\").digest(\"hex\");\n    msg.headers={\n       'ETag': Etag,\n       'Content-Type': 'application/json'\n    };\n//    msg.res.set({\n//       'ETag': Etag,\n//       'Content-Type': 'application/json'\n//    });\n}\nreturn msg;\n}\nelse\n{\n    //msg.payload=\"Not Authorized\";\n   msg.statusCode=\"403\";\n   node.send(msg);\n   //res.send(\"403\",\"Forbidden\");\n  return;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 463.4999694824219,
    "y": 452,
    "wires": [
      [
        "d20e1aa4.63fef8"
      ]
    ]
  },
  {
    "id": "d20e1aa4.63fef8",
    "type": "http response",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "x": 686.5,
    "y": 454,
    "wires": []
  },
  {
    "id": "4f9c27c5.537908",
    "type": "http in",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "url": "/red/wink/subscribtions",
    "method": "get",
    "x": 112.5,
    "y": 558,
    "wires": [
      [
        "f3ab6ce.e36879"
      ]
    ]
  },
  {
    "id": "f3ab6ce.e36879",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Wink Subscription resonse",
    "func": "if (msg.payload[\"hub.mode\"]==\"subscribe\")\n{\n//    msg.res.send(200,msg.payload[\"hub.challenge\"]);\n    msg.statusCode=200;\n    msg.payload=msg.payload[\"hub.challenge\"];\n//    node.send(msg);\n}\nelse\n{\n//    msg.res.send(400,\"Bad Request darling\");\n     msg.statusCode=200;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 412.5,
    "y": 554,
    "wires": [
      [
        "c8316025.5e236"
      ]
    ]
  },
  {
    "id": "9641f456.094b08",
    "type": "http in",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "url": "/red/wink/subscribtions",
    "method": "post",
    "swaggerDoc": "",
    "x": 120,
    "y": 660,
    "wires": [
      [
        "93f3b8dd.f663d8",
        "f94c1551.d35258"
      ]
    ]
  },
  {
    "id": "a25c5bef.964a38",
    "type": "comment",
    "z": "3cc9f29d.c3360e",
    "name": "Section for status  subscription---------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 445.5,
    "y": 518,
    "wires": []
  },
  {
    "id": "701e27a5.bcacf8",
    "type": "comment",
    "z": "3cc9f29d.c3360e",
    "name": "Initialize section-----------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 353.5,
    "y": 14,
    "wires": []
  },
  {
    "id": "ececde34.18bbe",
    "type": "comment",
    "z": "3cc9f29d.c3360e",
    "name": "Weather-------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 393.5,
    "y": 1611,
    "wires": []
  },
  {
    "id": "2ecc3d53.80c162",
    "type": "debug",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 1071.5,
    "y": 1708.0001220703125,
    "wires": []
  },
  {
    "id": "2f97f2dc.00c96e",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "Get Weather",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 575.5,
    "y": 1710,
    "wires": [
      [
        "9ea1cadd.0e6dc8"
      ]
    ]
  },
  {
    "id": "93362f18.69e5",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "600",
    "crontab": "",
    "once": true,
    "x": 107.5,
    "y": 1662,
    "wires": [
      [
        "34d65512.1b699a"
      ]
    ]
  },
  {
    "id": "5f5abdf0.b205a4",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "var newMsg ={\n        \"url\":\"https://api.darksky.net/forecast/\"+context.global.forecastIoApiKey+\"/\"+context.global.HomeLocation.lat+\",\"+context.global.HomeLocation.lon,\n        \"method\": \"GET\"\n}\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 390.5,
    "y": 1710,
    "wires": [
      [
        "2f97f2dc.00c96e"
      ]
    ]
  },
  {
    "id": "8ac87e7b.96198",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "UpdateDevices",
    "func": "//node.warn('name '+msg.payload.name+' DS '+ JSON.stringify(msg.payload.desired_state))\ncontext.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nmsg.statusCode=\"200\";\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 546.5000305175781,
    "y": 677.5,
    "wires": [
      [
        "6a081c79.ae8874",
        "9b59cf.8283063",
        "6cb1f151.d6592",
        "c1757db4.e47b1",
        "aa9a4454.b6dd98",
        "4414c86d.fffe98",
        "207b3a0e.acc2b6",
        "8f2dd829.ec1508",
        "41ecb021.f62bf"
      ]
    ]
  },
  {
    "id": "b120d512.825cb8",
    "type": "comment",
    "z": "3cc9f29d.c3360e",
    "name": "Section for web services---------------------------------------------------------------------------------------------------------------------------------",
    "info": "",
    "x": 423,
    "y": 419.5,
    "wires": []
  },
  {
    "id": "6a081c79.ae8874",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Send message to IFTTT",
    "func": "if (context.global.ifttt){\nvar WinkEvent=\"WinkEvent\"\nvar extra_param=\"\"\nvar Event_desc=\"\"\n\nif (msg.payload.device_manufacturer == \"OwnTracks\"){\n     Event_desc= (msg.payload.last_reading.coordinates);\n}\n\nif('last_reading' in msg.payload && 'temperature' in msg.payload.last_reading){\n    Event_desc= (msg.payload.last_reading.temperature);\n    extra_param=\"temperature\";\n}\n\nif('last_reading' in msg.payload && 'humidity' in msg.payload.last_reading){\n    Event_desc= (msg.payload.last_reading.humidity*100);\n    extra_param=\"humidity\";\n}\n\nif (msg.payload.model_name==\"Motion Sensor\") \n{\n    Event_desc= (msg.payload.last_reading.motion ? \"motion detected\":\"no motion\")\n}\nif (msg.payload.model_name==\"Tripper\") \n{\n    Event_desc= (msg.payload.last_reading.opened ? \"Opened\":\"Closed\")\n}\n\nif ('last_reading' in msg.payload && 'locked' in msg.payload.last_reading) \n{ \n    Event_desc= (msg.payload.last_reading.locked ? \"Locked\":\"Unlocked\")\n}\n\nif (msg.payload.object_type==\"binary_switch\" && (!('powered' in msg.payload.desired_state) || msg.payload.desired_state.powered===false) )\n{\n    Event_desc= (msg.payload.last_reading.powered ? \"On\":\"Off\")\n}\n\nif (msg.payload.object_type==\"garage_doors\")\n{\n    Event_desc= (msg.payload.last_reading.garage_doors==\"0\" ? \"Closed\":\"Opened\")\n}\n\nif (msg.payload.object_type==\"light_bulb\" && !('powered' in msg.payload.desired_state))\n{\n    Event_desc= (msg.payload.last_reading.powered ? \"On\":\"Off\")\n    extra_param=(msg.payload.last_reading.powered ? msg.payload.last_reading.brightness*100 : 0)\n}\nif ('last_reading' in msg.payload &&  'liquid_detected' in msg.payload.last_reading)\n{\n    Event_desc= (msg.payload.last_reading.liquid_detected ? \"Water detected\":\"No water detected\")\n}\n\nif ('last_reading' in msg.payload && 'fired' in msg.payload.last_reading)\n{\n    WinkEvent=msg.payload.name.replace(' ','_');\n    Event_desc='Robot '+msg.payload.name+' fired';\n}\nif (msg.payload.object_type ==\"propane_tanks\")\n{\n    Event_desc= (\"Propane level - \"+msg.payload.last_reading.remaining)\n}\n\nif (msg.payload.object_type ==\"powerstrips\")\n{\n    Event_Desc = msg.payload.outlets[0].name+\" \"+ (msg.payload.outlets[0].powered ? \"On, \":\"Off, \")+msg.payload.outlets[0].name+\" \"+(msg.payload.outlets[1].powered ? \"On\":\"Off\")\n}\n\nif (Event_desc!==\"\")\n{\n var newMsg ={\n                    \"url\":\"https://maker.ifttt.com/trigger/\"+WinkEvent+\"/with/key/\"+context.global.IFTTT_TOKEN,\n                    \"method\": \"POST\",\n                    headers: \n                    {\n                        \"Content-Type\":\"application/json\"\n                    },\n                    payload: \n                    {\"value1\":msg.payload.name,\"value2\":Event_desc,\"value3\":extra_param}\n            }\nnode.send(newMsg);\n}\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 822.5,
    "y": 810.5,
    "wires": [
      [
        "5b0b69ef.87ece8"
      ]
    ]
  },
  {
    "id": "93090bac.b85078",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1197.5,
    "y": 801.5,
    "wires": [
      []
    ]
  },
  {
    "id": "9ea1cadd.0e6dc8",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Get current weather",
    "func": "var pct = function(value) {\n    return ((value > 1.0 ? value : value * 100).toFixed(0) + '%')\n}\nvar dual_temp = function (value) {\n    return (typeof value === 'number' ? (((value -32) / 1.8).toFixed(1) + 'C / '+ value.toFixed(1) + 'F') : '')\n}\n\nvar webIcon = function(icon){\n    if(icon == 'clear-day') { return \"wi-day-sunny\" }\n    if(icon == 'clear-night') { return \"wi-night-clear\" }\n    if(icon == 'rain') { return \"wi-rain\" }\n    if(icon == 'snow') { return \"wi-snow\" }\n    if(icon == 'sleet') { return \"wi-day-sleet\" }\n    if(icon == 'wind') { return \"wi-day-windy\" }\n    if(icon == 'fog') { return \"wi-fog\" }\n    if(icon == 'cloudy') { return \"wi-cloudy\" }\n    if(icon == 'partly-cloudy-day') { return \"wi-day-cloudy\" }\n    if(icon == 'partly-cloudy-night') { return \"wi-night-cloudy\" }\n    if(icon == 'hail') { return \"wi-hail\" }\n    if(icon == 'thunderstorm') { return \"wi-thunderstorm\" }\n    if(icon == 'tornado') { return \"wi-meteor\" }  \n}\n\nvar month = [];\nmonth[0] = \"January\";\nmonth[1] = \"February\";\nmonth[2] = \"March\";\nmonth[3] = \"April\";\nmonth[4] = \"May\";\nmonth[5] = \"June\";\nmonth[6] = \"July\";\nmonth[7] = \"August\";\nmonth[8] = \"September\";\nmonth[9] = \"October\";\nmonth[10] = \"November\";\nmonth[11] = \"December\";\n\nvar weekday = [];\nweekday[0]=  \"Sunday\";\nweekday[1] = \"Monday\";\nweekday[2] = \"Tuesday\";\nweekday[3] = \"Wednesday\";\nweekday[4] = \"Thursday\";\nweekday[5] = \"Friday\";\nweekday[6] = \"Saturday\";\n\nvar currDate= new Date();\nvar currHours=currDate.getHours();\nvar currMins=currDate.getMinutes();\nvar currOffset=currDate.getTimezoneOffset()*-1/60;\n\nif(msg.payload.currently)\n{\ncontext.global.Weather.Offset = (currOffset!=msg.payload.offset ? msg.payload.offset : 0);\ncontext.global.Weather.CloudCover=Math.round(msg.payload.currently.cloudCover*100);\ncontext.global.Weather.WeatherSummary=msg.payload.currently.summary;\n\nif (!('sunTimes' in context.global)) context.global.sunTimes={}\nvar sunTimes = context.global.SunCalc.getTimes(currDate, context.global.HomeLocation.lat, context.global.HomeLocation.lon);\nfor (var t in sunTimes){\n    var tstamp=new Date(sunTimes[t]).getTime();\n    var d=new Date(tstamp+context.global.Weather.Offset*3600000);\ncontext.global.sunTimes[t] =\n    {\n        \"hour\":d.getHours(),\n        \"minute\":d.getMinutes()\n    }\n}\n\ncontext.global.sunTimes.sunset_m_1={\n    \"hour\":context.global.sunTimes.sunset.hour-1,\n    \"minute\":context.global.sunTimes.sunset.minute\n}\n\nvar lDate=new Date(Date.now()+context.global.Weather.Offset*3600000);\nvar Month = month[lDate.getMonth()];\nvar weekDay = weekday[lDate.getDay()];\nvar monthDay = lDate.getDate();\n\nvar date = new Date(msg.payload.currently.time*1000);\nvar hours = date.getHours();\nvar minutes = date.getMinutes();\n//if (currHours==hours){context.global.Weather.Offset=0}\nvar date = new Date(msg.payload.daily.data[0].sunsetTime*1000);\nvar hours = date.getHours();\nvar minutes =date.getMinutes();\ncontext.global.Weather.SunsetHour=hours+context.global.Weather.Offset;\nif (context.global.Weather.SunsetHour<0)\n {\n     context.global.Weather.SunsetHour=24+context.global.Weather.SunsetHour;\n }\ncontext.global.Weather.SunsetMin=minutes;\ncontext.global.Weather.SunsetMinW=(minutes < 10 ? '0'+minutes : minutes);\nvar date = new Date(msg.payload.daily.data[0].sunriseTime*1000);\nvar hours = date.getHours();\nvar minutes =date.getMinutes();\ncontext.global.Weather.SunriseHour=hours+context.global.Weather.Offset;\ncontext.global.Weather.SunriseMin=minutes;\ncontext.global.Weather.SunriseMinW=(minutes < 10 ? '0'+minutes : minutes);\ncontext.global.Weather.outsideTemp=msg.payload.currently.temperature;\ncontext.global.Weather.PrecipationPbb=msg.payload.currently.precipProbability;\ncontext.global.Weather.HumidityOutside=msg.payload.currently.humidity;\ncontext.global.Weather.DateName=' '+weekDay+', '+Month+' '+monthDay+'.   Wink API @'+(typeof(context.global.winkState.winkAPI)!=='undefined' ? pct(context.global.winkState.winkAPI) : 'retrieving..');\n\n\ncurrHours=currHours+context.global.Weather.Offset;\nif (currHours<0)\n {\n     currHours=24+currHours;\n }\n //node.warn(\"time \"+currHours+\":\"+currMins);\nif ((currHours > context.global.Weather.SunriseHour && currHours < context.global.Weather.SunsetHour) || (currHours==context.global.Weather.SunsetHour && currMins <context.global.Weather.SunsetMin))\n{\n    var timeFrame=\"DAY\";\n}\nelse {\n    var timeFrame=\"NIGHT\";\n}\ncontext.global.Weather.currently=msg.payload.currently;\ncontext.global.Weather.timeframe=timeFrame;\ncontext.global.Weather.currently.dual_temp=dual_temp(context.global.Weather.currently.temperature);\ncontext.global.Weather.currently.humidity_pct=pct(context.global.Weather.currently.humidity);\ncontext.global.Weather.currently.clouds_pct=pct(context.global.Weather.currently.cloudCover);\ncontext.global.Weather.sun_data='Sunrise - Sunset: '+context.global.Weather.SunriseHour+':'+context.global.Weather.SunriseMinW+' - '+context.global.Weather.SunsetHour+':'+context.global.Weather.SunsetMinW\ncontext.global.Weather.currently.web_icon=webIcon(context.global.Weather.currently.icon);\ncontext.global.Weather.sunTimes=context.global.sunTimes;\n\n}\nif (msg.payload.daily){\n context.global.Weather.daily=[];\n msg.payload.daily.data.forEach(function(wday){\n    var wDate=new Date(wday.time*1000+context.global.Weather.Offset*3600000);\n    var wMonth = month[wDate.getMonth()];\n    var wDay = weekday[wDate.getDay()];\n    var wmonthDay = wDate.getDate();\n    var icon = webIcon(wday.icon)\n    context.global.Weather.daily.push({\n        \"month\":wMonth,\n        \"weekday\":wDay,\n        \"wmonthDay\":wmonthDay,\n        \"web_icon\":icon,\n        \"summary\":wday.summary,\n        \"temperatureMin\":dual_temp(wday.temperatureMin),\n        \"temperatureMax\":dual_temp(wday.temperatureMax),\n        \"humidity\":pct(wday.humidity),\n        \"cloudCover\":pct(wday.cloudCover)\n    });\n });\n}\nnewMsg = {\n    payload: {\n     weather:context.global.Weather\n    }\n};\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 859.5,
    "y": 1709.5,
    "wires": [
      [
        "2ecc3d53.80c162",
        "cd3e6e9e.38adf"
      ]
    ]
  },
  {
    "id": "41ecb021.f62bf",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Switch t-stat back to home mode if motion is detected",
    "func": "var canControl = (typeof(context.global.motionAdjustTstat)!=='undefined' ? context.global.motionAdjustTstat : 'true');\nif (msg.payload.object_type =='thermostat' && ((\"users_away\" in msg.payload.last_reading) && typeof(msg.payload.last_reading.users_away)!=='undefined' && msg.payload.last_reading.users_away) && canControl){\n    if (context.global.winkState.groups['.sensors'].motion.or || context.global.checkPresence()){\n    var newMsg ={\n    \"url\":\"https://winkapi.quirky.com/thermostats/\"+msg.payload.object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":true,\n            \"users_away\":('VacationMode' in context.global && context.global.VacationMode ? true:false)\n                }\n            }\n        };\n    node.send(newMsg);\n    }\n}\nif ((\"last_reading\" in msg.payload) && (\"motion\" in msg.payload.last_reading) && typeof(msg.payload.last_reading.motion!=='undefined') && msg.payload.last_reading.motion && canControl){\n    for (var key in context.global.winkState.thermostats){\n        if ((\"users_away\" in context.global.winkState.thermostats[key]) && typeof(context.global.winkState.thermostats[key].users_away)!=='undefined' && context.global.winkState.thermostats[key].users_away){\n               var newMsg ={\n                \"url\":\"https://winkapi.quirky.com/thermostats/\"+context.global.winkState.thermostats[key].object_id,\n                \"method\": \"PUT\",\n                headers: {\n                    \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                    \"Content-Type\":\"application/json\"\n                },\n                payload: {\n                    \"desired_state\": {\n                     \"powered\":true,\n                    \"users_away\":false\n                }\n            }\n        };\n    node.send(newMsg); \n    }\n  }\n}\n\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 884.8958282470703,
    "y": 854.1111145019531,
    "wires": [
      [
        "6ca91b68.a64b44"
      ]
    ]
  },
  {
    "id": "6ca91b68.a64b44",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1195.8959503173828,
    "y": 854.1111145019531,
    "wires": [
      []
    ]
  },
  {
    "id": "4325c84b.846f98",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "if (typeof context.global.InitialStateKey !=='undefined' && context.global.InitialStateKey !==\"\"){\ncontext.global.InitialStateBucket=\"WinkDataISN\"\nvar newMsg={\n  method: 'POST',\n  url: 'https://groker.initialstate.com/api/buckets',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-IS-AccessKey': context.global.InitialStateKey,\n    'Accept-Version': '~0'\n  },\n    payload: \n    {\n    \"bucketKey\": context.global.InitialStateBucket,\n    \"bucketName\": \"Wink Data Node Red\"\n}\n}\nnode.send(newMsg);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 493.89581298828125,
    "y": 1849.3333740234375,
    "wires": [
      [
        "d3b994c4.72d3b8"
      ]
    ]
  },
  {
    "id": "7747dec2.b1c9a",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": true,
    "x": 151.8957977294922,
    "y": 1850.3333740234375,
    "wires": [
      [
        "c9b7c352.1b586"
      ]
    ]
  },
  {
    "id": "d3b994c4.72d3b8",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 657,
    "y": 1848.4444580078125,
    "wires": [
      [
        "c62de0e0.aa87c"
      ]
    ]
  },
  {
    "id": "c62de0e0.aa87c",
    "type": "debug",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "true",
    "x": 813,
    "y": 1849.4444580078125,
    "wires": []
  },
  {
    "id": "24bbda9d.af0db6",
    "type": "comment",
    "z": "3cc9f29d.c3360e",
    "name": "IS State bucket initialization -------------------------------------------------------------------------------------------------------------------------------",
    "info": "modfy bluemix-settings.json and add following line:\n\ncontext.global.InitialStateKey=\"<your initial state api key>\"",
    "x": 456.5,
    "y": 1803,
    "wires": []
  },
  {
    "id": "ef1dad5d.3c9a7",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1161.8958129882812,
    "y": 757.888916015625,
    "wires": [
      []
    ]
  },
  {
    "id": "9b59cf.8283063",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Is State",
    "func": "if (typeof context.global.InitialStateKey !=='undefined'  && context.global.InitialStateKey !==\"\"){\nvar keyName;\nvar keyValue;\nvar winkObjectType=(msg.payload.object_type=='binary_switch' ? msg.payload.object_type+'es' : msg.payload.object_type+'s')\nvar pct = function(value) {\n    return ((value > 1 ? value : (value * 100).toFixed(0)) + '%')\n};\nvar dual_temp = function (value) {\n    return (typeof value === 'number' ? (value.toFixed(1) + 'C / ' + ((value * 1.8) + 32).toFixed(1) + 'F') : '')\n};\n\nvar dollars = function (value) {\n    return (typeof value === 'number' ? (value / 100).toFixed(2) : '')\n}\n\nvar getUvIndex = function(val){\n    var value;\n    value=parseInt(val);\n    return value+' '+(value <=2 ? 'Minimal' : value <=4 ? 'Low' : value<=6 ? 'Moderate' : value<=9 ? 'High!' : 'Very High!');\n}\n\nvar GenValueText = function (property,value){\n    text =  { co_detected     : (value ? 'CO DETECTED'     : '')\n            , fault           : (value ? 'FAULT DETECTED'  : '')\n            , liquid_detected : (value ? 'LEAK DETECTED'   : '')\n            , locked          : (value ? 'LOCKED'          : 'UNLOCKED')\n            , loudness        : (value ? 'LOUD'            : '')\n            , noise           : (value ? 'NOISY'           : '')\n            , motion          : (value ? 'MOTION'          : '')\n            , opened          : (value ? 'OPEN'            : 'CLOSED')\n            , presence        : (value ? 'PRESENCE'        : '')\n            , smoke_detected  : (value ? 'SMOKE DETECTED'  : '')\n            , tamper_detected : (value ? 'TAMPER DETECTED' : '')\n            , vibration       : (value ? 'VIBRATION'       : '')\n            , coordinates     : value\n            , distanceFromHome: value+' meters'\n            , uvindex         : getUvIndex(value)\n            , pressure        : value +' mBar'\n            , luminance       : value+' cd/m2'\n            , illuminance       : value+' lux'\n            , battery         : pct(value)\n            , brightness      : pct(value)\n            , co_severity     : pct(value)\n            , humidity        : pct(value)\n            , smoke_severity  : pct(value)\n            , remaining       : pct(value)\n            , temperature     : value\n            }[property]\n    if (text === '') text = 'OK'\n    return text;\n}\n\nvar sendMsg = function(key,value){\n    var newMsg={\n  method: 'POST',\n  url: 'https://groker.initialstate.com/api/events',\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"X-IS-AccessKey\": context.global.InitialStateKey,\n    \"X-IS-BucketKey\": context.global.InitialStateBucket,\n    \"Accept-Version\": '~0'\n  },\n    payload: \n    {\n    \"key\": key,\n    \"value\":value\n}\n}\nnode.send(newMsg);\n}\n if (context.global.DEBUG){\n    node.warn(winkObjectType);\n    node.warn(msg.payload.name);\n}\nvar ds=msg.payload.desired_state;\nvar lr=msg.payload.last_reading;\nswitch (winkObjectType){\n    case 'binary_switches':\n        if (!('powered' in ds) || ds.powered===lr.powered){\n        keyName=msg.payload.name+' Brightness';\n        keyValue=(msg.payload.last_reading.powered ? 100: 0);\n        sendMsg(keyName,keyValue);\n        }\n        break;\n    case 'light_bulbs':\n        if (!('powered' in ds) || ('powered' in ds && ds.powered==lr.powered && ds.brightness==lr.brightness)){\n        keyName=msg.payload.name+' Brightness';\n        keyValue=(msg.payload.last_reading.powered ? pct(msg.payload.last_reading.brightness) : 0);\n        sendMsg(keyName,keyValue);\n        if ('hue' in  lr){\n            keyName=msg.payload.name+' Hue';\n            keyValue=(lr.hue);\n            sendMsg(keyName,keyValue);\n            keyName=msg.payload.name+' Saturation';\n            keyValue=(lr.saturation);\n            sendMsg(keyName,keyValue);\n        }\n        }\n        break;\n    case 'locks':\n        keyName=msg.payload.name+' Status';\n        keyValue= GenValueText('locked',msg.payload.last_reading.locked);\n        sendMsg(keyName,keyValue);\n        break;\n    case 'thermostats':\n        keyName=msg.payload.name+' Temperature';\n        keyValue=msg.payload.last_reading.temperature;\n        sendMsg(keyName,keyValue);\n        break;\n case 'sensor_pods':\n        for (var i=0; i< context.global.winkDevCap[msg.payload.name].fields.length; i++){\n        sensor_type=context.global.winkDevCap[msg.payload.name].fields[i].field;\n        keyName=msg.payload.name+' '+context.global.winkDevCap[msg.payload.name].fields[i].field.replace(\"_\",\" \");\n        keyValue=GenValueText(context.global.winkDevCap[msg.payload.name].fields[i].field,context.global.winkState.sensor_pods[msg.payload.name][sensor_type]);\n        sendMsg(keyName,keyValue);\n        }\n        break;\n    case 'propane_tanks':\n        keyName=msg.payload.name+' Propane';\n        keyValue= GenValueText('remaining',msg.payload.last_reading.remaining);\n        sendMsg(keyName,keyValue);\n        break;\n        \n    case 'cameras':\n        //node.warn('camera subscription event '+msg.payload.last_reading.motion)\n        keyName=msg.payload.name+' Motion';\n        keyValue= GenValueText('motion',msg.payload.last_reading.motion);\n        sendMsg(keyName,keyValue);\n        break;    \n}\n\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 749.7916259765625,
    "y": 750.77783203125,
    "wires": [
      [
        "bca9da09.fb31c8"
      ]
    ]
  },
  {
    "id": "6cb1f151.d6592",
    "type": "http response",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "x": 789.8958129882812,
    "y": 659.8888854980469,
    "wires": []
  },
  {
    "id": "c1757db4.e47b1",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Snapshots",
    "func": "if ('camera_motion' in context.global){\nif(context.global.CloudantBkUP && (msg.payload.object_type=='camera' || msg.payload.object_type=='sensor_pod') && ('motion' in msg.payload.last_reading && msg.payload.last_reading.motion===true) && msg.payload.name in context.global.camera_motion)\n{\n    var newMsg1 ={\n    \"url\":context.global.BlueMixUrlBase+'/red/save_images?cam_list='+context.global.camera_motion[msg.payload.name]+'&object_name='+msg.payload.name,\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n    }\n    }\n    node.send(newMsg1);\n}\n}\nif ('VacationMode' in context.global && context.global.VacationMode=='on' && 'cameras' in context.global.winkState){\n    if(context.global.CloudantBkUP && (msg.payload.object_type=='camera' || msg.payload.object_type=='sensor_pod') && ('motion' in msg.payload.last_reading && msg.payload.last_reading.motion===true)){\n        var delay=0;        \n        for (var cam in context.global.winkState.cameras){\n            var newMsg1 ={\n                \"url\":context.global.BlueMixUrlBase+'/red/save_images?cam_list='+cam+'&object_name='+msg.payload.name,\n                \"method\": \"GET\",\n                headers: {\n                    \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n                }\n            }\n            context.global.sendWithTimeout(node,newMsg1,delay);\n            delay+=500;\n        }\n    }\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 753.8958129882812,
    "y": 910.1111450195312,
    "wires": [
      [
        "adf59c52.b7ebc"
      ]
    ]
  },
  {
    "id": "adf59c52.b7ebc",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 941.8958129882812,
    "y": 908.8889465332031,
    "wires": [
      []
    ]
  },
  {
    "id": "aa9a4454.b6dd98",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "SendNamedBasedIfttt",
    "func": "if ('IFTTT_TOKEN' in context.global && context.global.IFTTT_TOKEN!=='undefined' && context.global.ifttt){\nif (msg.payload.object_type=='remote' || (msg.payload.object_type=='sensor_pod' && ('motion' in msg.payload.last_reading || 'opened' in msg.payload.last_reading)) ){\n    var winkEvent=''\n    var lr=msg.payload.last_reading;\n    var oName=msg.payload.name;\n    var oType=msg.payload.object_type\n\n if (oType=='remote') winkEvent = (lr.button_on_pressed ? 'button_on_pressed' : lr.button_off_pressed ? 'button_off_pressed' : lr.button_up_pressed ? 'button_up_pressed' : lr.button_down_pressed ? 'button_down_pressed' :  '')\n else {\n if ('motion' in lr)  winkEvent = (lr.motion ? 'motion_started' : 'motion_ended')\n if ('opened' in lr) winkEvent =  (lr.opened ? 'opened' : 'closed')\n }\n \n if (winkEvent!==''){\n var WinkEvent=oName.replace(' ','_')+'_'+winkEvent;\n var newMsg ={\n                    \"url\":\"https://maker.ifttt.com/trigger/\"+WinkEvent+\"/with/key/\"+context.global.IFTTT_TOKEN,\n                    \"method\": \"POST\",\n                    headers: \n                    {\n                        \"Content-Type\":\"application/json\"\n                    }\n            }\nnode.send(newMsg);\n}\n\n}\n\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 779.8958129882812,
    "y": 961.111083984375,
    "wires": [
      [
        "9e81830a.7b5b3"
      ]
    ]
  },
  {
    "id": "9e81830a.7b5b3",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 986.8958129882812,
    "y": 962.8889770507812,
    "wires": [
      [
        "274bfc19.553ca4"
      ]
    ]
  },
  {
    "id": "274bfc19.553ca4",
    "type": "debug",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 1164.000015258789,
    "y": 962.0000305175781,
    "wires": []
  },
  {
    "id": "b4eea64c.00a578",
    "type": "catch",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "x": 77,
    "y": 1922,
    "wires": [
      [
        "102a9f29.5b5041"
      ]
    ]
  },
  {
    "id": "102a9f29.5b5041",
    "type": "debug",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "error",
    "x": 257,
    "y": 1922,
    "wires": []
  },
  {
    "id": "4414c86d.fffe98",
    "type": "switch",
    "z": "3cc9f29d.c3360e",
    "name": "WS switch",
    "property": "payload.object_type",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "light_bulb",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "binary_switch",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "powerstrip",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "lock",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "group",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "robot",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "garage_door",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "sensor_pod",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "key",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "outputs": 9,
    "x": 625,
    "y": 1121,
    "wires": [
      [
        "40d3e80f.2da788"
      ],
      [
        "eaca541c.a0cdc8"
      ],
      [
        "9ccaf9e9.336c58"
      ],
      [
        "f5b02872.8e7228"
      ],
      [
        "3d62f0f7.68022"
      ],
      [
        "f9b341c2.f6524"
      ],
      [
        "4944e4e.3c7521c"
      ],
      [
        "98a14135.4c7af"
      ],
      []
    ]
  },
  {
    "id": "40d3e80f.2da788",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "var bulbMsg={};\nvar Wmsg = context.global.render_home_components('@lights');\nvar ds=msg.payload.desired_state;\nvar lr=msg.payload.last_reading;\nif (Wmsg.payload.home_components.length>0) {\n    node.send(Wmsg);\n    var bulb=context.global.winkState.light_bulbs[msg.payload.name];\n    var ds=msg.payload.desired_state || false;\n    var lr=msg.payload.last_reading;\n    if ('color_model' in bulb || 'hue' in bulb) {\n        var color=context.global.tinycolor('hsv '+(bulb.eco_system=='LIFX' ? bulb.hue : bulb.hue*360) +' '+bulb.saturation+' '+bulb.brightness);\n        var hexColor=color.toHexString();\n    }\n    if (!(ds) || ( (!('powered' in ds) && !('color_model' in ds)) || ('powered' in ds && ds.powered==lr.powered && ds.brightness==lr.brightness))){\n    bulbMsg.payload={\n                type:'light_bulbs',\n                name:bulb.name,\n                object_id:bulb.object_id,\n                powered:bulb.powered,\n                clr_id:'.clr-'+bulb.object_id,\n                isColor: (('color_model' in bulb || 'hue' in bulb) ? true:false),\n                Color:(('color_model' in bulb || 'hue' in bulb) ? hexColor : null),            \n                brightness:Math.round(bulb.brightness*100)\n    };\n    //bulbMsg.payload=context.global.encrypt(JSON.stringify(Message));\n    return bulbMsg;\n}\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 884.0000152587891,
    "y": 1077.0000305175781,
    "wires": [
      [
        "cd3e6e9e.38adf"
      ]
    ]
  },
  {
    "id": "eaca541c.a0cdc8",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "var binSMsg={}\nvar Wmsg = context.global.render_home_components('@lights');\nvar ds=msg.payload.desired_state;\nvar lr=msg.payload.last_reading;\nif (Wmsg.payload.home_components.length>0) {\n    node.send(Wmsg);\n    if (msg.payload.name in context.global.winkState.binary_switches) {\n        var bulb=context.global.winkState.binary_switches[msg.payload.name];\n        var ds=msg.payload.desired_state;\n        var lr=msg.payload.last_reading;\n        if (!('powered' in ds) || ds.powered===lr.powered){\n        binSMsg.payload={\n                    type:'binary_switches',\n                    name:bulb.name,\n                    object_id:bulb.object_id,\n                    powered:bulb.powered,\n                    brightness:(bulb.powered ? 100:0)\n                }\n        return binSMsg;\n        }\n    }\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 886,
    "y": 1115.0000610351562,
    "wires": [
      [
        "cd3e6e9e.38adf"
      ]
    ]
  },
  {
    "id": "9ccaf9e9.336c58",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "for (var i=0;i<msg.payload.outlets.length;i++){\nvar binSMsg={}    \nvar bulb=context.global.winkState.powerstrips[msg.payload.outlets[i].name];\nif (!('powered' in bulb.desired_state) || bulb.desired_state.powered===false){\nbinSMsg.payload={\n            type:'outlets',    \n            name:bulb.name,\n            object_id:bulb.object_id,\n            powered:bulb.powered,\n            brightness:(bulb.powered ? 100:0)\n        }\nnode.send(binSMsg);\n}\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 885.0000152587891,
    "y": 1148.0000305175781,
    "wires": [
      [
        "cd3e6e9e.38adf"
      ]
    ]
  },
  {
    "id": "f5b02872.8e7228",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "var lockMsg={}\nvar lock=context.global.winkState.locks[msg.payload.name];\nvar ds=msg.payload.desired_state;\nvar lr=msg.payload.last_reading;\nif (!('locked' in ds) || ds.locked===lr.locked){\nlockMsg.payload={\n            type:'locks',    \n            name:lock.name,\n            object_type:lock.object_type,            \n            object_id:lock.object_id,\n            locked:lock.locked\n    }\n//bulbMsg.payload=context.global.encrypt(JSON.stringify(Message));\nreturn lockMsg;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 887.0000152587891,
    "y": 1188.0000305175781,
    "wires": [
      [
        "cd3e6e9e.38adf"
      ]
    ]
  },
  {
    "id": "34aee83d.7ecf68",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 479,
    "y": 924.0000610351562,
    "wires": [
      []
    ]
  },
  {
    "id": "207b3a0e.acc2b6",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "UI Notifications",
    "func": "var pct = function(value) {\n    return ((value > 1.0 ? value : value * 100).toFixed(0) + '%');\n}\nfunction send_ui_note(n_type,n_timeout,n_message,obj_id){\n    var obj=obj_id||null;\n    var pmsg={};\n    var newMsg={\n        url:context.global.BlueMixUrlBase+'/red/notifications',\n        \"method\": \"POST\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        },\n        payload:{\n            \"id\":obj,\n            \"type\":n_type,\n            \"message\":n_message,\n            \"timeout\":n_timeout\n            }\n        };\n        node.send(newMsg);\n        if ('PushBulletKey' in context.global){\n            if (('VacationMode' in context.global && context.global.VacationMode=='on') || ( 'SensorsNotificationM' in context.global && context.global.SensorsNotificationM && (n_type=='warning' || n_type=='error'))){\n                pmsg=context.global.sendViaPushBullet('note','WNR-'+n_type,n_message);\n                node.send(pmsg);\n            }\n            if (/*('VacationMode' in context.global && context.global.VacationMode=='on') ||*/ ('LightsNotificationM' in context.global && context.global.LightsNotificationM && (n_type=='notification' || n_type=='information'))){\n                pmsg=context.global.sendViaPushBullet('note','WNR-'+n_type,n_message);\n                node.send(pmsg);\n            }\n        }\n}\nif ('last_reading' in msg.payload){\n    var Obj_name=msg.payload.name;\n    var Obj_type=msg.payload.object_type;\n    var Obj_id=msg.payload.object_id;\n    var lr = msg.payload.last_reading;\n    var ds = msg.payload.desired_state || {};\n/*    node.warn('Name: '+Obj_name+' type:'+Obj_type)\n    node.warn(lr);\n    node.warn(ds);\n*/\n    if ('position' in lr) send_ui_note('warning',3600000,Obj_name+(lr.position===1 ? ' opened': lr.position===0 ? ' closed':' opening...'),null);\n    if (Obj_type!=='binary_switch' && 'opened' in lr && lr.opened) send_ui_note('warning',3600000,Obj_name+' opened',Obj_id);\n    if ('locked' in lr && !lr.locked && (!('locked' in ds)  || ds.locked===lr.locked) ) send_ui_note('warning',3600000,Obj_name+' unlocked',Obj_id);\n    if ('occupied' in lr && lr.occupied)  send_ui_note('warning',3600000,Obj_name+' occupied',Obj_id);\n    if ('motion' in lr && lr.motion)  send_ui_note('warning',3600000,Obj_name+' motion detected',Obj_id);\n    if ('button_pressed' in lr && lr.button_pressed)  send_ui_note('warning',3600000,Obj_name+' button pressed',null);\n    if ('tamber_detected' in lr && lr.tamper_detected) send_ui_note('error',3600000,Obj_name+' tamper detected!!!');\n    if ('battery' in lr && lr.battery!==null && lr.battery>0) ((lr.battery>=0.33 && lr.battery < 0.5) ? send_ui_note('information',false,Obj_name+' battery level '+ pct(lr.battery)) : (lr.battery>= 0.1 && lr.battery <0.33) ? send_ui_note('warning',60000,Obj_name+' battery level '+ pct(lr.battery)) : lr.battery<0.1 ? send_ui_note('error',false,Obj_name+' battery level '+ pct(lr.battery)) : null);\n    if ('remaining' in lr) ((lr.remaining>=0.33 && lr.remaining < 0.5) ? send_ui_note('information',false,Obj_name+' propane level '+ pct(lr.remaining)) : (lr.remaining>= 0.1 && lr.remaining <0.33) ? send_ui_note('warning',60000,Obj_name+' propane level '+ pct(lr.remaining)) : lr.remaining<0.1 ? send_ui_note('error',false,Obj_name+' propane level '+ pct(lr.remaining)) : null);\n    if ('liquid_detected' in lr && lr.liquid_detected) send_ui_note('error',false,Obj_name+' liquid detected!!!');\n    if ('smoke_detected' in lr && lr.smoke_detected) send_ui_note('error',false,Obj_name+' smoke detected!!!<br>Severity: '+pct(lr.co_severity));\n    if ('co_detected' in lr && lr.smoke_detected) send_ui_note('error',false,Obj_name+' smoke detected!!!<br>Severity: '+pct(lr.co_severity));\n    if ('enabled' in lr) send_ui_note('information',200000,'Robot \"'+Obj_name+(lr.enabled ? '\" enabled' : '\" disabled'),Obj_id);\n    if ('fired' in lr) send_ui_note('warning',300000,'Robot \"'+Obj_name+'\" fired',Obj_id);\n    if ('mode' in lr && Obj_type!='thermostat') send_ui_note('warning',300000,'Canary \"'+Obj_name+'\" set to '+lr.mode+' mode',Obj_id);\n    if ('garage_doors' in lr) send_ui_note('warning',300000,Obj_name+(lr.garage_doors==\"0\" ? \" Closed\":\" Opened\"),Obj_id);    \n    if ((Obj_type=='light_bulb' || (Obj_type=='binary_switch' && !('opened' in lr) ) || Obj_type=='powerstrip') && context.global.LightsNotification && (!('powered' in ds) || ('powered' in ds && ds.powered==lr.powered && (Obj_type=='light_bulb'? ds.brightness==lr.brightness : true)))) {\n        send_ui_note('notification',\"90000\",Obj_name+(lr.powered ? \" On\":\" off\") + ('brightness' in lr && lr.powered ? ' @'+pct(lr.brightness) : ''),Obj_id);\n    }\n    if (Obj_type=='binary_switch' && 'opened' in lr /*&& (!('opened' in ds) )*/) {\n        send_ui_note('notification',\"90000\",Obj_name+(lr.opened ? \" Opened\":\" Closed\"),Obj_id);\n    }    \n    \n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 766,
    "y": 703.0000305175781,
    "wires": [
      [
        "5de4ce5f.f9f5",
        "bcb7c158.9f15c"
      ]
    ]
  },
  {
    "id": "5de4ce5f.f9f5",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1003.0000152587891,
    "y": 706.0000305175781,
    "wires": [
      [
        "6d8b2492.b48afc"
      ]
    ]
  },
  {
    "id": "3d994e7c.6c2362",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": true,
    "x": 80,
    "y": 120,
    "wires": [
      [
        "e81286b4.f15858",
        "202cd37b.ee8bdc"
      ]
    ]
  },
  {
    "id": "ef07b1e6.7626e",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "01 00 * * *",
    "once": false,
    "x": 103,
    "y": 1714,
    "wires": [
      [
        "5f5abdf0.b205a4"
      ]
    ]
  },
  {
    "id": "3d62f0f7.68022",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "var Wmsg = context.global.render_home_components(msg.payload.name);\nif (Wmsg.payload.home_components.length>0) return Wmsg\nelse return;",
    "outputs": 1,
    "noerr": 0,
    "x": 889,
    "y": 1226,
    "wires": [
      [
        "cd3e6e9e.38adf"
      ]
    ]
  },
  {
    "id": "d7c013a5.3e53a",
    "type": "http in",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "url": "/red/notifications",
    "method": "post",
    "swaggerDoc": "",
    "x": 691,
    "y": 1422.0000610351562,
    "wires": [
      [
        "502df85b.23ab18"
      ]
    ]
  },
  {
    "id": "502df85b.23ab18",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nvar newMsg={}    \nnewMsg.payload={\n    'id':msg.payload.id||null,\n    'alertType':msg.payload.type,\n    'timeout':msg.payload.timeout || false,\n    'message':msg.payload.message\n }\nmsg.res.statuCode=200;\nnode.send([msg, newMsg]);\n} else { \n    msg.res.statusCode=200\n    node.send([msg]);\n}",
    "outputs": "2",
    "noerr": 0,
    "x": 885,
    "y": 1415,
    "wires": [
      [
        "19865043.57b55"
      ],
      [
        "cd3e6e9e.38adf"
      ]
    ]
  },
  {
    "id": "19865043.57b55",
    "type": "http response",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "x": 1103,
    "y": 1400,
    "wires": []
  },
  {
    "id": "60d5117c.b1838",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "    var newMsg1 ={\n    \"url\":context.global.BlueMixUrlBase+'/red/update_app_cfg',\n    \"method\": \"POST\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n    },\n    payload:{\n       db_mode:\"read\",\n       restore_wink : true\n    }\n    }\nreturn newMsg1;",
    "outputs": 1,
    "noerr": 0,
    "x": 530,
    "y": 120,
    "wires": [
      [
        "6df3614d.17d8b"
      ]
    ]
  },
  {
    "id": "6df3614d.17d8b",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 690,
    "y": 120,
    "wires": [
      [
        "1962051c.08bd0b"
      ]
    ]
  },
  {
    "id": "27509b3a.d60094",
    "type": "http in",
    "z": "3cc9f29d.c3360e",
    "name": "wscomms",
    "url": "/red/wscomms",
    "method": "post",
    "swaggerDoc": "",
    "x": 733.5,
    "y": 1017.0000610351562,
    "wires": [
      [
        "bcf7b7fe.2ef928"
      ]
    ]
  },
  {
    "id": "bcf7b7fe.2ef928",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FREEBOARD_TOKEN){\nreturn msg;\n} else { \nreturn;\n}",
    "outputs": "1",
    "noerr": 0,
    "x": 886.5000152587891,
    "y": 1038.0000305175781,
    "wires": [
      [
        "59fee57e.5c61cc",
        "cd3e6e9e.38adf"
      ]
    ]
  },
  {
    "id": "59fee57e.5c61cc",
    "type": "http response",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "x": 1051.5,
    "y": 1019.0000610351562,
    "wires": []
  },
  {
    "id": "cd3e6e9e.38adf",
    "type": "websocket out",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "server": "db7a5fe0.c5033",
    "client": "",
    "x": 1174.000015258789,
    "y": 1101.0000305175781,
    "wires": []
  },
  {
    "id": "c8316025.5e236",
    "type": "http response",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "x": 638.5,
    "y": 552,
    "wires": []
  },
  {
    "id": "f9b341c2.f6524",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "var robotMsg={}\nvar robot=context.global.winkState.robots[msg.payload.name];\nvar n=msg.payload.name;\nvar ds=msg.payload.desired_state;\nvar lr=msg.payload.last_reading;\nif (n in context.global.winkState.robots && (!('enabled' in ds) || ds.enabled===lr.enabled)){\nrobotMsg.payload={\n            type:'robots',    \n            name:robot.name,\n            object_id:robot.object_id,\n            enabled:robot.enabled\n    }\n//bulbMsg.payload=context.global.encrypt(JSON.stringify(Message));\nreturn robotMsg;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 887.5,
    "y": 1265,
    "wires": [
      [
        "cd3e6e9e.38adf"
      ]
    ]
  },
  {
    "id": "4944e4e.3c7521c",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "var Wmsg = context.global.render_home_components(msg.payload.object_type);\nvar ds=msg.payload.desired_state;\nvar lr=msg.payload.last_reading;\nif (Wmsg.payload.home_components.length>0) {\n    node.send(Wmsg);\n    var lockMsg={}\n    var lock=context.global.winkState.garage_doors[msg.payload.name];\n//    if ('moving' in lr && !lr.moving){\n    if (!('position' in ds) ||('position' in ds && (lr.position==ds.position))){\n        lockMsg.payload={\n            type:'garage_doors',            \n                name:lock.name,\n                object_id:lock.object_id,\n                object_type:lock.object_type,\n                locked:(lock.position>0 ? false:true),\n                not_locked:(lock.position>0 ? true:false)\n        }\n        node.send(lockMsg);\n    }\n}\nelse return;",
    "outputs": 1,
    "noerr": 0,
    "x": 887.5,
    "y": 1304,
    "wires": [
      [
        "cd3e6e9e.38adf"
      ]
    ]
  },
  {
    "id": "93f3b8dd.f663d8",
    "type": "delay",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "20",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 347.5,
    "y": 705,
    "wires": [
      [
        "8ac87e7b.96198"
      ]
    ]
  },
  {
    "id": "40c20460.6bb54c",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Get OAuth Tocken",
    "func": "var uid=context.global.WinkUser.uid;\nvar pwd=context.global.WinkUser.pwd;\nvar w1=context.global.wnr.w1;\nvar w2=context.global.wnr.w2;\nvar ifUk=(('wink_id' in context.global && context.global.wink_id!=='') ? true:false);\nvar newMsg ={\n    \"url\":\"https://api.wink.com/oauth2/token\",\n    \"method\": \"POST\",\n    headers: {\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"client_id\":(ifUk ? context.global.wink_id : context.global.genKey(w1)),\n        \"client_secret\":(ifUk ? context.global.wink_secret : context.global.genKey(w2)),\n        \"username\": uid,\n        \"password\": pwd,\n        \"grant_type\": \"password\"\n    }\n}\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 403.5,
    "y": 54,
    "wires": [
      [
        "2148736c.eaa53c"
      ]
    ]
  },
  {
    "id": "99c2a01a.22c0f",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "CheckResposeCode",
    "func": "if (typeof context.global.WinkSubscriptions === 'undefined')\n{\n    context.global.WinkSubscriptions = {};\n}\nif (msg.statusCode==202)\n{\n    node.warn(\"Subscription ID: \"+msg.payload.data.subscription_id);\n    context.global.WinkSubscriptions[msg.payload.data.subscription_id]={\n        \"subscription_id\": msg.payload.data.subscription_id,\n        \"url_base\":msg.payload.data.topic,\n        \"callback\":msg.payload.data.callback\n    }\n}\nelse\n{\n    node.warn(\"Subscription issue. Status: \"+msg.statusCode);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 969.5,
    "y": 367.0000305175781,
    "wires": [
      []
    ]
  },
  {
    "id": "ecb49b67.38bb58",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 774.5,
    "y": 373,
    "wires": [
      [
        "99c2a01a.22c0f"
      ]
    ]
  },
  {
    "id": "47ed245e.84f53c",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Prepare Wink devices subscription request",
    "func": "var baseUrl = \"https://api.wink.com/\";\nvar callbackUrl=context.global.BlueMixUrlBase+\"/red/wink/subscribtions\";\n   for (var winkDevice in context.global.winkState)\n    {\n        if (winkDevice!=\"linked_services\")\n        {\n            var deviceUrl=baseUrl+winkDevice;\n            for (var winkDeviceName in context.global.winkState[winkDevice])\n            {\n                deviceId=context.global.winkState[winkDevice][winkDeviceName].object_id;\n                node.warn(winkDeviceName+\" \"+deviceId);\n                var newMsg ={\n                    \"url\":baseUrl+\"/\"+(winkDevice=='canaries' ? 'cameras' : winkDevice)+\"/\"+deviceId+\"/subscriptions\",\n                    \"method\": \"POST\",\n                    headers: {\n                        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\",\n                        \"Content-Type\":\"application/json\"\n                    },\n                    payload: {\n                        \"callback\": callbackUrl\n                    }\n                };\n                node.send(newMsg);\n            }\n        }\n    }\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 506.5001220703125,
    "y": 374,
    "wires": [
      [
        "ecb49b67.38bb58"
      ]
    ]
  },
  {
    "id": "e97583e8.5cf79",
    "type": "delay",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "pauseType": "delay",
    "timeout": "45",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 221.4999542236328,
    "y": 376,
    "wires": [
      [
        "47ed245e.84f53c"
      ]
    ]
  },
  {
    "id": "ea28239d.a4be1",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "str",
    "repeat": "43200",
    "crontab": "",
    "once": true,
    "x": 50,
    "y": 360,
    "wires": [
      [
        "e97583e8.5cf79"
      ]
    ]
  },
  {
    "id": "4842c398.8c9bcc",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "str",
    "repeat": "",
    "crontab": "00 2 * * *",
    "once": false,
    "x": 55.5,
    "y": 47,
    "wires": [
      [
        "202cd37b.ee8bdc"
      ]
    ]
  },
  {
    "id": "202cd37b.ee8bdc",
    "type": "delay",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "pauseType": "delay",
    "timeout": "20",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 204,
    "y": 47,
    "wires": [
      [
        "40c20460.6bb54c",
        "70b22b4c.84dfc4"
      ]
    ]
  },
  {
    "id": "2148736c.eaa53c",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 580.5,
    "y": 47,
    "wires": [
      [
        "cc7646d9.f2c518"
      ]
    ]
  },
  {
    "id": "cc7646d9.f2c518",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "DefineGlobalTocken",
    "func": "// sample function that stores wink token in a global variable so other api calls\n//can use that\nif (msg.statusCode==200){\ncontext.global.WinkToken=msg.payload.data.access_token;\nnode.log(context.global.WinkToken);\nvar msg ={ \"payload\":\"Done\"}\nreturn msg;\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 771.5,
    "y": 64,
    "wires": [
      [
        "79afcf9c.a0558"
      ]
    ]
  },
  {
    "id": "79afcf9c.a0558",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Prepare HTTPS requests by device type",
    "func": "context.global.cleanWinkState();\nvar newMsg1 ={\n    \"url\":\"https://api.wink.com/users/me/wink_devices\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\"\n    }\n}\nvar newMsg2 ={\n    \"url\":\"https://api.wink.com/users/me/linked_services\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken\n       // \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/3.1.0\"\n }\n\n}\n\nvar newMsg3 ={\n    \"url\":\"https://api.wink.com/users/me/groups\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\"\n }\n\n}\n\nvar newMsg4 ={\n    \"url\":\"https://api.wink.com/users/me/scenes\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\"\n  }\n}\n\nvar newMsg5 ={\n    \"url\":\"https://api.wink.com/users/me/robots\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\"\n  }\n}\n\nvar newMsg6 ={\n    \"url\":\"https://api.wink.com/users/me/keys\",\n    \"method\": \"GET\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\"\n  }\n}\n\nreturn [newMsg1,newMsg2,newMsg3,newMsg4,newMsg5,newMsg6];\n//return [newMsg1,newMsg2,newMsg3,newMsg4,newMsg5,newMsg6,newMsg7,newMsg8,newMsg9,newMsg10,newMsg11];\n",
    "outputs": "6",
    "noerr": 0,
    "x": 1062.5,
    "y": 53,
    "wires": [
      [
        "3266ccf2.169674"
      ],
      [
        "a333efde.a2a67"
      ],
      [
        "3f9a8364.07834c"
      ],
      [
        "806b3c34.417e3"
      ],
      [
        "612c9dbe.dc7734"
      ],
      [
        "8e0650b.d3555b"
      ]
    ]
  },
  {
    "id": "3266ccf2.169674",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "GetWDevices",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1394.5,
    "y": 41,
    "wires": [
      [
        "cc00beaa.13bac"
      ]
    ]
  },
  {
    "id": "a333efde.a2a67",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "GetWServices",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1373.5,
    "y": 82.5,
    "wires": [
      [
        "6a3c37f9.e1ab48"
      ]
    ]
  },
  {
    "id": "3f9a8364.07834c",
    "type": "delay",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "pauseType": "delay",
    "timeout": "15",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 1356,
    "y": 126,
    "wires": [
      [
        "29cdd515.2ada7a"
      ]
    ]
  },
  {
    "id": "806b3c34.417e3",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "GetWScenes",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1369.5,
    "y": 166.5,
    "wires": [
      [
        "b68b9e53.7e3eb"
      ]
    ]
  },
  {
    "id": "612c9dbe.dc7734",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "GetWRobots",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1363.9999542236328,
    "y": 209,
    "wires": [
      [
        "30dfe699.38ba4a"
      ]
    ]
  },
  {
    "id": "cc00beaa.13bac",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "GetDevices",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nif (\"cameras\" in context.global.winkState){\n    for (var key in context.global.winkState.cameras){\n        if (context.global.winkState.cameras[key].manufacturer_device_model.indexOf(\"dropcam\")!=-1){\n            var newMsg1 ={\n                \"url\":context.global.BlueMixUrlBase+'/red/retrieve_activities?camera_name='+key,\n                \"method\": \"GET\",\n                headers: {\n                    \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n                }\n            }\n            node.send(newMsg1);\n        }\n    }\n}\nnode.warn(\"Device import completed\");\nreturn;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 1694.5000457763672,
    "y": 32.5,
    "wires": [
      [
        "ad0211e6.aca1"
      ]
    ]
  },
  {
    "id": "6a3c37f9.e1ab48",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "GetServices",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "x": 1568.5,
    "y": 82.5,
    "wires": [
      []
    ]
  },
  {
    "id": "29cdd515.2ada7a",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "GetWGroups",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1531.5,
    "y": 121.5,
    "wires": [
      [
        "17dca3ba.86989c"
      ]
    ]
  },
  {
    "id": "17dca3ba.86989c",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "GetGroups",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "x": 1756.5,
    "y": 120.5,
    "wires": [
      []
    ]
  },
  {
    "id": "b68b9e53.7e3eb",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "GetScenes",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "x": 1556.5000457763672,
    "y": 167.5,
    "wires": [
      []
    ]
  },
  {
    "id": "ad0211e6.aca1",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "x": 1857.5625,
    "y": 33.888885498046875,
    "wires": [
      []
    ]
  },
  {
    "id": "30dfe699.38ba4a",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "GetRobots",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 1551,
    "y": 210,
    "wires": [
      []
    ]
  },
  {
    "id": "32f9c767.84f6f8",
    "type": "http in",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "url": "/red/wink_query",
    "method": "post",
    "swaggerDoc": "",
    "x": 104.5,
    "y": 291,
    "wires": [
      [
        "d7bebf93.bdd71",
        "5f5abdf0.b205a4"
      ]
    ]
  },
  {
    "id": "d7bebf93.bdd71",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "if (msg.payload.token ==context.global.FREEBOARD_TOKEN || context.global.getCookie('exchange_token',msg.req.headers.cookie)==context.global.FREEBOARD_TOKEN){\n    context.global.cleanWinkState();\n    msg.statusCode=200;\n    msg.payload=\"aaa\";\n    node.send(msg);\n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 309.5,
    "y": 301,
    "wires": [
      [
        "650f388e.380a08",
        "8235562e.3b5958",
        "40c20460.6bb54c",
        "70b22b4c.84dfc4"
      ]
    ]
  },
  {
    "id": "8235562e.3b5958",
    "type": "http response",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "x": 547.5,
    "y": 278,
    "wires": []
  },
  {
    "id": "650f388e.380a08",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "msg.payload={}\nmsg.payload.token=context.global.FREEBOARD_TOKEN\nmsg.url=context.global.BlueMixUrlBase+\"/red/blueiris\"\nmsg.method=\"POST\"\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 527.5,
    "y": 320,
    "wires": [
      [
        "ee45b5eb.d7e468"
      ]
    ]
  },
  {
    "id": "ee45b5eb.d7e468",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 702.5,
    "y": 320,
    "wires": [
      []
    ]
  },
  {
    "id": "e81286b4.f15858",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "DefineGlobalObjects",
    "func": "//use this function to initialize global variables that can be used in any flow or function\n  /*jshint maxerr: 100000 */\n  /*jshint esversion: 6 */\nif (typeof context.global.ifttt === 'undefined')\n{\n    context.global.ifttt=false;\n}\n\nif (typeof (context.global.PresenceHistory) === 'undefined') context.global.PresenceHistory=[];\n\nif (typeof(context.global.Presence) === 'undefined')\n{\n    context.global.Presence = {};  \n}\n\nif (typeof(context.global.tab_ui_shortcuts) === 'undefined')\n{\n    context.global.tab_ui_shortcuts = [];  \n}\n\nif (typeof context.global.ignoreMotion === 'undefined')\n{\n    context.global.ignoreMotion=false;\n}\nif (typeof context.global.mediaPlaying==='undefined')\n{\n    context.global.mediaPlaying=false;\n}\nif (typeof context.global.Weather === 'undefined')\n{\n    context.global.Weather= {};\n}\nif (!('winkState' in context.global))\n{\n context.global.winkState = {};\n}\n\nif (!('groups' in context.global.winkState))\n{\n context.global.winkState.groups = {};\n}\n\nif (typeof context.global.winkDevCap==='undefined' )\n{\n    context.global.winkDevCap = {};\n}\n\ncontext.global.CheckKeyUsage = function (lockId,range){\n    if ('keys' in context.global.winkState){\n        var n = Math.round(new Date().getTime()/1000.0);\n        if (context.global.DEBUG ) node.warn('Curr TS: '+ n);\n        var key;\n        var key_tsmp=0;\n        for (var k in context.global.winkState.keys){\n            key=context.global.winkState.keys[k];\n            key_tsmp=0;\n            if(key.parent_object_id==lockId){\n                if(key.activity_detected_updated_at!== null) key_tsmp=parseInt(key.activity_detected_updated_at);\n                        if (context.global.DEBUG ) node.warn(key.name);            \n                        if (context.global.DEBUG ) node.warn('key ts:' +key_tsmp);\n                        if (context.global.DEBUG ) node.warn ('diff: '+ (n - key_tsmp) );\n                if (key.activity_detected_updated_at!== null && n - key_tsmp <=range){\n                        if (context.global.DEBUG ) node.warn('key used: '+key.name);   \n                    return key.name;\n                }\n            }\n        }\n    }\n    return null;\n};\n\ncontext.global.MotionOffDelay = function (WinkSensor) {\n    var occurences=0;\n    var timeout=0;\n    if (!context.global.winkState.motionUpdates) return 0;\n    for(i = 0; i<context.global.winkState.motionUpdates.length; i++) \n    {                   \n        if (context.global.winkState.motionUpdates[i].name==WinkSensor && context.global.winkState.motionUpdates[i].motion) occurences++;\n    }\n    if (occurences>4) timeout=30*60*1000;\n    else if (occurences>2) timeout=10*60*1000;\n    else if (occurences>1) timeout= 5*60*1000;\n    else timeout=1;\n        if (context.global.DEBUG ) node.warn(\"Sensor: \"+WinkSensor+\" was active \"+ occurences +\" times recently, timeout \"+timeout);\n    return timeout;\n};\n\n\ncontext.global.pct = function(value) {\n    return ((value > 1.0 ? value : value * 100).toFixed(0) + '%');\n};\n\ncontext.global.send_ui_note = function(n_type,n_timeout,n_message,obj_id){\n    var obj=obj_id||null;\n    try{\n    var newMsg={\n        url:context.global.BlueMixUrlBase+'/red/notifications',\n        \"method\": \"POST\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        },\n        payload:{\n            \"id\":obj,\n            \"type\":n_type,\n            \"message\":n_message,\n            \"timeout\":n_timeout\n            }\n        };\n        return newMsg;\n    }\n    catch (error){\n            if (context.global.DEBUG ) node.warn('send ui note: '+error.message);\n    }\n};\n\ncontext.global.checkPresence = function(mode) {\n    var i=0;\n    mode = (typeof mode !== 'undefined') ?  mode : 'old';\n    if (mode=='old'){\n        if (typeof(context.global.Presence) ==='undefined') return false;\n        for (var key in context.global.Presence){\n            if (context.global.Presence[key].home==='yes' || context.global.Presence[key].home===true) i++;\n        }\n        return (i>0 ? true : false);\n    } else {\n        if ('groups' in context.global.winkState && '@wnrSensors' in context.global.winkState.groups && 'presence' in context.global.winkState.groups['@wnrSensors'] ) {\n            return  context.global.winkState.groups['@wnrSensors'].presence.or;             \n        } else return false;\n    }\n};\n\ncontext.global.isHomeOccupied = function() {\n    if (typeof context.global.winkState.groups['.sensors'].motion!=='undefined'){ motionSensors = context.global.winkState.groups['.sensors'].motion.or; } else { motionSensors = false; }\n    if (typeof context.global.winkState.groups['.sensors'].occupied!=='undefined'){ occupancySensors = context.global.winkState.groups['.sensors'].occupied.or; } else { occupancySensors = false; }\n    return ((motionSensors || occupancySensors || context.global.checkPresence()) ? true : false);\n};\n\n\ncontext.global.isObject=function(val) {\n    if (val === null) { return false;}\n    if (val instanceof Array) {return false;}\n    return ( (typeof (val) === 'function') || (typeof (val) === 'object') );\n};\n\ncontext.global.cleanWinkState=function(){\n    for (var wink_obj in context.global.winkState){\n          if (context.global.isObject(context.global.winkState[wink_obj]) && wink_obj.indexOf('Updates')==-1) {\n            for (var wink_device in context.global.winkState[wink_obj]) {\n               if('eco_system' in context.global.winkState[wink_obj][wink_device] && context.global.winkState[wink_obj][wink_device].eco_system=='WINK'){\n                       if (context.global.DEBUG ) node.warn('               resetting object '+wink_device);\n                   delete context.global.winkState[wink_obj][wink_device];\n               } \n            }\n            if (Object.keys(context.global.winkState[wink_obj]).length===0) delete context.global.winkState[wink_obj];\n        }\n    }\n};\n//searchArray = function(attrArray,attrName,attrKey)\ncontext.global.GetCount = function(deviceList,property){\n    var true_cnt=0,false_cnt=0;\n    for (var dev in deviceList){\n        try {\n            if(dev in context.global.winkDevCap && context.global.searchArray(context.global.winkDevCap[dev].fields,'field',property)){\n                if (property in deviceList[dev])\n                {\n                    deviceList[dev][property] ? true_cnt++ : false_cnt++;\n                }\n            }\n        } catch(e) {\n            node.warn('error for:'+ dev);\n            node.warn(e);\n        }        \n    }\n    return({'true_cnt':true_cnt,'false_cnt':false_cnt});\n}\n\ncontext.global.GetMinMaxAvg = function(deviceList,property){\n    var min=null,max=null,avg=null,sum=null,cnt=0;\n    for (var dev in deviceList){\n        try {\n            if(dev in context.global.winkDevCap && context.global.searchArray(context.global.winkDevCap[dev].fields,'field',property)){\n                if (property in deviceList[dev] && deviceList[dev][property]!== null)\n                {\n                    deviceList[dev][property] = parseFloat(deviceList[dev][property]);\n                    cnt++;\n                    if(min===null){\n                        min=deviceList[dev][property];\n                        max=deviceList[dev][property];\n                        avg=deviceList[dev][property];\n                        sum=deviceList[dev][property];\n                    } else {\n                        \n                    if (deviceList[dev][property] <min)   min=deviceList[dev][property];\n                    if (deviceList[dev][property] >max)   max=deviceList[dev][property];\n                    sum=sum+deviceList[dev][property];\n                    }\n                }\n            }\n        } catch(e) {\n            node.warn('error for:'+ dev);\n            node.warn(e);\n        }\n    }\n    return({'min':min,'max':max,'avg':sum/cnt});\n};\n\n\n\ncontext.global.GenGroup = function(groupName,property,device,type){\n    var tstmp = new Date();\n    if (!('groups' in context.global.winkState)) context.global.winkState.groups={};\n    if (!(groupName in context.global.winkState.groups ))\n        {\n            context.global.winkState.groups[groupName]={\n            \"eco_system\": \"NODE-RED\",\n            \"name\": groupName,\n            \"object_type\": \"groups\",\n            \"object_id\": groupName,\n            \"hidden_at\": null,\n            \"freeboard\": 0\n//            members:{}\n            };\n        }\n    if(!(property in context.global.winkState.groups[groupName])) \n    {\n        context.global.winkState.groups[groupName][property]={\n            members:{}\n//            \"or\": false,\n//            \"and\": false,\n//            \"true_count\": 0,\n//            \"false_count\": 0,\n//            \"updated_at\":tstmp,\n//            \"changed_at\": tstmp\n        };\n    }\n    context.global.winkState.groups[groupName][property].members[device.name]=device;\n    if (type=='boolean'){\n        var counts=context.global.GetCount(context.global.winkState.groups[groupName][property].members,property);\n        context.global.winkState.groups[groupName][property].true_count=counts.true_cnt;\n        if (context.global.winkState.groups[groupName][property].true_count<0)  context.global.winkState.groups[groupName][property].true_count=0;   \n        context.global.winkState.groups[groupName][property].false_count=counts.false_cnt;     \n        if ( context.global.winkState.groups[groupName][property].false_count<0)  context.global.winkState.groups[groupName][property].false_count=0;\n        context.global.winkState.groups[groupName][property].and=(context.global.winkState.groups[groupName][property].false_count===0 ? true:false);     \n        context.global.winkState.groups[groupName][property].or=(context.global.winkState.groups[groupName][property].true_count>0 ? true:false);\n    } \n    if (type=='float' || type=='percentage'){\n        var MinMaxAvg = context.global.GetMinMaxAvg(context.global.winkState.groups[groupName][property].members,property);\n        context.global.winkState.groups[groupName][property].min=MinMaxAvg.min;\n        context.global.winkState.groups[groupName][property].max=MinMaxAvg.max;\n        context.global.winkState.groups[groupName][property].average=MinMaxAvg.avg;\n    }\n    context.global.winkState.groups[groupName][property].updated_at=new Date().getTime();\n    context.global.winkState.groups[groupName][property].changed_at=new Date().getTime();\n}\n\ncontext.global.cleanNonWinkState=function(){\n    for (var wink_obj in context.global.winkState){\n          if (context.global.isObject(context.global.winkState[wink_obj]) && wink_obj.indexOf('Updates')==-1) {\n            for (var wink_device in context.global.winkState[wink_obj]) {\n               if('eco_system' in context.global.winkState[wink_obj][wink_device] && context.global.winkState[wink_obj][wink_device].eco_system!=='WINK'){\n                       if (context.global.DEBUG ) node.warn('               resetting object '+wink_device);\n                   delete context.global.winkState[wink_obj][wink_device];\n               } \n            }\n            if (Object.keys(context.global.winkState[wink_obj]).length===0) delete context.global.winkState[wink_obj];\n        }\n    }\n};\n\ncontext.global.cleanWinkState=function(){\n    for (var wink_obj in context.global.winkState){\n          if (context.global.isObject(context.global.winkState[wink_obj]) && wink_obj.indexOf('Updates')==-1) {\n            for (var wink_device in context.global.winkState[wink_obj]) {\n               if('eco_system' in context.global.winkState[wink_obj][wink_device] && context.global.winkState[wink_obj][wink_device].eco_system==='WINK'){\n                       if (context.global.DEBUG ) node.warn('               resetting object '+wink_device);\n                   delete context.global.winkState[wink_obj][wink_device];\n               } \n            }\n            if (Object.keys(context.global.winkState[wink_obj]).length===0) delete context.global.winkState[wink_obj];\n        }\n    }\n};\n\ncontext.global.badRobot=function(robot){\n    var invalidCause=true;\n    var ifNotUser=(robot.automation_mode===null || robot.automation_mode==='schedule' ? false : true);\n    robot.causes.forEach(function (c){\n        if (c.observed_object_id!==null || robot.automation_mode==='schedule') invalidCause=false;\n    });\n    return invalidCause || ifNotUser;\n};\n\ncontext.global.setDevCapbs = function(type) {\n    var retval;\n//type=='light_bulbs' || type=='binary_switches' || type=='sensor_pods' || type=='smoke_detectors' || type=='propane_tanks'    \n    switch (type){\n        case 'light_bulbs':\n            retval = {\n                'fields':[\n                    {\n                    'field':'powered',\n                    'type' : 'boolean'\n                    },\n                    {'field':\"connection\",'type':'boolean'},\n                    {'field':\"brightness\",'type':'percentage'}                    \n                    ]\n                };\n            break;            \n        case 'binary_switches':\n            retval = {\n                'fields':[\n                    {'field':\"connection\",'type':'boolean'},                    \n                    {\n                    'field':'powered',\n                    'type' : 'boolean'\n                    }\n                    ]\n                };\n            break;\n        case 'smoke_detectors':\n            retval = {\n                'fields':[\n                    {'field':\"connection\",'type':'boolean'},\n                    {'field':\"battery\",'type':'percentage'},\n                    {'field':\"co_detected\",'type':'boolean'},\n                    {'field':\"smoke_detected\",'type':'boolean'},\n                    {'field':\"test_activated\",'type':'float'},\n                    {'field':\"smoke_severity\",'type':'percentage'},\n                    {'field':\"co_severity\",'type':'percentage'}\n                    ]\n                };\n        break;\n        case 'propane_tanks':\n            retval = {\n                'fields':[\n                    {'field':\"connection\",'type':'boolean'},\n                    {'field':\"battery\",'type':'percentage'},\n                    {'field':\"remaining\",'type':'percentage'}\n                    ]\n                };\n        break;        \n        }\n    return retval;        \n};\n\ncontext.global.getWinkState = function (body) {\n    var results, updateP;\n\n    updateP = !body.data;\n    results = updateP ? [body] : body.data;\n\n    results.forEach(function (result) {\n        var key, len, prop, readings, type,reading_aggregations, agg_prop, capabilities, capb, outlets, outl;\n            if (context.global.DEBUG ) node.warn(result.object_type+\" \"+ result.object_id+\" \"+result.name) //for debugging\n        type = result.object_type;\n//        if (type=='camera' && result.manufacturer_device_model=='canary' ) return;\n        if ('effects' in result && context.global.badRobot(result)) return;\n        if ('hidden_at' in result && result.hidden_at!==null) return;\n        if ('last_reading' in result && 'powering_mode' in result.last_reading && result.last_reading.powering_mode=='none') return;\n        if ('last_reading' in result && 'brightness' in result.last_reading) result.last_reading.norm_brightness=Math.round(result.last_reading.brightness*100);\n        if ('last_reading' in result && 'battery' in result.last_reading) result.last_reading.norm_battery=Math.round(result.last_reading.battery*100);\n        if ('last_reading' in result && 'remaining' in result.last_reading) result.last_reading.norm_remaining=Math.round(result.last_reading.remaining*100);        \n        if ('object_type' in result && result.object_type=='group' && result.members.length===0) return;\n        if ('object_type' in result && result.object_type=='camera'  && 'manufacturer_device_model' in result &&  (result.manufacturer_device_model=='nest_thermostat' || result.manufacturer_device_model=='netgear_arlo_wirefree' )) return;\n        if ('object_type' in result && result.object_type=='binary_switch' && 'last_reading' in result && 'opened' in result.last_reading) type='valve';\n        if ('object_type' in result && 'manufacturer_device_model' in result && result.object_type=='sensor_pod' && result.manufacturer_device_model == 'wink_relay_sensor') {\n             result.last_reading.relay_p = result.last_reading.presence;\n             delete result.last_reading.presence;\n             for (var c=0;c< result.capabilities.fields.length;c++){\n                 if (result.capabilities.fields[c].field == 'presence') {\n                     result.capabilities.fields[c].field = 'relay_p';\n                }\n             }\n        }\n        if (type) {\n        result.name=result.name.replace(/(\\r\\n|\\n|\\r)/gm,\"\");\n        key = result.name;\n        if (type==\"binary_switch\") type=\"binary_switches\";\n        else type=type+\"s\";\n        if (result.manufacturer_device_model=='canary') type=\"canaries\";\n        }\n        else {\n            if (!result.robot_id || !result.linked_service_id || result._msgid) return;\n            if(result.linked_service_id){\n                type = 'linked_services';\n                key = result.service;\n                result.object_id = result.linked_service_id;\n            }\n            if (result.robot_id){\n                type= 'robots';\n                \n            }\n        }\n        if (!context.global.winkState[type]) context.global.winkState[type] = {};\n\n        if ((!!context.global.winkState[type][key]) && type!=='groups' && (context.global.winkState[type][key].object_id != result.object_id)) {\n            key += ' (#' + result.object_id + ')';\n        }\n\n        if (!(key in context.global.winkState[type])) context.global.winkState[type][key] ={};\n        context.global.winkState[type][key].eco_system=result.eco_system || 'WINK';\n        context.global.winkState[type][key].name=result.name || key;\n        context.global.winkState[type][key].object_type=type;\n        context.global.winkState[type][key].object_id=result.object_id;\n        context.global.winkState[type][key].hidden_at=result.hidden_at||null;\n        if (result.device_manufacturer) context.global.winkState[type][key].device_manufacturer=result.device_manufacturer;\n        context.global.winkState[type][key].freeboard=0;\n        if (result.savings_goal){\n         context.global.winkState[type][key].savings_goal=result.savings_goal ;\n         context.global.winkState[type][key].nose_color=result.nose_color;\n        }\n        if (result.lat_lng) {\n            if ((result.lat_lng[0] === 0) && (result.lat_lng[1] === 0)) result.lat_lng = [null, null];\n            context.global.winkState[type][key].coordinates = result.lat_lng;\n        }\n        \n        if (result.parent_object_id) {\n            context.global.winkState[type][key].parent_object_id=result.parent_object_id;\n        }\n        if ('effects' in result && result.causes.length>0){\n           context.global.winkState[type][key].creating_actor_type=result.creating_actor_type;\n           context.global.winkState[type][key].automation_mode=result.automation_mode;\n           context.global.winkState[type][key].effects=result.effects;\n           context.global.winkState[type][key].causes=result.causes;\n           context.global.winkState[type][key].restrictions=result.restrictions;\n        }\n        \n        // Add group membership\n        if (type==\"groups\")/* && result.name.substring(0,1)!==\".\" && result.name.substring(0,1)!==\"@\") */\n        {\n            if (result.members && result.members.length>0) {\n                context.global.winkState[type][key].members = {};\n                for (i=0; i<result.members.length; i++) {\n                    var light_type= (result.members[i].object_type == 'binary_switch' ? 'binary_switches' : result.members[i].object_type+'s');\n                    for (var name in context.global.winkState[light_type])\n                    {\n                        if (context.global.winkState[light_type][name].object_id == result.members[i].object_id) \n                        {\n                            context.global.winkState[type][key].members[name] = { \n                                    name:name,\n                                    object_id:result.members[i].object_id,\n                                    object_type:light_type\n                                };\n                            }\n                        }\n                    }\n                }\n                \n        }\n\n        if (type=='cameras' && result.manufacturer_device_model!=='canary'){\n//        if (typeof(context.global.winkState[type][key].activities)==='undefined') context.global.winkState[type][key].activities=[]\n        if (result.manufacturer_device_model == 'BloomSky camera'){\n            context.global.winkState[type][key].imageURL = result.imageURL;            \n        }\n        context.global.winkState[type][key].manufacturer_device_model = result.manufacturer_device_model;                \n        context.global.winkState[type][key].url = result.url || context.global.BlueMixUrlBase+\"/freeboard/camera?token=\"+context.global.FREEBOARD_TOKEN+\"&id=\"+context.global.winkState.cameras[key].object_id+\"&model=\"+context.global.winkState.cameras[key].manufacturer_device_model;\n        context.global.winkState[type][key].snap_url =result.snap_url || context.global.BlueMixUrlBase+\"/freeboard/camera?token=\"+context.global.FREEBOARD_TOKEN+\"&id=\"+context.global.winkState.cameras[key].object_id+\"&model=\"+context.global.winkState.cameras[key].manufacturer_device_model;\n        context.global.winkState[type][key].history_url = result.history_url || context.global.BlueMixUrlBase+\"/freeboard/cameraSnapshots?token=\"+context.global.FREEBOARD_TOKEN+\"&camera_name=\"+key;\n        context.global.winkState[type][key].refresh_time=30;\n        }\n\n        readings = result.last_reading;\n        for (prop in readings) {\n            len = prop.length;\n            if ((prop.indexOf('desired_') === -1) && (prop.lastIndexOf('_at') !== (len - 3))) {\n                if(prop=='battery' && readings[prop]===0) readings[prop] = 1; \n                context.global.winkState[type][key][prop] = readings[prop];\n            }\n        }\n        if (type=='light_bulbs' && ('color_model' in readings || 'hue' in readings)) {\n            var color=context.global.tinycolor('hsv '+(result.eco_system=='LIFX' ? readings.hue : readings.hue*360)+' '+readings.saturation+' '+readings.brightness);\n            var hexColor=color.toHexString();\n            context.global.winkState[type][key].hexColor = hexColor;\n        }         \n        if (type == 'keys'){\n           context.global.winkState[type][key].activity_detected_updated_at=readings.activity_detected_updated_at; \n        }\n        if (type=='door_bells') {\n            if (!('sensor_pods' in context.global.winkState)) context.global.winkState.sensor_pods={};\n            context.global.winkState.sensor_pods[key]=context.global.winkState[type][key];\n            context.global.winkState.sensor_pods[key].object_type='sensor_pods';\n        }\n\n        reading_aggregations = result.reading_aggregation;\n        for (agg_prop in reading_aggregations) {\n            context.global.winkState[type][key][agg_prop]=reading_aggregations[agg_prop];\n        }\n        \n        capabilities = result.capabilities || {};\n//        node.warn(key);\n//        node.warn(capabilities);\n        try {\n            if ((type=='light_bulbs' || type=='binary_switches' || type=='sensor_pods' || type=='smoke_detectors' || type=='propane_tanks') &&  !('fields' in capabilities)) {\n                capabilities=context.global.setDevCapbs(type);\n            }\n            result.capabilities=capabilities;\n        } catch(e) {\n            node.warn('device: '+k);\n            node.warn(e);\n        }\n//        node.warn(capabilities);        \n        for (capb in capabilities) {\n            if(!context.global.winkDevCap[key]) context.global.winkDevCap[key]={};\n            if(!context.global.winkDevCap[key][capb]) context.global.winkDevCap[key][capb]={};\n          context.global.winkDevCap[key][capb]=capabilities[capb];\n        }\n        \n        outlets = result.outlets;\n        for (outl in outlets) {\n         if (!context.global.winkState[type][outlets[outl].name]) context.global.winkState[type][outlets[outl].name] = {};\n        context.global.winkState[type][outlets[outl].name]=outlets[outl];\n        context.global.winkState[type][outlets[outl].name].eco_system=\"WINK\";\n        }\n        \n        if (!!result.linked_service_id) context.global.winkState[type][key].connection = !result.invalidated_at;\n//custom counts start ======\n            if (type=='valves'){\n                context.global.GenGroup('@valves','opened',context.global.winkState[type][key],'boolean');\n            }\n            if (type=='light_bulbs' || type=='binary_switches'){\n                context.global.GenGroup('@wnrLights','powered',context.global.winkState[type][key],'boolean');\n            }\n            if ((type=='sensor_pods' || type=='locks' || type=='thermostats'  || type=='smoke_detectors' || type=='propane_tanks')  && 'capabilities' in result && !('external' in result)){\n                try {\n                for(var f in result.capabilities.fields){\n                    cap=result.capabilities.fields[f];\n                    if(cap.type=='boolean' || cap.type=='float' || cap.type=='percentage') {\n                        //node.warn(cap);\n                        context.global.GenGroup('@wnrSensors',cap.field,context.global.winkState[type][key],cap.type);\n                    }\n                }\n            } catch(e) {\n                node.warn('for loop device '+key);\n                node.warn(result);                \n                node.warn(e);\n            }\n            }            \n//custom counts end ======\n        if (!updateP) return;\n        if (!context.global.winkState.lastUpdates) context.global.winkState.lastUpdates = [];\n        if (type!=='groups'){\n        context.global.winkState[type][key].timestamp = new Date();\n        context.global.winkState.lastUpdates.splice(0, 0, context.global.winkState[type][key]);\n        if (context.global.winkState.lastUpdates.length > 15) context.global.winkState.lastUpdates.pop();\n        }\n        //addind special array for motion sensors to check how often they occur\n        if (type == \"sensor_pods\" && typeof (context.global.winkState[type][key].motion) !== 'undefined') {\n        context.global.winkState[type][key].timestamp= new Date();\n        if (!context.global.winkState.motionUpdates) context.global.winkState.motionUpdates=[];\n        context.global.winkState.motionUpdates.splice(0, 0, context.global.winkState[type][key]);\n        if (context.global.winkState.motionUpdates.length > 30) context.global.winkState.motionUpdates.pop();\n        }\n        \n    });\n};\n\n//global functions to generate wink cmd message for various objects\n\ncontext.global.takeCameraSnapshot = function(camera,event){\n    var cameraMsg={};\n    if (camera in context.global.winkState.cameras){\n        cameraMsg ={\n        \"url\":context.global.BlueMixUrlBase+'/red/save_images?cam_list='+camera+'&object_name='+event,\n        \"method\": \"GET\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n            }\n        };\n    }\n    return cameraMsg;\n};\n\ncontext.global.executeTstatCMD = function (winkName,command,Param) {\n    var WinkCMDmsg = {};\n    if ('new_version' in context.global && context.global.new_version){ \n        var cmd = command.toLowerCase();\n        var xParam = (typeof Param === 'string' ? Param.toLowerCase() : Param);\n            if (context.global.DEBUG ) node.warn(winkName+' '+cmd+' '+xParam)\n        try {\n            if (winkName in context.global.winkState.thermostats)\n            {\n                var devCapbs=context.global.winkDevCap[winkName].fields || [];\n                if (context.global.DEBUG ) node.warn(devCapbs);\n                WinkCMDmsg ={\n                    \"url\":\"https://api.wink.com/thermostats/\"+context.global.winkState.thermostats[winkName].object_id,\n                    \"method\": \"PUT\",\n                    headers: {\n                        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\",\n                        \"Content-Type\":\"application/json\"\n                    },\n                    payload: {\n                        desired_state:{}\n                    }\n                };\n                switch (cmd){\n                    case 'mode':\n                        if (devCapbs[context.global.searchArray(devCapbs,'mode','field')].choices.indexOf(xParam)!=-1 ){\n                            WinkCMDmsg.payload.desired_state={\n                                \"mode\":xParam                            \n                            }\n                        } else WinkCmd={};\n                    break;\n                    case 'powered':\n                        if (xParam=='on' || xParam=='off'){\n                            WinkCMDmsg.payload.desired_state={\n                                \"powered\":(xParam=='on' ? true : false)                            \n                            }                            \n                        } else WinkCmd={};\n                    break;\n                    case 'heat_start_at':\n//                        if (xParam.isNumber){\n                            WinkCMDmsg.payload.desired_state={\n                                \"min_set_point\":xParam                            \n                            }                            \n//                        } else WinkCmd={};\n                    break;\n                    case 'cool_start_at':\n //                       if (xParam.isNumber){\n                            WinkCMDmsg.payload.desired_state={\n                                \"max_set_point\":xParam                            \n                            }                            \n//                        } else WinkCmd={};\n                    break;\n                    case 'users_away':\n                            if (context.global.searchArray(devCapbs,'users_away','field')!=-1 ){    \n                            WinkCMDmsg.payload.desired_state={\n                                \"users_away\":xParam                            \n                            }                            \n                        } else WinkCmd={};\n                    break;            \n                    case 'fan':\n                            if (context.global.searchArray(devCapbs,'fan_timer_active','field')!=-1 ){    \n                            WinkCMDmsg.payload.desired_state={\n                                \"fan_timer_active\":(xParam=='on' ? true : false)                            \n                            }                            \n                        } else WinkCmd={};\n                    break;                     \n                    default:\n                    WinkCMDmsg={};    \n                }\n            }\n        }\n        catch (error){\n                if (context.global.DEBUG ) node.warn('execute tStat CMD error: '+ error.message);\n        }        \n    }\n    return WinkCMDmsg;\n}\n\ncontext.global.executeEffectCMD = function(effect,o_name,o_type,min,max,period,repeat,delay){\n   if ('new_version' in context.global && context.global.new_version){\n    var EffectMsg;\n    switch (effect.toLowerCase()){\n        case 'fadein':\n        case 'fadeout':\n        EffectMsg = {\n            \"url\":context.global.BlueMixUrlBase+'/red/ifttt/effects/'+effect.toLowerCase(),\n            method: \"POST\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n            },\n            payload:{\n                \"winkName\":o_name,\n                \"type\":o_type,\n                \"min\":min,\n                \"max\":max,\n                \"period\":period\n            }\n        }\n        break;\n        case 'pulse':\n                EffectMsg = {\n            \"url\":context.global.BlueMixUrlBase+'/red/ifttt/effects/'+effect.toLowerCase(),\n            method: \"POST\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n            },\n            payload:{\n                \"winkName\":o_name,\n                \"type\":o_type,\n                \"min\":min,\n                \"max\":max,\n                \"repeat\":repeat || 1,\n                \"delay\" : delay || period\n            }\n        }\n        break;\n    }\n    return EffectMsg;\n   } else return;\n};\ncontext.global.executeWinkCMD = function (origwinkName,type,cmd,level) {\nif ('new_version' in context.global && context.global.new_version){    \nvar WinkCMDmsg;\n    if (context.global.DEBUG ) node.warn(winkName+' '+type+' '+cmd)\ntry {\nswitch (type.toLowerCase()) {\ncase 'siren':\nwinkName = context.global.searchProperName('sirens',origwinkName);\nif (winkName in context.global.winkState.sirens)\n    {\n        WinkCMDmsg ={\n            \"url\":\"https://api.wink.com/sirens/\"+context.global.winkState.sirens[winkName].object_id,\n            \"method\": \"PUT\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\",\n                \"Content-Type\":\"application/json\"\n            }\n        };\n        switch (cmd.toLowerCase()){\n            case 'siren_only':\n            case 'strobe_only':\n            case 'siren_and_strobe':\n                WinkCMDmsg.payload = {\n                    \"desired_state\": {\n                        \"mode\":cmd.toLowerCase(),\n                        \"powered\":true\n                    }\n                };\n                break;\n            case 'off':\n                WinkCMDmsg.payload = {\n                    \"desired_state\": {\n                        \"powered\":false\n                    }\n                };\n                break;\n            case 'auto_shutoff':\n                WinkCMDmsg.payload = {\n                    \"desired_state\": {\n                        \"auto_shutoff\":(level == 30 || level == 60 || level == 120 ? level : null)\n                    }\n                };\n                break;            \n        }\n    }\nbreak;    \ncase 'garage':\nwinkName = context.global.searchProperName('garage_doors',origwinkName);    \nif (winkName in context.global.winkState.garage_doors)\n{\n   WinkCMDmsg ={\n    \"url\":\"https://api.wink.com/garage_doors/\"+context.global.winkState.garage_doors[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\",\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"position\":(cmd.toLowerCase() ==\"open\" ? 1:0)\n        }\n    }\n};\n}\nbreak;\ncase 'robot':\nwinkName = context.global.searchProperName('robots',origwinkName);    \nif (winkName in context.global.winkState.robots)\n{\n   WinkCMDmsg ={\n    \"url\":\"https://api.wink.com/robots/\"+context.global.winkState.robots[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"enabled\":(cmd.toLowerCase() ==\"enable\" ? true:false)\n        }\n    }\n};\n}\nbreak;    \ncase 'lock':\nwinkName = context.global.searchProperName('locks',origwinkName);    \nif (winkName in context.global.winkState.locks) {\n    if (cmd.toLowerCase() ==\"lock\" || cmd.toLowerCase() ==\"unlock\"){\n       WinkCMDmsg ={\n            \"url\":\"https://api.wink.com/locks/\"+context.global.winkState.locks[winkName].object_id,\n            \"method\": \"PUT\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                \"Content-Type\":\"application/json\"\n            },\n            payload: {\n                \"desired_state\": {\n                    \"locked\":(cmd.toLowerCase() ==\"lock\" ? true:false)\n                }\n            }\n        };\n    } else if (cmd.toLowerCase() ==\"auto_lock\"){\n       WinkCMDmsg ={\n            \"url\":\"https://api.wink.com/locks/\"+context.global.winkState.locks[winkName].object_id,\n            \"method\": \"PUT\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                \"Content-Type\":\"application/json\"\n            },\n            payload: {\n                \"desired_state\": {\n                    \"auto_lock_enabled\":(level.toLowerCase() ==\"true\" ? true:false)\n                }\n            }\n        };        \n    } else if (cmd.toLowerCase() ==\"beeper\"){\n       WinkCMDmsg ={\n            \"url\":\"https://api.wink.com/locks/\"+context.global.winkState.locks[winkName].object_id,\n            \"method\": \"PUT\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                \"Content-Type\":\"application/json\"\n            },\n            payload: {\n                \"desired_state\": {\n                    \"beeper_enabled\":(level.toLowerCase() ==\"true\" ? true:false)\n                }\n            }\n        };        \n    } else if (cmd.toLowerCase() ==\"vacation_mode\"){\n       WinkCMDmsg ={\n            \"url\":\"https://api.wink.com/locks/\"+context.global.winkState.locks[winkName].object_id,\n            \"method\": \"PUT\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                \"Content-Type\":\"application/json\"\n            },\n            payload: {\n                \"desired_state\": {\n                    \"vacation_mode_enabled\":(level.toLowerCase() ==\"true\" ? true:false)\n                }\n            }\n        };        \n    } else if (cmd.toLowerCase() ==\"alarm\"){\n       WinkCMDmsg ={\n            \"url\":\"https://api.wink.com/locks/\"+context.global.winkState.locks[winkName].object_id,\n            \"method\": \"PUT\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                \"Content-Type\":\"application/json\"\n            },\n            payload: {\n                \"desired_state\": {\n                    \"alarm_mode\":(level.toLowerCase())\n                }\n            }\n        };        \n    }\n}\nbreak;\ncase 'light':\nwinkName = context.global.searchProperName('light_bulbs',origwinkName);\nif (winkName === null) winkName = context.global.searchProperName('binary_switches',origwinkName);\nif (winkName === null) winkName = context.global.searchProperName('powerstrips',origwinkName);\nif ('light_bulbs' in context.global.winkState && winkName in context.global.winkState.light_bulbs){\n    if (context.global.winkState.light_bulbs[winkName].device_manufacturer==\"SmartThings\") {\n         WinkCMDmsg ={\n            \"url\":context.global.SmartThingsApiEndPoint+'/switches/'+context.global.winkState.light_bulbs[winkName].object_id+'/'+cmd.toLowerCase(),\n            \"method\": \"PUT\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.SmartThingsApiToken\n            }\n        };\n        if (typeof level !=='undefined') WinkCMDmsg.payload={'level':level};\n    } else if(context.global.winkState.light_bulbs[winkName].device_manufacturer==\"lifx\")\n    {\n        if(cmd.toLowerCase()=='color'){\n        WinkCMDmsg ={\n            \"url\":\"https://api.lifx.com/v1/lights/id:\"+context.global.winkState.light_bulbs[winkName].object_id+\"/state\",\n            \"method\": \"PUT\",\n            headers: {\n                \"Authorization\": \"Bearer \"+context.global.LIFX_TOKEN,\n                \"Content-Type\":\"application/json\"\n            },\n            payload: {\n                \"color\":'#'+level.toUpperCase(),\n                \"power\":\"on\",\n                \"duration\":\"1\"\n                \n            }\n        };            \n        } else if (cmd.toLowerCase()=='color_temperature'){\n            WinkCMDmsg ={\n                \"url\":\"https://api.lifx.com/v1/lights/id:\"+context.global.winkState.light_bulbs[winkName].object_id+\"/state\",\n                \"method\": \"PUT\",\n                headers: {\n                    \"Authorization\": \"Bearer \"+context.global.LIFX_TOKEN,\n                    \"Content-Type\":\"application/json\"\n                },\n                payload: {\n                    \"color\":'kelvin:'+level,\n                    \"power\":\"on\",\n                    \"duration\":\"1\"\n                    \n                }\n            };             \n        }\n        else {\n        WinkCMDmsg ={\n            \"url\":\"https://api.lifx.com/v1/lights/id:\"+context.global.winkState.light_bulbs[winkName].object_id+\"/state\",\n            \"method\": \"PUT\",\n            headers: {\n                \"Authorization\": \"Bearer \"+context.global.LIFX_TOKEN,\n                \"Content-Type\":\"application/json\"\n            },\n            payload: {\n                \"color\":'#'+level.toUpperCase(),\n                \"power\":(cmd.toLowerCase()==\"on\" ? \"on\" : \"off\"),\n                \"brightness\":level/100,\n                \"duration\":\"1\"\n                \n            }\n        };\n      }    \n    }\n    else {\n    if(cmd.toLowerCase()=='color'){\n        var color=context.global.tinycolor(\"#\"+level);\n        var hsv=color.toHsv();\n        //node.warn('HSV: '+hsv.v);\n        WinkCMDmsg ={\n        \"url\":\"https://api.wink.com/light_bulbs/\"+context.global.winkState.light_bulbs[winkName].object_id,\n        \"method\": \"PUT\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.WinkToken,\n            \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\",        \n            \"Content-Type\":\"application/json\"\n        },\n        payload: {\n            \"desired_state\": {\n                \"powered\": true,\n                \"brightness\":hsv.v,\n                \"hue\":hsv.h/360,\n                \"saturation\":hsv.s,\n                \"color_model\":\"hsb\"\n            }\n        }\n    };\n        \n    } else if (cmd.toLowerCase()=='color_temperature'){\n        WinkCMDmsg ={\n            \"url\":\"https://api.wink.com/light_bulbs/\"+context.global.winkState.light_bulbs[winkName].object_id,\n            \"method\": \"PUT\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\",        \n                \"Content-Type\":\"application/json\"\n            },\n            payload: {\n                \"desired_state\": {\n                    \"powered\": true,\n                    \"color_temperature\":level,\n                    \"color_model\":\"color_temperature\"\n                }\n            }\n        };    \n    } else {    \n    WinkCMDmsg ={\n        \"url\":\"https://api.wink.com/light_bulbs/\"+context.global.winkState.light_bulbs[winkName].object_id,\n        \"method\": \"PUT\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.WinkToken,\n            \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\",        \n            \"Content-Type\":\"application/json\"\n        },\n        payload: {\n            \"desired_state\": {\n                \"powered\":(cmd.toLowerCase() ==\"on\" ? true:false),\n                \"brightness\": level/100\n            }\n        }\n    };\n }   \n} \n} else if('binary_switches' in context.global.winkState && winkName in context.global.winkState.binary_switches){\n    if (context.global.winkState.binary_switches[winkName].device_manufacturer==\"SmartThings\") {\n         WinkCMDmsg ={\n            \"url\":context.global.SmartThingsApiEndPoint+'/switches/'+context.global.winkState.binary_switches[winkName].object_id+'/'+cmd.toLowerCase(),\n            \"method\": \"PUT\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.SmartThingsApiToken\n            }\n        };\n    } else {\n         WinkCMDmsg ={\n            \"url\":\"https://api.wink.com/binary_switches/\"+context.global.winkState.binary_switches[winkName].object_id,\n            \"method\": \"PUT\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\",        \n                \"Content-Type\":\"application/json\"\n            },\n            payload: {\n                \"desired_state\": {\n                    \"powered\":(cmd.toLowerCase() ==\"on\" ? true:false)\n                }\n            }\n        };\n    }\n} else if('powerstrips' in context.global.winkState && winkName in context.global.winkState.powerstrips && context.global.winkState.powerstrips[winkName].object_type==='outlet'){\n WinkCMDmsg ={\n    \"url\":\"https://api.wink.com/outlets/\"+context.global.winkState.powerstrips[winkName].object_id,\n    \"method\": \"PUT\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":(cmd.toLowerCase() ==\"on\" ? true:false)\n        }\n    }\n};\n}\nbreak;\ncase 'valve':\nwinkName = context.global.searchProperName('valves',origwinkName);    \n if('valves' in context.global.winkState && winkName in context.global.winkState.valves){\n     WinkCMDmsg ={\n        \"url\":\"https://api.wink.com/binary_switches/\"+context.global.winkState.valves[winkName].object_id,\n        \"method\": \"PUT\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.WinkToken,\n            \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\",        \n            \"Content-Type\":\"application/json\"\n        },\n        payload: {\n            \"desired_state\": {\n                \"opened\":(cmd.toLowerCase() ==\"open\" ? true:false)\n            }\n        }\n    };\n }\nbreak;\ncase 'group':\nwinkName = context.global.searchProperName('groups',origwinkName);    \nif (winkName in context.global.winkState.groups){\n    if (context.global.DEBUG ) node.warn(context.global.winkState.groups[winkName]);\n WinkCMDmsg ={\n    \"url\":\"https://api.wink.com/groups/\"+context.global.winkState.groups[winkName].object_id+\"/activate\",\n    \"method\": \"POST\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    },\n    payload: {\n        \"desired_state\": {\n            \"powered\":(cmd.toLowerCase() ==\"on\" ? true:false),\n            \"brightness\": level/100\n        }\n    }\n  };\n }\nbreak;\ncase 'shortcut':\nwinkName = context.global.searchProperName('scenes',origwinkName);    \nif (winkName in context.global.winkState.scenes){\n WinkCMDmsg ={\n    \"url\":\"https://api.wink.com/scenes/\"+context.global.winkState.scenes[winkName].object_id+\"/activate\",\n    \"method\": \"POST\",\n    headers: {\n        \"Authorization\":\"Bearer \"+context.global.WinkToken,\n        \"Content-Type\":\"application/json\"\n    }\n  };\n }\nbreak;\ndefault:\nWinkCMDmsg={url:'not defined'};\n}\n    if (context.global.DEBUG ) node.warn(WinkCMDmsg.url);\nreturn WinkCMDmsg;\n}\ncatch (error){\n        if (context.global.DEBUG ) node.warn('execute WINK CMD error: '+ error.message);\n}\n} else return;\n};\n\ncontext.global.searchProperName = function (obj_type, obj_name){\n    var ProperName=null;\n//    node.warn('Searching for: '+obj_name.toUpperCase()+'-bbb');\n    if (obj_type in context.global.winkState){\n       for (var v in context.global.winkState[obj_type]) {\n            regex = new RegExp('^' + v + '$', 'i');\n           if (regex.test(obj_name.trim())){\n             ProperName= v;\n//             node.warn('found it: '+ ProperName);\n             break;\n           } \n       }\n       return ProperName;\n    } else {\n        return ProperName;\n    }\n}\n\ncontext.global.saveCameraSnapshot = function(cam_list,initiator){\n    var newMsg1 ={\n        \"url\":context.global.BlueMixUrlBase+'/red/save_images?cam_list='+cam_list+'&object_name='+initiator||'script',\n        \"method\": \"GET\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n        }\n    };\n    return newMsg1;\n};\n\n\ncontext.global.sendViaPushBullet = function(type,title,body,personal){\n    personal = typeof personal !== 'undefined' ? personal : 'n';\n    Pmsg= {\n        \"url\":\"https://api.pushbullet.com/v2/pushes\",\n        \"method\": \"POST\",\n        headers: {\n            \"Access-Token\":context.global.PushBulletKey,\n            \"Content-Type\":\"application/json\",\n        },\n        payload: {\n            \"type\"  : type,\n            \"title\" : title,\n            \"body\"  : body\n        }\n    };\n    if('PushBulletChannel' in context.global && context.global.PushBulletChannel!=='' && (personal === null || personal.toLowerCase()==='n') ) Pmsg.payload.channel_tag=context.global.PushBulletChannel;    \n    return Pmsg;\n};\n\ncontext.global.genKey=function(s){\n    var str=\"\";\n    for (i=0;i<s.length;i++){\n        str+=String.fromCharCode(~s[i]);\n    }\n    return str || null;\n};\n\ncontext.global.algorithm = 'aes-256-ctr';\n\ncontext.global.encrypt=function(text){\n  var cipher = context.global.CRYPTO.createCipher(context.global.algorithm,context.global.FREEBOARD_TOKEN);\n  var crypted = cipher.update(text,'utf8','hex');\n  crypted += cipher.final('hex');\n  return crypted;\n};\n \ncontext.global.decrypt=function(text){\n  var decipher = context.global.CRYPTO.createDecipher(context.global.algorithm,context.global.FREEBOARD_TOKEN);\n  var dec = decipher.update(text,'hex','utf8');\n  dec += decipher.final('utf8');\n  return dec;\n};\n\ncontext.global.getCookie=function(cname,req_cookies) {\n    var name = cname + \"=\";\n    if (typeof(req_cookies) !=='undefined' ){\n    var ca = req_cookies.split(';');\n    for(var i=0; i<ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0)==' ') c = c.substring(1);\n        if (c.indexOf(name) === 0){\n          var token=c.substring(name.length,c.length);\n          try {\n          if (context.global.DEBUG ) node.warn(\"token:\"+token);\n          //return c.substring(name.length,c.length);              \n            //var token = context.global.wnr.jwt.sign({aaa:'testing'},context.global.FREEBOARD_TOKEN);          \n            var decoded = context.global.wnr.jwt.verify(token,context.global.FREEBOARD_TOKEN);\n            if (context.global.DEBUG ) node.warn(\"decoded cliend Id:\"+decoded);\n            return context.global.FREEBOARD_TOKEN;\n            }\n          catch(error) {\n              return 0;\n          }\n        } \n    }\n  } else return '0';\n};\n\ncontext.global.getCookieVerified=function(cname,req_cookies,bfp) {\n    var name = cname + \"=\";\n    if (typeof(req_cookies) !=='undefined' ){\n    var ca = req_cookies.split(';');\n    for(var i=0; i<ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0)==' ') c = c.substring(1);\n        if (c.indexOf(name) === 0){\n          var token=c.substring(name.length,c.length);\n          try {\n              if (context.global.DEBUG ) node.warn(\"token:\"+token);\n              //return c.substring(name.length,c.length);              \n                //var token = context.global.wnr.jwt.sign({aaa:'testing'},context.global.FREEBOARD_TOKEN);          \n                var decoded = context.global.wnr.jwt.verify(token,context.global.FREEBOARD_TOKEN);\n                if (context.global.DEBUG ) node.warn(\"decoded JWT client hash:\"+decoded.clientId);\n                var clientId = new Buffer(bfp,'base64').toString();\n                var clientHash = context.global.CRYPTO.createHash(\"sha256\").update(clientId+':'+context.global.FREEBOARD_TOKEN,\"utf8\").digest('hex');\n                if (context.global.DEBUG ) node.warn('received client hash: '+clientHash);\n                if (clientHash===decoded.clientId){\n                    return context.global.FREEBOARD_TOKEN;\n                } else {\n                    return 0;\n                }\n            }\n          catch(error) {\n              if (context.global.DEBUG ) node.warn(error);\n              return 0;\n          }\n        } \n    }\n  } else return '0';\n};\n\ncontext.global.getBISession = function (req_cookies)\n {\n\tvar i,x,y,ARRcookies=document.cookie.split(\";\");\n\tfor (i=0; i<ARRcookies.length; i++ )\n\t{\n\t\tx=ARRcookies[i].substr(0,ARRcookies[i].indexOf(\"=\"));\n\t\ty=ARRcookies[i].substr(ARRcookies[i].indexOf(\"=\")+1);\n\t\tx=x.replace(/^\\s+|\\s+$/g,\"\");\n\n\t\tif (x==\"session\")\n\t\t{\n\t\t\treturn unescape(y);\n\t\t}\n\t}\n };\n\ncontext.global.render_home_components = function(grp,name) {\n    var pct = function(value) {\n    return ((value > 1.0 ? value : value * 100).toFixed(0) + '%');\n    };\n    var dual_temp = function (value) {\n    return (typeof value === 'number' ? (value.toFixed(1) + 'C / ' + ((value * 1.8) + 32).toFixed(1) + 'F') : '');\n    };\n    \n    var all=context.global.winkState.groups['.all'];\n    var wnrAll=context.global.winkState.groups['@wnrSensors'];\n    var l=context.global.winkState.groups['@wnrLights'];\n    var doors = ('@door_sensors' in context.global.winkState.groups ? context.global.winkState.groups['@door_sensors'].opened : false);\n    var sdoors = ('@sliding_door_sensors' in context.global.winkState.groups ? context.global.winkState.groups['@sliding_door_sensors'].opened : false);\n    var cab_doors = ('@cabinet_sensors' in context.global.winkState.groups ? context.global.winkState.groups['@cabinet_sensors'].opened :false);\n    var windows = ('@window_sensors' in context.global.winkState.groups ? context.global.winkState.groups['@window_sensors'].opened : false);\n    var valves = ('@valves' in context.global.winkState.groups ? context.global.winkState.groups['@valves'].opened : false);\n    //var g_doors = ('@garage_door_sensors' in context.global.winkState.groups ? context.global.winkState.groups['@garage_door_sensors'].opened : false);\n    if ('garage_doors' in context.global.winkState){\n        var g_doors={\n            'and':false,\n            'or': false,\n            'true_count':0,\n            'false_count':0\n        };\n        for (var gd in context.global.winkState.garage_doors){\n            if (context.global.winkState.garage_doors[gd].position>0){\n                g_doors.and=true;\n                g_doors.or=true;\n                g_doors.true_count++;\n            } else g_doors.false_count++\n        }\n    } else g_doors=false;\n    var total_doors = {\n        'and': (doors ? doors.and : false) || (sdoors ? sdoors.and : false),\n        'or': (doors ? doors.or : false) || (sdoors ? sdoors.or : false),        \n        'true_count':(doors ? doors.true_count : 0) + (sdoors ? sdoors.true_count : 0),\n        'false_count':(doors ? doors.false_count : 0) + (sdoors ? sdoors.false_count : 0)        \n    };\n    var NewMsg={\n    payload:{\n        home_components:[]\n        }\n    }\n    if (grp==='.all' || grp.indexOf('_sensors')!=-1 || grp==='garage_door') \n    {\n        if ('Presence' in context.global && Object.getOwnPropertyNames(context.global.Presence).length > 0){\n        NewMsg.payload.home_components.push(\n            {\n                type:'presense',\n                group_names:['@wnrSensors'],\n                group_option:'presence',\n                icon:'wi wi-home-icon '+(context.global.checkPresence()  ? 'cicon-building_full': 'cicon-building_emtpy'),\n                label:\"Presence\",\n                value:(context.global.checkPresence()  ? \"Occupied\" : \"Empty\"),\n                icon_color:(context.global.checkPresence()   ?  'detail-ok' : 'detail-warning')\n            });            \n        }        \n         if ('temperature' in context.global.winkState.groups['.all']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'temperature',\n                    group_names:['@wnrSensors'],\n                    group_option:'temperature',                    \n                    icon:'wi wi-home-icon wi-thermometer',\n                    label:\"Temperature\",\n                    value:dual_temp(wnrAll.temperature.average),\n                    icon_color:(wnrAll.temperature.average<10 || wnrAll.temperature.average > 50 ? 'detail-warning' : 'detail-ok')\n                });\n        }\n        if ('humidity' in context.global.winkState.groups['.all']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'humidity',\n                    group_names:['@wnrSensors'],    \n                    group_option:'humidity',                    \n                    icon:'wi wi-home-icon wi-humidity',\n                    label:\"Humidity\",\n                    value:pct(wnrAll.humidity.average),\n                    icon_color:(wnrAll.humidity.average < 0.1 || wnrAll.humidity.average > 90 ? 'detail-warning' : 'detail-ok')\n                });\n        }\n        if ('smoke_detected' in context.global.winkState.groups['.all']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'smoke_detected',\n                    group_names:['@wnrSensors'],\n                    group_option:'smoke_detected',                    \n                    icon:'wi wi-home-icon cicon-fire',\n                    label:\"Smoke\",\n                    value:(all.smoke_detected.and || all.smoke_detected.or ? \"Fire!!\" : \"OK\"),\n                    icon_color: (all.smoke_detected.and || all.smoke_detected.or ? \"detail-danger\" : \"detail-ok\")\n                });\n            NewMsg.payload.home_components.push(\n                {\n                    type:'co_detected',\n                    group_names:['@wnrSensors'],  \n                    group_option:'co_detected',                                        \n                    icon:'wi wi-home-icon cicon-CO2',\n                    label:\"CO2\",\n                    value:(all.co_detected.and || all.co_detected.or ? \"CO2!!\" : \"OK\"),\n                    icon_color:(all.co_detected.and || all.co_detected.or ? \"detail-danger\" : \"detail-ok\"),\n                });\n        }\n        if ('liquid_detected' in context.global.winkState.groups['@wnrSensors'])\n        {\n            NewMsg.payload.home_components.push(\n                {\n                type:'liquid_detected',\n                group_names:['@wnrSensors'], \n                group_option:'liquid_detected',                                    \n                icon:'wi wi-home-icon cicon-droplet',\n                label:\"Leaks\",\n                value:(wnrAll.liquid_detected.and || wnrAll.liquid_detected.or ? \"Leak detected!!\" : \"No Leaks\"),\n                icon_color:(wnrAll.liquid_detected.and || wnrAll.liquid_detected.or ?  \"detail-danger\" : \"detail-ok\")\n            });\n        }\n        if ('motion' in context.global.winkState.groups['@wnrSensors']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'motion',\n                    group_names:['@wnrSensors'], \n                    group_option:'motion',                                        \n                    icon:'wi wi-home-icon cicon-feed',\n                    label:\"Motion\",\n                    value:(wnrAll.motion.and || wnrAll.motion.or ? \"Motion\" : \"No Motion\"),\n                    icon_color:(wnrAll.motion.and || wnrAll.motion.or ?  'detail-warning' : 'detail-ok')\n                });\n        }\n        if ('locked' in context.global.winkState.groups['@wnrSensors']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'locked', \n                    group_names:['@wnrSensors'], \n                    group_option:'locked',\n                    icon:'wi wi-home-icon cicon-doors4',\n                    label:\"Locks\",\n                    value:(wnrAll.locked.and || wnrAll.locked.or ? wnrAll.locked.true_count+\" Locked\" : wnrAll.locked.false_count+\" Unlocked\"),\n                    icon_color:(wnrAll.locked.and || wnrAll.locked.or ?  'detail-ok' : 'detail-warning')\n                });\n        }\n        if ('@valves' in context.global.winkState.groups && 'opened' in context.global.winkState.groups['@valves']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'valve_opened',\n                    group_names:['@valves'], \n                    group_option:'opened',                    \n                    icon:'wi wi-home-icon '+(valves.and || valves.or ? 'cicon-valve':'cicon-valve'),\n                    label:\"Valves\",\n                    value:(valves.and || valves.or ? valves.true_count+\" Opened\" : valves.false_count+\" Closed\"),\n                    icon_color:(valves.and || valves.or ?  'detail-ok' : 'detail-warning')\n                });\n        }        \n        if (doors || sdoors){\n//      if ('opened' in context.global.winkState.groups['@sliding_door_sensors'] || 'opened' in context.global.winkState.groups['@door_sensors'] || 'opened' in context.global.winkState.groups['@cabinet_sensors']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'sd_opened',\n                    group_names:['@door_sensors','@sliding_door_sensors'], \n                    group_option:'members',                      \n                    icon:'wi wi-home-icon '+(total_doors.and || total_doors.or ? 'cicon-opened_door':'cicon-closed_door'),\n                    label:\"Doors\",\n                    value:(total_doors.and || total_doors.or ? total_doors.true_count+\" Opened\" : total_doors.false_count+\" Closed\"),\n                    icon_color:(total_doors.and || total_doors.or ?  'detail-warning' : 'detail-ok')\n                });\n        }        \n        if (cab_doors){\n//      if ('opened' in context.global.winkState.groups['@sliding_door_sensors'] || 'opened' in context.global.winkState.groups['@door_sensors'] || 'opened' in context.global.winkState.groups['@cabinet_sensors']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'cab_opened',\n                    group_names:['@cabinet_door_sensors'],  \n                    group_option:'members',                      \n                    icon:'wi wi-home-icon '+(cab_doors.and || cab_doors.or ? 'cicon-cabinet_door':'cicon-cabinet_door'),\n                    label:\"Cabinets\",\n                    value:(cab_doors.and || cab_doors.or ? cab_doors.true_count+\" Opened\" : cab_doors.false_count+\" Closed\"),\n                    icon_color:(cab_doors.and || cab_doors.or ?  'detail-warning' : 'detail-ok')\n                });\n        }        \n        if ('@window_sensors' in context.global.winkState.groups && 'opened' in context.global.winkState.groups['@window_sensors']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'wnd_opened',\n                    group_names:['@window_sensors'],  \n                    group_option:'members',                      \n                    icon:'wi wi-home-icon '+(windows.and || windows.or ? 'cicon-windows2':'cicon-windows2'),\n                    label:\"Windows\",\n                    value:(windows.and || windows.or ? windows.true_count+\" Opened\" : windows.false_count+\" Closed\"),\n                    icon_color:(windows.and || windows.or ?  'detail-warning' : 'detail-ok')\n                });\n        }\n        if (g_doors){\n//      if ('opened' in context.global.winkState.groups['@sliding_door_sensors'] || 'opened' in context.global.winkState.groups['@door_sensors'] || 'opened' in context.global.winkState.groups['@cabinet_sensors']){\n            NewMsg.payload.home_components.push(\n                {\n                    type:'gd_opened',\n                    group_names:['@garage_door_sensors'], \n                    group_option:'members',                      \n                    icon:'wi wi-home-icon '+(g_doors.and || g_doors.or ? 'cicon-garage_o':'cicon-garage_c'),\n                    label:\"Garages\",\n                    value:(g_doors.and || g_doors.or ? g_doors.true_count+\" Opened\" : g_doors.false_count+\" Closed\"),\n                    icon_color:(g_doors.and || g_doors.or ?  'detail-warning' : 'detail-ok')\n                });\n        }         \n        if ('light_bulbs' in context.global.winkState || 'binary_switches' in context.global.winkState){\n                NewMsg.payload.home_components.push(\n                    {\n                    type:'powered',\n                    group_names:['@wnrLights'],\n                    group_option:'powered',                      \n                    icon:'wi wi-home-icon cicon-bulb',\n                    label:\"Lights\",\n                    value:(l.powered.and || l.powered.or ? l.powered.true_count+\" ON\" : l.powered.false_count+\" OFF\"),\n                    icon_color:(l.powered.and || l.powered.or ? 'detail-warning' : 'detail-ok')\n                    });\n        }        \n        if ('remaining' in context.global.winkState.groups['@wnrSensors']){\n                if (context.global.DEBUG ) node.warn('adding propane tanks')\n            NewMsg.payload.home_components.push(\n                {\n                    type:'remaining',\n                    group_names:['@wnrSensors'],\n                    group_option:'remaining',                      \n                    icon:'wi wi-home-icon ' + (wnrAll.remaining.min <=0.50  ? 'cicon-propane_tnk_half' : 'cicon-propane_tnk_full'),\n                    label:\"Propane\",\n                    value:pct(wnrAll.remaining.min),\n                    icon_color:(wnrAll.remaining.min <0.10  ?  'detail-danger' : wnrAll.remaining.min <=0.50 ? 'detail-warning' : 'detail-ok')\n                });\n        }    \n        if ('battery' in context.global.winkState.groups['@wnrSensors']){\n            if (context.global.DEBUG ) node.warn('adding batteries')\n        NewMsg.payload.home_components.push(\n            {\n                type:'battery',\n                group_names:['@wnrSensors'],\n                group_option:'battery',                  \n                icon:'fa wi-home-icon '+(wnrAll.battery.min <0.25  ? 'fa-battery-quarter': wnrAll.battery.min <=0.50  ? 'fa-battery-half' : 'fa-battery-full'),\n                label:\"Battery\",\n                value:(wnrAll.battery.min <0.10  ? \"Check\" : wnrAll.battery.min <=0.50  ? pct(wnrAll.battery.min) :\"OK\"),\n                icon_color:(wnrAll.battery.min <0.10  ?  'detail-danger' : wnrAll.battery.min <=0.50  ?  'detail-warning' : 'detail-ok')\n            });\n        }\n    } \n    if (grp=='Presence'){\n        if ('Presence' in context.global && Object.getOwnPropertyNames(context.global.Presence).length > 0){\n        NewMsg.payload.home_components.push(\n            {\n                type:'presense',\n                group_names:['@wnrSensors'],\n                group_option:'presence',                \n                icon:'wi wi-home-icon '+(context.global.checkPresence()  ? 'cicon-building_full': 'cicon-building_emtpy'),\n                label:\"Presence\",\n                value:(context.global.checkPresence()  ? \"Occupied\" : \"Empty\"),\n                icon_color:(context.global.checkPresence()   ?  'detail-ok' : 'detail-warning')\n            });            \n        }\n    }     \n    if (grp=='@lights') {\n        if ('light_bulbs' in context.global.winkState || 'binary_switches' in context.global.winkState){\n                NewMsg.payload.home_components.push(\n                    {\n                    type:'powered',\n                    group_names:['@wnrLights'],\n                    group_option:'powered',                    \n                    icon:'wi wi-home-icon cicon-bulb',\n                    label:\"Lights\",\n                    value:(l.powered.and || l.powered.or ? l.powered.true_count+\" ON\" : l.powered.false_count+\" OFF\"),\n                    icon_color:(l.powered.and || l.powered.or ? 'detail-warning' : 'detail-ok')\n                    });\n        }\n    }\n    if (grp=='VarS'){\n        if (name in context.global){\n        NewMsg.payload.home_components.push(\n            {\n                type:'VarS',\n                label:name,\n                value:context.global[name]\n            });            \n        }\n    }    \n    return NewMsg;\n};\n\ncontext.global.sendWithTimeout = function(node1,m,delay){\n    setTimeout(function(){node1.send(m);},delay);\n}     \n\ncontext.global.getRandomNumber = function(min,max) {\n    return Math.floor(Math.random()*(max-min+1)+min);\n}\n\ncontext.global.clearAllIntervals = function(){\n    if ('timedOutCmd' in context.global){\n        for (var t in context.global.timedOutCmd){\n            if(context.global.DEBUG) node.warn('device '+t+' timeout '+ context.global.timedOutCmd[t].timeOutId);\n            clearTimeout(context.global.timedOutCmd[t].timeOutId);\n            delete context.global.timedOutCmd[t];\n        }\n    }\n};\n\ncontext.global.searchArray = function(attrArray,attrName,attrKey){\n    if (context.global.DEBUG ) node.warn(attrArray);\n\tvar idx = attrArray.map(function(x){\n\t\treturn x[attrKey];\n\t}).indexOf(attrName);\n\tif (context.global.DEBUG ) node.warn('idx:' + idx);\n\treturn idx;\n};\n\ncontext.global.randomString = function(L){\n    var s= '';\n    var randomchar=function(){\n    \tvar n= Math.floor(Math.random()*62);\n    \tif(n<10) return n; //1-10\n    \tif(n<36) return String.fromCharCode(n+55); //A-Z\n    \treturn String.fromCharCode(n+61); //a-z\n    }\n    while(s.length< L) s+= randomchar();\n    return s;\n}\n\ncontext.global.F2C = function(Ftemp) {\n    return parseFloat((Ftemp - 32) / 1.8);\n}\n\n context.global.generate_token=function(token_name){\n     context.global[token_name]=context.global.randomString(64);\n     return context.global[token_name];\n }\n \n context.global.secret_encrypt = function (secret,text){\n    var message = (typeof text == 'object' ? JSON.stringify(text) : text);\n    var msgBuff = new Buffer(message);\n    var nonce = new Buffer(context.global.randomString(24),'utf8');\n    var key = new Buffer(32);\n    key.fill(0);\n    key.write(secret);\n        node.warn('message: '+msgBuff);\n        node.warn('key: '+key);\n        node.warn('nonce: '+nonce);\n    try {\n        var encMsg = new Buffer(context.global.wnr.crypto_easy(msgBuff,nonce,key,'text'),'ascii');\n    } catch (e) {\n        node.warn(\"error encrypting payload\");\n        return \"~ENCRYPT_ERROR~\";\n    }\n        node.warn('encoded message: '+encMsg);\n    var finalBuff= new Buffer(nonce.toString() + encMsg.toString());\n    return finalBuff.toString('base64');\n }\n\ncontext.global.calcCrow = function(lat1, lon1, lat2, lon2) {\n    function roundUsing(func, number, prec) {\n        var tempnumber = number * Math.pow(10, prec);\n        tempnumber = func(tempnumber);\n        return tempnumber / Math.pow(10, prec);\n    }\n    \n    // Converts numeric degrees to radians\n    function toRad(Value) {\n        return Value * Math.PI / 180;\n    }    \n  var R = 6371; // km\n  var dLat = toRad(lat2 - lat1);\n  var dLon = toRad(lon2 - lon1);\n  Rlat1 = toRad(lat1);\n  Rlat2 = toRad(lat2);\n\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(Rlat1) * Math.cos(Rlat2); \n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n  var d = R * c;\n  return d;\n}\n\n\ncontext.global.secret_decrypt = function (secret,enc_text){\n    node.warn('enc_text:' + enc_text);\n    var cypherText = new Buffer(enc_text, 'base64');\n    var nonce = cypherText.slice(0,24);\n    var key = new Buffer(32);\n    key.fill(0);\n    key.write(secret);\n        node.warn('decoding.....')\n        node.warn('encoded_str: '+cypherText);\n        node.warn('nonce: '+nonce);\n        node.warn('key: '+key);\n    try {\n        var clearText = context.global.wnr.crypto_open_easy(cypherText.slice(24),nonce,key,'text');\n    } catch (e) {\n        node.warn(e);\n        return \"~DECRYPT_ERROR~\";\n    }\n    try{\n        var clearObj = JSON.parse(clearText);\n    } catch (e) {\n      return clearText;\n    }\n    return clearObj;\n}\n\ncontext.global.genJwtToken = function(reqBody) {\n    var md5Str = new Buffer(reqBody.pwd,'base64').toString();\n    var uidHash = new Buffer(reqBody.uidhash,'base64').toString();\n    var localUidHash = context.global.CRYPTO.createHash(\"md5\").update(context.global.WinkUser.uid,\"utf8\").digest('hex');\n    var dgst_str=context.global.WinkUser.uid+':'+context.global.WinkUser.pwd;\n    var md5dgst=context.global.CRYPTO.createHash(\"md5\").update(dgst_str,\"utf8\").digest('hex');\n    var clientId = new Buffer(reqBody.uuid,'base64').toString();\n    var clientHash = context.global.CRYPTO.createHash(\"sha256\").update(clientId+':'+context.global.FREEBOARD_TOKEN,\"utf8\").digest('hex');\n    if (context.global.DEBUG ) node.warn('Cliend Id: '+clientId);\n    if (uidHash==localUidHash && md5Str==md5dgst) {\n        var token = context.global.wnr.jwt.sign({'clientId':clientHash},context.global.FREEBOARD_TOKEN);\n        if (context.global.DEBUG ) node.warn('Generated token: '+token);\n        flow.set('token',token);\n        return {isSet:true,token:token};\n    } else return {isSet:false};\n}\n\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 334.5,
    "y": 122,
    "wires": [
      [
        "60d5117c.b1838"
      ]
    ]
  },
  {
    "id": "6d8b2492.b48afc",
    "type": "debug",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "active": false,
    "console": "true",
    "complete": "payload",
    "x": 1178.5,
    "y": 704,
    "wires": []
  },
  {
    "id": "bcb7c158.9f15c",
    "type": "debug",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "true",
    "x": 982.5,
    "y": 665,
    "wires": []
  },
  {
    "id": "46c71437.8581ac",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "context.global.DEBUG=true;\n// context.global.useRobots=true;\nnode.warn('Debug mode on');\n\n//delete context.global.winkState.sensor_pods.wTag1;\n//delete context.global.winkDevCap.wTag1;\n//delete context.global.winkState.sensor_pods.event_Geo;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 260.5,
    "y": 1181.0000305175781,
    "wires": [
      []
    ]
  },
  {
    "id": "1ebe42e2.d4119d",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "Turn Debug On",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 91.5,
    "y": 1179,
    "wires": [
      [
        "46c71437.8581ac"
      ]
    ]
  },
  {
    "id": "d09311ea.350e3",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "context.global.DEBUG=false;\n// context.global.useRobots=false;\n// delete context.global.winkState.groups['@wnrSensors'];\n// delete context.global.winkState.groups['@wnrLights'];\n// delete context.global.winkState.groups['@valves'];  \n//delete context.global.winkState.light_bulbs['ST Dimmer']; \n//delete context.global.winkDevCap['ST Dimmer'];\n//delete context.global.winkState.binary_switches['Leviton switch']; \n//delete context.global.winkDevCap['Leviton switch'];\n delete context.global.winkState.sensor_pods['Forrest estates'];  \ndelete context.global.winkDevCap['Forrest estates']; \nnode.warn('Debug mode off');\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 258.5,
    "y": 1223,
    "wires": [
      []
    ]
  },
  {
    "id": "a5983a61.b6a698",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "Turn Debug Off",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 100,
    "y": 1220,
    "wires": [
      [
        "d09311ea.350e3"
      ]
    ]
  },
  {
    "id": "313928b3.f95e08",
    "type": "debug",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "payload",
    "x": 173.5,
    "y": 911,
    "wires": []
  },
  {
    "id": "8f2dd829.ec1508",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Standardize the response if useRobots is true",
    "func": "function isEmpty(obj) {\n    for(var prop in obj) {\n        if(obj.hasOwnProperty(prop))\n            return false;\n    }\n\n    return true;\n}\n\n\ncontext.global.timestamp=new Date();\n//context.global.useRobots=true;\nif (!('winkChanged' in context.global)) context.global.winkChanged={};\nif('useRobots' in context.global && context.global.useRobots) {\n\n    // Filter out system groups / system devices.\n//    if (msg.payload.name.substring(0,1)!==\".\" && msg.payload.name.substring(0,1)!==\"@\") \n      if (msg.payload.object_type && msg.payload.object_type!=='group')// && (!('desired_state' in msg.payload) || ('desired_state' in msg.payload && isEmpty(msg.payload.desired_state))))\n        {\n        // Create variable if it doesn't exist already.\n        if (typeof context.global.winkChanged[msg.payload.name]==='undefined') { context.global.winkChanged[msg.payload.name] = {} }\n\n        // Create new_state if it doesn't exist already.\n        if (typeof context.global.winkChanged[msg.payload.name].new_state==='undefined') \n        {\n            context.global.winkChanged[msg.payload.name].new_state = {}\n        }\n        else { \n            // If new_state already exists, then just set old_state == to new_state.\n            context.global.winkChanged[msg.payload.name].old_state=context.global.winkChanged[msg.payload.name].new_state;\n        }\n        \n        if ('last_reading' in msg.payload)\n\t\t{\n\t\t\tvar lr = msg.payload.last_reading;\n\t\t\tvar ds = msg.payload.desired_state;\n\t\t\tvar Obj_type = msg.payload.object_type;\n\n\t\t\tif ('temperature' in lr)\n\t\t\t{\n\t\t\t\tif ('occupied' in lr)\n\t\t\t\t{\n\t\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = {\n\t\t\t\t\t\toccupied:lr.occupied,\n\t\t\t\t\t\ttemperature:((lr.temperature)*1.8+32).toFixed(2)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = ((lr.temperature)*1.8+32).toFixed(2);\n\t\t\t\t}\n\t\t\t}\n        \n\t\t\tif('enabled' in lr)\n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = (lr.enabled ? context.global.timestamp:\"disabled\")\n\t\t\t}\n\t\t\t\n\t\t\tif('Playing' in lr)\n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = (lr.Playing ? 'playing' :'idle')\n\t\t\t}\t\t\t\n        \n\t\t\tif ('motion' in lr)\n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = lr.motion\n\t\t\t}\n\n\t\t\tif ('opened' in lr) \n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = (lr.opened ? \"Opened\":\"Closed\")\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif ('activity_detected' in lr) \n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = (lr.activity_detected ? \"used\":\"none\");\n\t\t\t}\n\t\t\t\n        \n            if ('locked' in lr && (!('locked' in ds))) // || ds.locked===lr.locked) ) \n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = (lr.locked ? \"Locked\":\"Unlocked\");\n\t\t\t}\n    \n\t\t\tif ('position' in lr && (!('position' in ds) || ('position' in ds && lr.position== ds.position)))\n\n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = (lr.position==1 ? \"Closed\":\"Opened\");\n\t\t\t}\n        \n            if ((Obj_type=='light_bulb' || Obj_type=='binary_switch')  && (!('powered' in ds) || ('powered' in ds && ds.powered==lr.powered && (Obj_type=='light_bulb'? ds.brightness==lr.brightness : true)))) {\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = {\n\t\t\t\t\tpowered:(lr.powered ? \"On\":\"Off\"),\n\t\t\t\t\tbrightness:(lr.powered ? lr.brightness*100 : 0)\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\tif ('lastWaypoint' in lr){\n\t\t\t    context.global.winkChanged[msg.payload.name].new_state = {\n\t\t\t        \"lastWaypoint\":lr.lastWaypoint,\n\t\t\t        \"lastEvent\":lr.lastEvent\n\t\t\t    }\n\t\t\t        \n\t\t\t}\n\t\t\t\n\t\t\tif ('presence' in lr)\n\t\t\t{\n\t\t\t    context.global.winkChanged[msg.payload.name].new_state = lr.presence\n\t\t\t}\n        \n\t\t\tif ('liquid_detected' in lr)\n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = lr.liquid_detected\n\t\t\t}\n\t\t\t\n\t\t\tif ('capturing_video' in lr) \n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = lr.capturing_video\n\t\t\t}\n        \n\t\t\tif (msg.payload.object_type ==\"propane_tank\")\n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = lr.remaining\n\t\t\t}\n        \n\t\t\tif (msg.payload.object_type ==\"powerstrip\")\n\t\t\t{\n\t\t\t\tcontext.global.winkChanged[msg.payload.name].new_state = msg.payload.outlets[0].name+\" \"+ (msg.payload.outlets[0].powered ? \"On, \":\"Off, \")+msg.payload.outlets[0].name+\" \"+(msg.payload.outlets[1].powered ? \"On\":\"Off\")\n\t\t\t}\n\t\t\tif (msg.payload.object_type ==\"remote\")\n\t\t\t{\n\t\t\t    context.global.winkChanged[msg.payload.name].new_state = {\n                'button_on_pressed' : lr.button_on_pressed,\n                'button_off_pressed' : lr.button_off_pressed,\n                'button_up_pressed' : lr.button_up_pressed,\n                'button_down_pressed' : lr.button_down_pressed\n\t\t\t    }\n\t\t\t}\n\t\t}\n/*\t\t\n        // This section echos the change to the debug pane. First, make sure something changed.\n        if (context.global.winkChanged[msg.payload.name].old_state!==context.global.winkChanged[msg.payload.name].new_state)\n        {\n            // If it's not a light bulb or switch...\n            if (typeof context.global.winkChanged[msg.payload.name].new_state.powered==='undefined')\n            {\n                // Check if it's an occupancy sensor, in which case new_state is an object and doesn't echo to debug nicely.\n                if (typeof context.global.winkChanged[msg.payload.name].new_state.occupied!=='undefined')\n                {\n                    node.warn(msg.payload.name+\" changed to occupancy \"+context.global.winkChanged[msg.payload.name].new_state.occupied+\" and temperature \"+context.global.winkChanged[msg.payload.name].new_state.temperature+\"*F\")\n                }\n                else {\n                    // Otherwise, just output old_state to new_state\n                    node.warn(msg.payload.name+\" changed from \"+context.global.winkChanged[msg.payload.name].old_state+\" to \"+context.global.winkChanged[msg.payload.name].new_state);\n                }\n            } \n            // If it IS a light bulb or switch...\n            else \n            {\n                // Old doesn't match new states so that means we're turning the bulb or switch on/off\n                if (context.global.winkChanged[msg.payload.name].old_state.powered!==context.global.winkChanged[msg.payload.name].new_state.powered)\n                {\n                    node.warn(msg.payload.name+\" turned \"+context.global.winkChanged[msg.payload.name].new_state.powered+\" (Brightness: \"+context.global.winkChanged[msg.payload.name].new_state.brightness+\"%)\");    \n                }\n                // The bulb/switch was already on, we just changed brightness.\n                else if (context.global.winkChanged[msg.payload.name].new_state.powered==\"On\")\n                {\n                    node.warn(msg.payload.name+\" changed brightness from \"+context.global.winkChanged[msg.payload.name].old_state.brightness+\"% to \"+context.global.winkChanged[msg.payload.name].new_state.brightness+\"%\");\n                }\n            }\n        } */\n\n        // Load the standardized text into an HTTP request to send to the \"Robots\" tab.\n        var newMsg = {\n            url:context.global.BlueMixUrlBase+'/red/robots',\n            \"method\": \"POST\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.FREEBOARD_TOKEN\n            },\n            payload:{\n                'name':msg.payload.name,\n                'object_type':msg.payload.object_type,\n                'new_state':context.global.winkChanged[msg.payload.name].new_state,\n                'old_state':context.global.winkChanged[msg.payload.name].old_state\n            }\n        };\n        if('key_name' in context.global.winkChanged[msg.payload.name]) newMsg.payload.key_used = context.global.winkChanged[msg.payload.name].key_name;\n        if (newMsg.payload.new_state!==newMsg.payload.old_state){\n        if (newMsg.payload.object_type=='lock'){\n            setTimeout(function(){\n            \tnewMsg.payload.key_used = context.global.CheckKeyUsage(msg.payload.object_id,15);\n\t\t\t\tnode.warn('changed key name: '+ context.global.winkChanged[msg.payload.name].key_name);\n\t\t\t\tnode.send(newMsg);\n            },10*1000);\n        }   \n          else return newMsg;  \n        } \n    }\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 224.5,
    "y": 776,
    "wires": [
      [
        "30b2f292.e929ae",
        "313928b3.f95e08"
      ]
    ]
  },
  {
    "id": "30b2f292.e929ae",
    "type": "rbe",
    "z": "3cc9f29d.c3360e",
    "name": "block duplicates",
    "func": "rbe",
    "gap": "",
    "start": "",
    "x": 500.5,
    "y": 825,
    "wires": [
      [
        "34aee83d.7ecf68"
      ]
    ]
  },
  {
    "id": "bca9da09.fb31c8",
    "type": "delay",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "4",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 926.5,
    "y": 759,
    "wires": [
      [
        "ef1dad5d.3c9a7"
      ]
    ]
  },
  {
    "id": "1962051c.08bd0b",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "if (!('FREEBOARD_TOKEN' in context.global) || context.global.FREEBOARD_TOKEN===''){\n    context.global.generate_token('FREEBOARD_TOKEN');\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 830,
    "y": 120,
    "wires": [
      [
        "7910eb92.a57f64"
      ]
    ]
  },
  {
    "id": "c9b7c352.1b586",
    "type": "delay",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "pauseType": "delay",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 314.5,
    "y": 1850,
    "wires": [
      [
        "4325c84b.846f98"
      ]
    ]
  },
  {
    "id": "7910eb92.a57f64",
    "type": "debug",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 1008.5,
    "y": 130,
    "wires": []
  },
  {
    "id": "34d65512.1b699a",
    "type": "delay",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "pauseType": "delay",
    "timeout": "35",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 255.5,
    "y": 1664,
    "wires": [
      [
        "5f5abdf0.b205a4"
      ]
    ]
  },
  {
    "id": "98a14135.4c7af",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "var lr=msg.payload.last_reading;\n//node.warn('Last Reading:');\n//node.warn(lr);\nvar sensorType;\nvar sensor=context.global.winkState.sensor_pods[msg.payload.name];\nif ('motion' in lr) sensorType='motion'\nelse if ('liquid_detected' in lr) sensorType='leak'\nelse if ('opened' in lr) sensorType='tripper'\nelse if (sensor.eco_system == 'BLOOMSKY') sensorType='weather'\nelse if('lat' in lr ) sensorType='geo'\nelse sensorType='multi'\nvar sensorMsg={}\nsensorMsg.payload={\n        type:'sensor_pods',    \n        name:sensor.name,\n        object_id:sensor.object_id,\n        stype:sensorType,\n        last_reading: lr\n}\nnode.send(sensorMsg);\n",
    "outputs": 1,
    "noerr": 0,
    "x": 889.5,
    "y": 1346,
    "wires": [
      [
        "cd3e6e9e.38adf"
      ]
    ]
  },
  {
    "id": "8e0650b.d3555b",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "GetWKeys",
    "method": "use",
    "ret": "obj",
    "url": "",
    "tls": "",
    "x": 1371.5,
    "y": 256,
    "wires": [
      [
        "f541e29a.ef7a3"
      ]
    ]
  },
  {
    "id": "f541e29a.ef7a3",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "GetKeys",
    "func": "context.global.getWinkState(msg.payload);\ndelete context.global.winkState._msgid;\nreturn;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 1545.5,
    "y": 256,
    "wires": [
      []
    ]
  },
  {
    "id": "f94c1551.d35258",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "if ('last_reading' in msg.payload){\n      var lr = msg.payload.last_reading;\n      if ('locked' in lr) {\n            var newMsg ={\n            \"url\":\"https://api.wink.com/users/me/keys\",\n            \"method\": \"GET\",\n            headers: {\n                \"Authorization\":\"Bearer \"+context.global.WinkToken,\n                \"User-Agent\":\"Manufacturer/Darwin node/0.10.30 Wink/999.99.9\"\n          }\n        };\n        node.send(newMsg);\n      }\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 790,
    "y": 580,
    "wires": [
      [
        "8e0650b.d3555b"
      ]
    ]
  },
  {
    "id": "70b22b4c.84dfc4",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "Look for ST devices",
    "func": "if ('SmartThingsApiToken' in context.global && context.global.SmartThingsApiToken!==\"\" && 'SmartThingsApiEndPoint' in context.global && context.global.SmartThingsApiEndPoint!==\"\") {\n    var StMsg ={\n        \"url\":context.global.SmartThingsApiEndPoint+'/switches',\n        \"method\": \"GET\",\n        headers: {\n            \"Authorization\":\"Bearer \"+context.global.SmartThingsApiToken\n        }\n    };\n    node.send(StMsg);\n}\n",
    "outputs": 1,
    "noerr": 0,
    "x": 480,
    "y": 200,
    "wires": [
      [
        "ce604467.023118"
      ]
    ]
  },
  {
    "id": "ce604467.023118",
    "type": "http request",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "method": "use",
    "ret": "obj",
    "url": "",
    "tls": "",
    "x": 716.5,
    "y": 195,
    "wires": [
      [
        "b1e546aa.1a15b8"
      ]
    ]
  },
  {
    "id": "b1e546aa.1a15b8",
    "type": "function",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "func": "function setDeviceCapabilities(device,capabilities){\n    var capbExists=false;\n    var newCapb={};\n    newCapb.fields=[];\n    if (device in context.global.winkDevCap &&  'fields' in context.global.winkDevCap[device]) {\n        for (var i=0;i<context.global.winkDevCap[device].fields.length;i++ ) {\n                r=context.global.winkDevCap[device].fields[i];\n                newCapb.fields.push(r);\n        }\n    }\n    for (var j=0;j<capabilities.length; j++) {\n        c = capabilities[j];\n        capbExists=false;\n            for (var k=0;k<newCapb.fields.length;k++ ) {\n                r=newCapb.fields[k];\n                if (r.field == c.capb){\n                    capbExists=true;\n                    break;\n                }\n            }\n        if (!capbExists) newCapb.fields.push({\n              field:c.capb, type: c.type  \n        });\n    }\n    return newCapb;\n}\n\nfunction setSwitchDevice(Sdevice) {\n    var devCapb=[];\n    if (\"attributes\" in Sdevice && 'level' in Sdevice.attributes) {\n        devType='light_bulb';\n        devCapb = setDeviceCapabilities(Sdevice.name.replace('+',' '),[{capb:'powered', type:'boolean'},{capb:'brightness', \"type\": 'percentage'}]);\n    } else {\n        devType='binary_switch';\n        devCapb = setDeviceCapabilities(Sdevice.name.replace('+',' '),[{capb:'powered', type:'boolean'}]);        \n    }\n        \n wDevice = {\n              capabilities: devCapb,\n              device_manufacturer: 'SmartThings',\n              \"eco_system\" : \"SmartThings\",\n              desired_state:{},\n              last_reading: \n               { \n                    connection: true,\n                    'powered': Sdevice.attributes.switch=='on' ? true : false,\n                    'lastUpdated' : new Date().getTime()\n               },\n              manufacturer_device_model: 'smartthings_'+Sdevice.stream+'_switch',\n              model_name:'Smartthings '+devType, \n              name:Sdevice.name.replace('+',' '),\n              object_id:Sdevice.id,\n              object_type: devType,\n              radio_type: 'wifi',\n              sensor_pod_id:Sdevice.id,\n              triggers: [],\n              units: {},\n              upc_code:Sdevice.name.replace('+',' '),\n              upc_id: Sdevice.id\n              };\n    if (devType=='light_bulb') wDevice.last_reading.brightness=Sdevice.attributes.level/100;\n    context.global.getWinkState(wDevice);\n}\n\nif (msg.statusCode==200){\n    for (var i=0;i<msg.payload.length;i++){\n        setSwitchDevice(msg.payload[i]);\n    }\ndelete context.global.winkState._msgid;    \n}\nreturn;",
    "outputs": 1,
    "noerr": 0,
    "x": 877.5,
    "y": 192,
    "wires": [
      [
        "7910eb92.a57f64"
      ]
    ]
  },
  {
    "id": "a0a11901.c48138",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 227.5,
    "y": 213,
    "wires": [
      [
        "70b22b4c.84dfc4"
      ]
    ]
  },
  {
    "id": "5b0b69ef.87ece8",
    "type": "delay",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "4",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 1024.5,
    "y": 805,
    "wires": [
      [
        "93090bac.b85078"
      ]
    ]
  },
  {
    "id": "4fc5b449.bac26c",
    "type": "inject",
    "z": "3cc9f29d.c3360e",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 80,
    "y": 180,
    "wires": [
      [
        "e81286b4.f15858"
      ]
    ]
  },
  {
    "id": "db7a5fe0.c5033",
    "type": "websocket-listener",
    "z": "",
    "path": "/ws/winkStat",
    "wholemsg": "false"
  }
]
